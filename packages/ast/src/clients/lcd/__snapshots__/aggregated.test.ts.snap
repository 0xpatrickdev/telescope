// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AggregatedLCDClient 1`] = `
"export class QueryClient extends LCDClient {
  constructor({
    restEndpoint
  }) {
    super({
      restEndpoint
    });
  }

  /* Balance queries the balance of a single coin for a single account. */
  async balance(params: QueryBalanceRequest): Promise<QueryBalanceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}/by_denom\`;
    return await this.request(endpoint, options);
  }

  /* AllBalances queries the balance of all coins for a single account. */
  async allBalances(params: QueryAllBalancesRequest): Promise<QueryAllBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}\`;
    return await this.request(endpoint, options);
  }

  /* SpendableBalances queries the spenable balance of all coins for a single
  account. */
  async spendableBalances(params: QuerySpendableBalancesRequest): Promise<QuerySpendableBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/spendable_balances/\${params.address}\`;
    return await this.request(endpoint, options);
  }

  /* TotalSupply queries the total supply of all coins. */
  async totalSupply(params: QueryTotalSupplyRequest): Promise<QueryTotalSupplyResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/supply\`;
    return await this.request(endpoint, options);
  }

  /* SupplyOf queries the supply of a single coin. */
  async supplyOf(params: QuerySupplyOfRequest): Promise<QuerySupplyOfResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/supply/by_denom\`;
    return await this.request(endpoint, options);
  }

  /* Params queries the parameters of x/bank module. */
  async params(params: QueryParamsRequest): Promise<QueryParamsResponse> {
    const endpoint = \`cosmos/bank/v1beta1/params\`;
    return await this.request(endpoint);
  }

  /* DenomsMetadata queries the client metadata of a given coin denomination. */
  async denomMetadata(params: QueryDenomMetadataRequest): Promise<QueryDenomMetadataResponse> {
    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata/\${params.denom}\`;
    return await this.request(endpoint);
  }

  /* DenomsMetadata queries the client metadata for all registered coin
  denominations. */
  async denomsMetadata(params: QueryDenomsMetadataRequest): Promise<QueryDenomsMetadataResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata\`;
    return await this.request(endpoint, options);
  }

  /* DenomOwners queries for all account addresses that own a particular token
  denomination. */
  async denomOwners(params: QueryDenomOwnersRequest): Promise<QueryDenomOwnersResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/denom_owners/\${params.denom}\`;
    return await this.request(endpoint, options);
  }

  /* Pools */
  async pools(params: QueryPoolsRequest): Promise<QueryPoolsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools\`;
    return await this.request(endpoint, options);
  }

  /* NumPools */
  async numPools(params: QueryNumPoolsRequest): Promise<QueryNumPoolsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/num_pools\`;
    return await this.request(endpoint);
  }

  /* TotalLiquidity */
  async totalLiquidity(params: QueryTotalLiquidityRequest): Promise<QueryTotalLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/total_liquidity\`;
    return await this.request(endpoint);
  }

  /* Per Pool gRPC Endpoints */
  async pool(params: QueryPoolRequest): Promise<QueryPoolResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}\`;
    return await this.request(endpoint);
  }

  /* PoolParams */
  async poolParams(params: QueryPoolParamsRequest): Promise<QueryPoolParamsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/params\`;
    return await this.request(endpoint);
  }

  /* TotalPoolLiquidity */
  async totalPoolLiquidity(params: QueryTotalPoolLiquidityRequest): Promise<QueryTotalPoolLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_pool_liquidity\`;
    return await this.request(endpoint);
  }

  /* TotalShares */
  async totalShares(params: QueryTotalSharesRequest): Promise<QueryTotalSharesResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_shares\`;
    return await this.request(endpoint);
  }

  /* SpotPrice defines a gRPC query handler that returns the spot price given
  a base denomination and a quote denomination. */
  async spotPrice(params: QuerySpotPriceRequest): Promise<QuerySpotPriceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.baseAssetDenom !== \\"undefined\\") {
      options.params.base_asset_denom = params.baseAssetDenom;
    }

    if (typeof params?.quoteAssetDenom !== \\"undefined\\") {
      options.params.quote_asset_denom = params.quoteAssetDenom;
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/prices\`;
    return await this.request(endpoint, options);
  }

  /* Estimate the swap. */
  async estimateSwapExactAmountIn(params: QuerySwapExactAmountInRequest): Promise<QuerySwapExactAmountInResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.tokenIn !== \\"undefined\\") {
      options.params.token_in = params.tokenIn;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_in\`;
    return await this.request(endpoint, options);
  }

  /* EstimateSwapExactAmountOut */
  async estimateSwapExactAmountOut(params: QuerySwapExactAmountOutRequest): Promise<QuerySwapExactAmountOutResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    if (typeof params?.tokenOut !== \\"undefined\\") {
      options.params.token_out = params.tokenOut;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_out\`;
    return await this.request(endpoint, options);
  }

}"
`;

exports[`options 1`] = `
"export class QueryClient extends LCDClient {
  constructor({
    restEndpoint
  }) {
    super({
      restEndpoint
    });
  }

  /* Balance queries the balance of a single coin for a single account. */
  async balance(params: QueryBalanceRequest): Promise<QueryBalanceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}/by_denom\`;
    return await this.request(endpoint, options);
  }

  /* AllBalances queries the balance of all coins for a single account. */
  async allBalances(params: QueryAllBalancesRequest): Promise<QueryAllBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}\`;
    return await this.request(endpoint, options);
  }

  /* SpendableBalances queries the spenable balance of all coins for a single
  account. */
  async spendableBalances(params: QuerySpendableBalancesRequest): Promise<QuerySpendableBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/spendable_balances/\${params.address}\`;
    return await this.request(endpoint, options);
  }

  /* TotalSupply queries the total supply of all coins. */
  async totalSupply(params: QueryTotalSupplyRequest): Promise<QueryTotalSupplyResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/supply\`;
    return await this.request(endpoint, options);
  }

  /* SupplyOf queries the supply of a single coin. */
  async supplyOf(params: QuerySupplyOfRequest): Promise<QuerySupplyOfResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/supply/by_denom\`;
    return await this.request(endpoint, options);
  }

  /* Params queries the parameters of x/bank module. */
  async params(params: QueryParamsRequest): Promise<QueryParamsResponse> {
    const endpoint = \`cosmos/bank/v1beta1/params\`;
    return await this.request(endpoint);
  }

  /* DenomsMetadata queries the client metadata of a given coin denomination. */
  async denomMetadata(params: QueryDenomMetadataRequest): Promise<QueryDenomMetadataResponse> {
    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata/\${params.denom}\`;
    return await this.request(endpoint);
  }

  /* DenomsMetadata queries the client metadata for all registered coin
  denominations. */
  async denomsMetadata(params: QueryDenomsMetadataRequest): Promise<QueryDenomsMetadataResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata\`;
    return await this.request(endpoint, options);
  }

  /* DenomOwners queries for all account addresses that own a particular token
  denomination. */
  async denomOwners(params: QueryDenomOwnersRequest): Promise<QueryDenomOwnersResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/bank/v1beta1/denom_owners/\${params.denom}\`;
    return await this.request(endpoint, options);
  }

  /* Proposal queries proposal details based on ProposalID. */
  async proposal(params: QueryProposalRequest): Promise<QueryProposalResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}\`;
    return await this.request(endpoint, options);
  }

  /* Proposals queries all proposals based on given status. */
  async proposals(params: QueryProposalsRequest): Promise<QueryProposalsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalStatus !== \\"undefined\\") {
      options.params.proposal_status = params.proposalStatus;
    }

    if (typeof params?.voter !== \\"undefined\\") {
      options.params.voter = params.voter;
    }

    if (typeof params?.depositor !== \\"undefined\\") {
      options.params.depositor = params.depositor;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals\`;
    return await this.request(endpoint, options);
  }

  /* Vote queries voted information based on proposalID, voterAddr. */
  async vote(params: QueryVoteRequest): Promise<QueryVoteResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}votes/\${params.voter}\`;
    return await this.request(endpoint, options);
  }

  /* Votes queries votes of a given proposal. */
  async votes(params: QueryVotesRequest): Promise<QueryVotesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}/votes\`;
    return await this.request(endpoint, options);
  }

  /* Params queries all parameters of the gov module. */
  async params(params: QueryParamsRequest): Promise<QueryParamsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.paramsType !== \\"undefined\\") {
      options.params.params_type = params.paramsType;
    }

    const endpoint = \`cosmos/gov/v1beta1/params/\${params.params_type}\`;
    return await this.request(endpoint, options);
  }

  /* Deposit queries single deposit information based proposalID, depositAddr. */
  async deposit(params: QueryDepositRequest): Promise<QueryDepositResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}deposits/\${params.depositor}\`;
    return await this.request(endpoint, options);
  }

  /* Deposits queries all deposits of a single proposal. */
  async deposits(params: QueryDepositsRequest): Promise<QueryDepositsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}/deposits\`;
    return await this.request(endpoint, options);
  }

  /* TallyResult queries the tally of a proposal vote. */
  async tallyResult(params: QueryTallyResultRequest): Promise<QueryTallyResultResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.proposalId !== \\"undefined\\") {
      options.params.proposal_id = params.proposalId;
    }

    const endpoint = \`cosmos/gov/v1beta1/proposals/\${params.proposal_id}/tally\`;
    return await this.request(endpoint, options);
  }

  /* Pools */
  async pools(params: QueryPoolsRequest): Promise<QueryPoolsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      options.params.pagination = params.pagination;
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools\`;
    return await this.request(endpoint, options);
  }

  /* NumPools */
  async numPools(params: QueryNumPoolsRequest): Promise<QueryNumPoolsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/num_pools\`;
    return await this.request(endpoint);
  }

  /* TotalLiquidity */
  async totalLiquidity(params: QueryTotalLiquidityRequest): Promise<QueryTotalLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/total_liquidity\`;
    return await this.request(endpoint);
  }

  /* Per Pool gRPC Endpoints */
  async pool(params: QueryPoolRequest): Promise<QueryPoolResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}\`;
    return await this.request(endpoint);
  }

  /* PoolParams */
  async poolParams(params: QueryPoolParamsRequest): Promise<QueryPoolParamsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/params\`;
    return await this.request(endpoint);
  }

  /* TotalPoolLiquidity */
  async totalPoolLiquidity(params: QueryTotalPoolLiquidityRequest): Promise<QueryTotalPoolLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_pool_liquidity\`;
    return await this.request(endpoint);
  }

  /* TotalShares */
  async totalShares(params: QueryTotalSharesRequest): Promise<QueryTotalSharesResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_shares\`;
    return await this.request(endpoint);
  }

  /* SpotPrice defines a gRPC query handler that returns the spot price given
  a base denomination and a quote denomination. */
  async spotPrice(params: QuerySpotPriceRequest): Promise<QuerySpotPriceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.baseAssetDenom !== \\"undefined\\") {
      options.params.base_asset_denom = params.baseAssetDenom;
    }

    if (typeof params?.quoteAssetDenom !== \\"undefined\\") {
      options.params.quote_asset_denom = params.quoteAssetDenom;
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/prices\`;
    return await this.request(endpoint, options);
  }

  /* Estimate the swap. */
  async estimateSwapExactAmountIn(params: QuerySwapExactAmountInRequest): Promise<QuerySwapExactAmountInResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.tokenIn !== \\"undefined\\") {
      options.params.token_in = params.tokenIn;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_in\`;
    return await this.request(endpoint, options);
  }

  /* EstimateSwapExactAmountOut */
  async estimateSwapExactAmountOut(params: QuerySwapExactAmountOutRequest): Promise<QuerySwapExactAmountOutResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    if (typeof params?.tokenOut !== \\"undefined\\") {
      options.params.token_out = params.tokenOut;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_out\`;
    return await this.request(endpoint, options);
  }

}"
`;
