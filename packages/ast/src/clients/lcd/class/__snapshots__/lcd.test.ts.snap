// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos LCDClient 1`] = `
"export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }: {
    restEndpoint: string;
  }) {
    super({
      restEndpoint
    });
  }

  /* Balance queries the balance of a single coin for a single account. */
  async balance(params: QueryBalanceRequest): Promise<QueryBalanceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}/by_denom\`;
    return await this.request<QueryBalanceResponse>(endpoint, options);
  }

  /* AllBalances queries the balance of all coins for a single account. */
  async allBalances(params: QueryAllBalancesRequest): Promise<QueryAllBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/bank/v1beta1/balances/\${params.address}\`;
    return await this.request<QueryAllBalancesResponse>(endpoint, options);
  }

  /* SpendableBalances queries the spenable balance of all coins for a single
  account. */
  async spendableBalances(params: QuerySpendableBalancesRequest): Promise<QuerySpendableBalancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/bank/v1beta1/spendable_balances/\${params.address}\`;
    return await this.request<QuerySpendableBalancesResponse>(endpoint, options);
  }

  /* TotalSupply queries the total supply of all coins. */
  async totalSupply(params: QueryTotalSupplyRequest = {
    pagination: undefined
  }): Promise<QueryTotalSupplyResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/bank/v1beta1/supply\`;
    return await this.request<QueryTotalSupplyResponse>(endpoint, options);
  }

  /* SupplyOf queries the supply of a single coin. */
  async supplyOf(params: QuerySupplyOfRequest): Promise<QuerySupplyOfResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.denom !== \\"undefined\\") {
      options.params.denom = params.denom;
    }

    const endpoint = \`cosmos/bank/v1beta1/supply/by_denom\`;
    return await this.request<QuerySupplyOfResponse>(endpoint, options);
  }

  /* Params queries the parameters of x/bank module. */
  async params(_params: QueryParamsRequest = {}): Promise<QueryParamsResponse> {
    const endpoint = \`cosmos/bank/v1beta1/params\`;
    return await this.request<QueryParamsResponse>(endpoint);
  }

  /* DenomsMetadata queries the client metadata of a given coin denomination. */
  async denomMetadata(params: QueryDenomMetadataRequest): Promise<QueryDenomMetadataResponse> {
    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata/\${params.denom}\`;
    return await this.request<QueryDenomMetadataResponse>(endpoint);
  }

  /* DenomsMetadata queries the client metadata for all registered coin
  denominations. */
  async denomsMetadata(params: QueryDenomsMetadataRequest = {
    pagination: undefined
  }): Promise<QueryDenomsMetadataResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/bank/v1beta1/denoms_metadata\`;
    return await this.request<QueryDenomsMetadataResponse>(endpoint, options);
  }

  /* DenomOwners queries for all account addresses that own a particular token
  denomination. */
  async denomOwners(params: QueryDenomOwnersRequest): Promise<QueryDenomOwnersResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/bank/v1beta1/denom_owners/\${params.denom}\`;
    return await this.request<QueryDenomOwnersResponse>(endpoint, options);
  }

}"
`;

exports[`cosmos fee LCDClient 1`] = `
"export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }: {
    restEndpoint: string;
  }) {
    super({
      restEndpoint
    });
  }

  /* Allowance returns fee granted to the grantee by the granter. */
  async allowance(params: QueryAllowanceRequest): Promise<QueryAllowanceResponse> {
    const endpoint = \`cosmos/feegrant/v1beta1/allowance/\${params.granter}/\${params.grantee}\`;
    return await this.request<QueryAllowanceResponse>(endpoint);
  }

  /* Allowances returns all the grants for address. */
  async allowances(params: QueryAllowancesRequest): Promise<QueryAllowancesResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/feegrant/v1beta1/allowances/\${params.grantee}\`;
    return await this.request<QueryAllowancesResponse>(endpoint, options);
  }

  /* AllowancesByGranter returns all the grants given by an address
  Since v0.46 */
  async allowancesByGranter(params: QueryAllowancesByGranterRequest): Promise<QueryAllowancesByGranterResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/feegrant/v1beta1/issued/\${params.granter}\`;
    return await this.request<QueryAllowancesByGranterResponse>(endpoint, options);
  }

}"
`;

exports[`cosmos/app/v1alpha1/query.proto 1`] = `""`;

exports[`cosmos/staking/v1beta1/query.proto 1`] = `
"export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }: {
    restEndpoint: string;
  }) {
    super({
      restEndpoint
    });
  }

  /* Validators queries all validators that match the given status. */
  async validators(params: QueryValidatorsRequest): Promise<QueryValidatorsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.status !== \\"undefined\\") {
      options.params.status = params.status;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/validators\`;
    return await this.request<QueryValidatorsResponse>(endpoint, options);
  }

  /* Validator queries validator info for given validator address. */
  async validator(params: QueryValidatorRequest): Promise<QueryValidatorResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    const endpoint = \`cosmos/staking/v1beta1/validators/\${params.validatorAddr}\`;
    return await this.request<QueryValidatorResponse>(endpoint, options);
  }

  /* ValidatorDelegations queries delegate info for given validator. */
  async validatorDelegations(params: QueryValidatorDelegationsRequest): Promise<QueryValidatorDelegationsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/validators/\${params.validatorAddr}/delegations\`;
    return await this.request<QueryValidatorDelegationsResponse>(endpoint, options);
  }

  /* ValidatorUnbondingDelegations queries unbonding delegations of a validator. */
  async validatorUnbondingDelegations(params: QueryValidatorUnbondingDelegationsRequest): Promise<QueryValidatorUnbondingDelegationsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/validators/\${params.validatorAddr}/unbonding_delegations\`;
    return await this.request<QueryValidatorUnbondingDelegationsResponse>(endpoint, options);
  }

  /* Delegation queries delegate info for given validator delegator pair. */
  async delegation(params: QueryDelegationRequest): Promise<QueryDelegationResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    const endpoint = \`cosmos/staking/v1beta1/validators/\${params.validatorAddr}delegations/\${params.delegatorAddr}\`;
    return await this.request<QueryDelegationResponse>(endpoint, options);
  }

  /* UnbondingDelegation queries unbonding info for given validator delegator
  pair. */
  async unbondingDelegation(params: QueryUnbondingDelegationRequest): Promise<QueryUnbondingDelegationResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    const endpoint = \`cosmos/staking/v1beta1/validators/\${params.validatorAddr}/delegations/\${params.delegatorAddr}/unbonding_delegation\`;
    return await this.request<QueryUnbondingDelegationResponse>(endpoint, options);
  }

  /* DelegatorDelegations queries all delegations of a given delegator address. */
  async delegatorDelegations(params: QueryDelegatorDelegationsRequest): Promise<QueryDelegatorDelegationsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/delegations/\${params.delegatorAddr}\`;
    return await this.request<QueryDelegatorDelegationsResponse>(endpoint, options);
  }

  /* DelegatorUnbondingDelegations queries all unbonding delegations of a given
  delegator address. */
  async delegatorUnbondingDelegations(params: QueryDelegatorUnbondingDelegationsRequest): Promise<QueryDelegatorUnbondingDelegationsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/delegators/\${params.delegatorAddr}/unbonding_delegations\`;
    return await this.request<QueryDelegatorUnbondingDelegationsResponse>(endpoint, options);
  }

  /* Redelegations queries redelegations of given address. */
  async redelegations(params: QueryRedelegationsRequest): Promise<QueryRedelegationsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.srcValidatorAddr !== \\"undefined\\") {
      options.params.src_validator_addr = params.srcValidatorAddr;
    }

    if (typeof params?.dstValidatorAddr !== \\"undefined\\") {
      options.params.dst_validator_addr = params.dstValidatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/delegators/\${params.delegatorAddr}/redelegations\`;
    return await this.request<QueryRedelegationsResponse>(endpoint, options);
  }

  /* DelegatorValidators queries all validators info for given delegator
  address. */
  async delegatorValidators(params: QueryDelegatorValidatorsRequest): Promise<QueryDelegatorValidatorsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`cosmos/staking/v1beta1/delegators/\${params.delegatorAddr}/validators\`;
    return await this.request<QueryDelegatorValidatorsResponse>(endpoint, options);
  }

  /* DelegatorValidator queries validator info for given delegator validator
  pair. */
  async delegatorValidator(params: QueryDelegatorValidatorRequest): Promise<QueryDelegatorValidatorResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.delegatorAddr !== \\"undefined\\") {
      options.params.delegator_addr = params.delegatorAddr;
    }

    if (typeof params?.validatorAddr !== \\"undefined\\") {
      options.params.validator_addr = params.validatorAddr;
    }

    const endpoint = \`cosmos/staking/v1beta1/delegators/\${params.delegatorAddr}validators/\${params.validatorAddr}\`;
    return await this.request<QueryDelegatorValidatorResponse>(endpoint, options);
  }

  /* HistoricalInfo queries the historical info for given height. */
  async historicalInfo(params: QueryHistoricalInfoRequest): Promise<QueryHistoricalInfoResponse> {
    const endpoint = \`cosmos/staking/v1beta1/historical_info/\${params.height}\`;
    return await this.request<QueryHistoricalInfoResponse>(endpoint);
  }

  /* Pool queries the pool info. */
  async pool(_params: QueryPoolRequest = {}): Promise<QueryPoolResponse> {
    const endpoint = \`cosmos/staking/v1beta1/pool\`;
    return await this.request<QueryPoolResponse>(endpoint);
  }

  /* Parameters queries the staking parameters. */
  async params(_params: QueryParamsRequest = {}): Promise<QueryParamsResponse> {
    const endpoint = \`cosmos/staking/v1beta1/params\`;
    return await this.request<QueryParamsResponse>(endpoint);
  }

}"
`;

exports[`osmosis LCDClient 1`] = `
"export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }: {
    restEndpoint: string;
  }) {
    super({
      restEndpoint
    });
  }

  /* Pools */
  async pools(params: QueryPoolsRequest = {
    pagination: undefined
  }): Promise<QueryPoolsResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.pagination !== \\"undefined\\") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools\`;
    return await this.request<QueryPoolsResponse>(endpoint, options);
  }

  /* NumPools */
  async numPools(_params: QueryNumPoolsRequest = {}): Promise<QueryNumPoolsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/num_pools\`;
    return await this.request<QueryNumPoolsResponse>(endpoint);
  }

  /* TotalLiquidity */
  async totalLiquidity(_params: QueryTotalLiquidityRequest = {}): Promise<QueryTotalLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/total_liquidity\`;
    return await this.request<QueryTotalLiquidityResponse>(endpoint);
  }

  /* Per Pool gRPC Endpoints */
  async pool(params: QueryPoolRequest): Promise<QueryPoolResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}\`;
    return await this.request<QueryPoolResponse>(endpoint);
  }

  /* PoolParams */
  async poolParams(params: QueryPoolParamsRequest): Promise<QueryPoolParamsResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/params\`;
    return await this.request<QueryPoolParamsResponse>(endpoint);
  }

  /* TotalPoolLiquidity */
  async totalPoolLiquidity(params: QueryTotalPoolLiquidityRequest): Promise<QueryTotalPoolLiquidityResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_pool_liquidity\`;
    return await this.request<QueryTotalPoolLiquidityResponse>(endpoint);
  }

  /* TotalShares */
  async totalShares(params: QueryTotalSharesRequest): Promise<QueryTotalSharesResponse> {
    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/total_shares\`;
    return await this.request<QueryTotalSharesResponse>(endpoint);
  }

  /* SpotPrice defines a gRPC query handler that returns the spot price given
  a base denomination and a quote denomination. */
  async spotPrice(params: QuerySpotPriceRequest): Promise<QuerySpotPriceResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.baseAssetDenom !== \\"undefined\\") {
      options.params.base_asset_denom = params.baseAssetDenom;
    }

    if (typeof params?.quoteAssetDenom !== \\"undefined\\") {
      options.params.quote_asset_denom = params.quoteAssetDenom;
    }

    const endpoint = \`osmosis/gamm/v1beta1/pools/\${params.poolId}/prices\`;
    return await this.request<QuerySpotPriceResponse>(endpoint, options);
  }

  /* Estimate the swap. */
  async estimateSwapExactAmountIn(params: QuerySwapExactAmountInRequest): Promise<QuerySwapExactAmountInResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.tokenIn !== \\"undefined\\") {
      options.params.tokenIn = params.tokenIn;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_in\`;
    return await this.request<QuerySwapExactAmountInResponse>(endpoint, options);
  }

  /* EstimateSwapExactAmountOut */
  async estimateSwapExactAmountOut(params: QuerySwapExactAmountOutRequest): Promise<QuerySwapExactAmountOutResponse> {
    const options: any = {
      params: {}
    };

    if (typeof params?.sender !== \\"undefined\\") {
      options.params.sender = params.sender;
    }

    if (typeof params?.routes !== \\"undefined\\") {
      options.params.routes = params.routes;
    }

    if (typeof params?.tokenOut !== \\"undefined\\") {
      options.params.tokenOut = params.tokenOut;
    }

    const endpoint = \`osmosis/gamm/v1beta1/\${params.poolId}/estimate/swap_exact_amount_out\`;
    return await this.request<QuerySwapExactAmountOutResponse>(endpoint, options);
  }

}"
`;

exports[`service info template 1`] = `
Object {
  "atEnd": false,
  "strs": Array [
    "osmosis/",
    "/v1beta1/estimate/swap_exact_amount_in",
  ],
}
`;

exports[`service info template 2`] = `
Object {
  "atEnd": false,
  "strs": Array [
    "osmosis/",
    "/v1beta1/",
    "/swap_exact_amount_in",
  ],
}
`;

exports[`service info template 3`] = `
Object {
  "atEnd": true,
  "strs": Array [
    "osmosis/",
    "/",
    "/",
    "/",
  ],
}
`;

exports[`service info template 4`] = `
Object {
  "atEnd": true,
  "strs": Array [
    "osmosis/gamm/v1beta1/estimate/",
  ],
}
`;

exports[`service info template 5`] = `
Object {
  "atEnd": true,
  "strs": Array [
    "cosmos/feegrant/v1beta1/allowance/",
    "/",
  ],
}
`;

exports[`template tags 1`] = `"\`/\${params.cosmos}/feegrant/v1beta1/\${params.allowance}/\${params.granter}/\${params.grantee}\`"`;
