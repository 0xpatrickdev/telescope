// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RPC Query Client 1`] = `
"/** Query defines the RPC service */
export interface Query {
  accounts(request?: QueryAccountsRequest): Promise<QueryAccountsResponse>;
  /*Accounts returns all the existing accounts
  
   Since: cosmos-sdk 0.43*/

  account(request: QueryAccountRequest): Promise<QueryAccountResponse>;
  /*Account returns account details based on address.*/

  params(request?: QueryParamsRequest): Promise<QueryParamsResponse>;
  /*Params queries all parameters.*/

  moduleAccounts(request?: QueryModuleAccountsRequest): Promise<QueryModuleAccountsResponse>;
  /*ModuleAccounts returns all the existing module accounts.*/

  bech32Prefix(request?: Bech32PrefixRequest): Promise<Bech32PrefixResponse>;
  /*Bech32 queries bech32Prefix*/

  addressBytesToString(request: AddressBytesToStringRequest): Promise<AddressBytesToStringResponse>;
  /*AddressBytesToString converts Account Address bytes to string*/

  addressStringToBytes(request: AddressStringToBytesRequest): Promise<AddressStringToBytesResponse>;
  /*AddressStringToBytes converts Address string to bytes*/

}"
`;

exports[`RPC Query Client 2`] = `
"export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
  }

  /* Accounts returns all the existing accounts
  
   Since: cosmos-sdk 0.43 */
  accounts = async (request: QueryAccountsRequest = {
    pagination: undefined
  }): Promise<QueryAccountsResponse> => {
    const data = QueryAccountsRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Accounts", data);
    return promise.then(data => QueryAccountsResponse.decode(new _m0.Reader(data)));
  };

  /* Account returns account details based on address. */
  account = async (request: QueryAccountRequest): Promise<QueryAccountResponse> => {
    const data = QueryAccountRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Account", data);
    return promise.then(data => QueryAccountResponse.decode(new _m0.Reader(data)));
  };

  /* Params queries all parameters. */
  params = async (request: QueryParamsRequest = {}): Promise<QueryParamsResponse> => {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Params", data);
    return promise.then(data => QueryParamsResponse.decode(new _m0.Reader(data)));
  };

  /* ModuleAccounts returns all the existing module accounts. */
  moduleAccounts = async (request: QueryModuleAccountsRequest = {}): Promise<QueryModuleAccountsResponse> => {
    const data = QueryModuleAccountsRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "ModuleAccounts", data);
    return promise.then(data => QueryModuleAccountsResponse.decode(new _m0.Reader(data)));
  };

  /* Bech32 queries bech32Prefix */
  bech32Prefix = async (request: Bech32PrefixRequest = {}): Promise<Bech32PrefixResponse> => {
    const data = Bech32PrefixRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Bech32Prefix", data);
    return promise.then(data => Bech32PrefixResponse.decode(new _m0.Reader(data)));
  };

  /* AddressBytesToString converts Account Address bytes to string */
  addressBytesToString = async (request: AddressBytesToStringRequest): Promise<AddressBytesToStringResponse> => {
    const data = AddressBytesToStringRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AddressBytesToString", data);
    return promise.then(data => AddressBytesToStringResponse.decode(new _m0.Reader(data)));
  };

  /* AddressStringToBytes converts Address string to bytes */
  addressStringToBytes = async (request: AddressStringToBytesRequest): Promise<AddressStringToBytesResponse> => {
    const data = AddressStringToBytesRequest.encode(request).finish();
    const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "AddressStringToBytes", data);
    return promise.then(data => AddressStringToBytesResponse.decode(new _m0.Reader(data)));
  };
}"
`;

exports[`RPC Query Client 3`] = `
"interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}"
`;
