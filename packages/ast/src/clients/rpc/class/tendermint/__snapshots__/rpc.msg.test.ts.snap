// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RPC Msg Client but Query implement 1`] = `
"/** Msg defines the bank Msg service. */
export interface Msg {
  /** Send defines a method for sending coins from one account to another account. */
  send(request: MsgSend): Promise<MsgSendResponse>;
  /** MultiSend defines a method for sending coins from some accounts to other accounts. */
  multiSend(request: MsgMultiSend): Promise<MsgMultiSendResponse>;
}"
`;

exports[`RPC Msg Client but Query implement 2`] = `
"export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.send = this.send.bind(this);
    this.multiSend = this.multiSend.bind(this);
  }
  send(request: MsgSend): Promise<MsgSendResponse> {
    const data = MsgSend.encode(request).finish();
    const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Send", data);
    return promise.then(data => MsgSendResponse.decode(new BinaryReader(data)));
  }
  multiSend(request: MsgMultiSend): Promise<MsgMultiSendResponse> {
    const data = MsgMultiSend.encode(request).finish();
    const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "MultiSend", data);
    return promise.then(data => MsgMultiSendResponse.decode(new BinaryReader(data)));
  }
}"
`;

exports[`RPC Msg Client but Query implement 3`] = `
"interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}"
`;

exports[`RPC Msg Query mixed implement Client 1`] = `
"/** Msg defines the bank Msg service. */
export interface Msg {
  /** Send defines a method for sending coins from one account to another account. */
  send(request: MsgSend): Promise<MsgSendResponse>;
  /** MultiSend defines a method for sending coins from some accounts to other accounts. */
  multiSend(request: BroadcastTxReq<MsgMultiSend>): Promise<BroadcastTxRes<MsgMultiSendResponse>>;
}"
`;

exports[`RPC Msg Query mixed implement Client 2`] = `
"export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.send = this.send.bind(this);
    this.multiSend = this.multiSend.bind(this);
  }
  send(request: MsgSend): Promise<MsgSendResponse> {
    const data = MsgSend.encode(request).finish();
    const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Send", data);
    return promise.then(data => MsgSendResponse.decode(new BinaryReader(data)));
  }
  multiSend(request: BroadcastTxReq<MsgMultiSend>): Promise<BroadcastTxRes<MsgMultiSendResponse>> {
    const data = [{
      typeUrl: MsgMultiSend.typeUrl,
      value: request.message
    }];
    const promise = this.rpc.signAndBroadcast!(request.signerAddress, data, request.fee, request.memo);
    return promise.then(data => ({
      txResponse: data,
      response: data && data.msgResponses?.length ? MsgMultiSendResponse.decode(data.msgResponses[0].value) : undefined
    }));
  }
}"
`;

exports[`RPC Msg implement Client 1`] = `
"/** Msg defines the bank Msg service. */
export interface Msg {
  /** Send defines a method for sending coins from one account to another account. */
  send(request: BroadcastTxReq<MsgSend>): Promise<BroadcastTxRes<MsgSendResponse>>;
  /** MultiSend defines a method for sending coins from some accounts to other accounts. */
  multiSend(request: BroadcastTxReq<MsgMultiSend>): Promise<BroadcastTxRes<MsgMultiSendResponse>>;
}"
`;

exports[`RPC Msg implement Client 2`] = `
"export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.send = this.send.bind(this);
    this.multiSend = this.multiSend.bind(this);
  }
  send(request: BroadcastTxReq<MsgSend>): Promise<BroadcastTxRes<MsgSendResponse>> {
    const data = [{
      typeUrl: MsgSend.typeUrl,
      value: request.message
    }];
    const promise = this.rpc.signAndBroadcast!(request.signerAddress, data, request.fee, request.memo);
    return promise.then(data => ({
      txResponse: data,
      response: data && data.msgResponses?.length ? MsgSendResponse.decode(data.msgResponses[0].value) : undefined
    }));
  }
  multiSend(request: BroadcastTxReq<MsgMultiSend>): Promise<BroadcastTxRes<MsgMultiSendResponse>> {
    const data = [{
      typeUrl: MsgMultiSend.typeUrl,
      value: request.message
    }];
    const promise = this.rpc.signAndBroadcast!(request.signerAddress, data, request.fee, request.memo);
    return promise.then(data => ({
      txResponse: data,
      response: data && data.msgResponses?.length ? MsgMultiSendResponse.decode(data.msgResponses[0].value) : undefined
    }));
  }
}"
`;
