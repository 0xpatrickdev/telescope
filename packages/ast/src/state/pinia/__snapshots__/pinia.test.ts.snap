// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`builds stores. 1`] = `
"export const usePiniaStore = defineStore('cosmos/auth/v1beta1/query.proto', {
  state: () => {
    return {
      accounts: ({} as QueryAccountsResponse),
      account: ({} as QueryAccountResponse),
      params: ({} as QueryParamsResponse),
      moduleAccounts: ({} as QueryModuleAccountsResponse),
      bech32Prefix: ({} as Bech32PrefixResponse),
      addressBytesToString: ({} as AddressBytesToStringResponse),
      addressStringToBytes: ({} as AddressStringToBytesResponse)
    };
  },
  getters: {
    lcdClient() {
      const requestClient = useEndpoint().restClient;
      return new LCDQueryClient({ requestClient });
    }

  },
  actions: {
    async fetchAccounts(param : QueryAccountsRequest) {
      this.accounts = await this.lcdClient.accounts(param);
      return this.accounts;
    },

    async fetchAccount(param : QueryAccountRequest) {
      this.account = await this.lcdClient.account(param);
      return this.account;
    },

    async fetchParams(param : QueryParamsRequest) {
      this.params = await this.lcdClient.params(param);
      return this.params;
    },

    async fetchModuleAccounts(param : QueryModuleAccountsRequest) {
      this.moduleAccounts = await this.lcdClient.moduleAccounts(param);
      return this.moduleAccounts;
    },

    async fetchBech32Prefix(param : Bech32PrefixRequest) {
      this.bech32Prefix = await this.lcdClient.bech32Prefix(param);
      return this.bech32Prefix;
    },

    async fetchAddressBytesToString(param : AddressBytesToStringRequest) {
      this.addressBytesToString = await this.lcdClient.addressBytesToString(param);
      return this.addressBytesToString;
    },

    async fetchAddressStringToBytes(param : AddressStringToBytesRequest) {
      this.addressStringToBytes = await this.lcdClient.addressStringToBytes(param);
      return this.addressStringToBytes;
    }

  }
});"
`;
