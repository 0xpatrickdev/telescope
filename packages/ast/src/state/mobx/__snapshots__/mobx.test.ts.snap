// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`builds stores. 1`] = `
"export const createRpcQueryStores = (rpc: ProtobufRpcClient | undefined) => {
  const queryService = getQueryService(rpc);

  class QueryAccountsStore extends QueryStore<QueryAccountsRequest, QueryAccountsResponse> implements {
    constructor() {
      super(queryService?.accounts);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    accounts(request?: QueryAccountsRequest): MobxResponse<QueryAccountsResponse> {
      return this.getData(request);
    }

  }

  class QueryAccountStore extends QueryStore<QueryAccountRequest, QueryAccountResponse> implements {
    constructor() {
      super(queryService?.account);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    account(request: QueryAccountRequest): MobxResponse<QueryAccountResponse> {
      return this.getData(request);
    }

  }

  class QueryParamsStore extends QueryStore<QueryParamsRequest, QueryParamsResponse> implements {
    constructor() {
      super(queryService?.params);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    params(request?: QueryParamsRequest): MobxResponse<QueryParamsResponse> {
      return this.getData(request);
    }

  }

  class QueryModuleAccountsStore extends QueryStore<QueryModuleAccountsRequest, QueryModuleAccountsResponse> implements {
    constructor() {
      super(queryService?.moduleAccounts);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    moduleAccounts(request?: QueryModuleAccountsRequest): MobxResponse<QueryModuleAccountsResponse> {
      return this.getData(request);
    }

  }

  class QueryBech32PrefixStore extends QueryStore<Bech32PrefixRequest, Bech32PrefixResponse> implements {
    constructor() {
      super(queryService?.bech32Prefix);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    bech32Prefix(request?: Bech32PrefixRequest): MobxResponse<Bech32PrefixResponse> {
      return this.getData(request);
    }

  }

  class QueryAddressBytesToStringStore extends QueryStore<AddressBytesToStringRequest, AddressBytesToStringResponse> implements {
    constructor() {
      super(queryService?.addressBytesToString);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    addressBytesToString(request: AddressBytesToStringRequest): MobxResponse<AddressBytesToStringResponse> {
      return this.getData(request);
    }

  }

  class QueryAddressStringToBytesStore extends QueryStore<AddressStringToBytesRequest, AddressStringToBytesResponse> implements {
    constructor() {
      super(queryService?.addressStringToBytes);
      makeObservable(this, {
        state: override,
        request: override,
        response: override,
        isLoading: override,
        isSuccess: override,
        refetch: override,
        getData: override
      });
    }

    addressStringToBytes(request: AddressStringToBytesRequest): MobxResponse<AddressStringToBytesResponse> {
      return this.getData(request);
    }

  }

  return {
    /**
     * Accounts returns all the existing accounts
     * 
     * Since: cosmos-sdk 0.43
     */
    QueryAccountsStore,

    /** Account returns account details based on address. */
    QueryAccountStore,

    /** Params queries all parameters. */
    QueryParamsStore,

    /** ModuleAccounts returns all the existing module accounts. */
    QueryModuleAccountsStore,

    /** Bech32 queries bech32Prefix */
    QueryBech32PrefixStore,

    /** AddressBytesToString converts Account Address bytes to string */
    QueryAddressBytesToStringStore,

    /** AddressStringToBytes converts Address string to bytes */
    QueryAddressStringToBytesStore
  };
};"
`;
