// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListValue 1`] = `
"export interface ListValue {
  values: Value[];
}"
`;

exports[`Struct 1`] = `
"export interface Struct {
  fields: {
    [key: string]: Value;
  };
}"
`;

exports[`authz 1`] = `
"/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface authz {
  authorization: Any;

  /**
   * time when the grant will expire and will be pruned. If null, then the grant
   * doesn't have a time expiration (other conditions  in \`authorization\`
   * may apply to invalidate the grant)
   */
  expiration?: Date;
}"
`;

exports[`createCreateProtoType Grant 1`] = `
"function createBaseGrant(): Grant {
  return {
    authorization: undefined,
    expiration: undefined
  };
}"
`;

exports[`createCreateProtoType MsgJoinPool 1`] = `
"function createBaseMsgJoinPool(): MsgJoinPool {
  return {
    sender: \\"\\",
    poolId: Long.UZERO,
    shareOutAmount: \\"\\",
    tokenInMaxs: []
  };
}"
`;

exports[`oneofs Value 1`] = `
"export interface Value {
  nullValue?: NullValue;
  numberValue?: number;
  stringValue?: string;
  boolValue?: boolean;
  structValue?: Struct;
  listValue?: ListValue;
}"
`;

exports[`traversed cosmos/app/v1alpha1/config 1`] = `
"/**
 * Config represents the configuration for a Cosmos SDK ABCI app.
 * It is intended that all state machine logic including the version of
 * baseapp and tx handlers (and possibly even Tendermint) that an app needs
 * can be described in a config object. For compatibility, the framework should
 * allow a mixture of declarative and imperative app wiring, however, apps
 * that strive for the maximum ease of maintainability should be able to describe
 * their state machine with a config object alone.
 */
export interface Config {
  /** modules are the module configurations for the app. */
  modules: ModuleConfig[];
}"
`;

exports[`traversed cosmos/app/v1alpha1/config 2`] = `
"/** ModuleConfig is a module configuration for an app. */
export interface ModuleConfig {
  /**
   * name is the unique name of the module within the app. It should be a name
   * that persists between different versions of a module so that modules
   * can be smoothly upgraded to new versions.
   * 
   * For example, for the module cosmos.bank.module.v1.Module, we may chose
   * to simply name the module \\"bank\\" in the app. When we upgrade to
   * cosmos.bank.module.v2.Module, the app-specific name \\"bank\\" stays the same
   * and the framework knows that the v2 module should receive all the same state
   * that the v1 module had. Note: modules should provide info on which versions
   * they can migrate from in the ModuleDescriptor.can_migration_from field.
   */
  name: string;

  /**
   * config is the config object for the module. Module config messages should
   * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
   */
  config: Any;
}"
`;

exports[`traversed google/api/expr/v1alpha1/checked 1`] = `
"/** A CEL expression which has been successfully type checked. */
export interface CheckedExpr {
  /**
   * A map from expression ids to resolved references.
   * 
   * The following entries are in this table:
   * 
   * - An Ident or Select expression is represented here if it resolves to a
   * declaration. For instance, if \`a.b.c\` is represented by
   * \`select(select(id(a), b), c)\`, and \`a.b\` resolves to a declaration,
   * while \`c\` is a field selection, then the reference is attached to the
   * nested select expression (but not to the id or or the outer select).
   * In turn, if \`a\` resolves to a declaration and \`b.c\` are field selections,
   * the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   * called.
   * - Every CreateStruct expression for a message has an entry, identifying
   * the message.
   */
  referenceMap: {
    [key: Long]: Reference;
  };

  /**
   * A map from expression ids to types.
   * 
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   */
  typeMap: {
    [key: Long]: Type;
  };

  /**
   * The source info derived from input that generated the parsed \`expr\` and
   * any optimizations made during the type-checking pass.
   */
  sourceInfo: SourceInfo;

  /**
   * The expr version indicates the major / minor version number of the \`expr\`
   * representation.
   * 
   * The most common reason for a version change will be to indicate to the CEL
   * runtimes that transformations have been performed on the expr during static
   * analysis. In some cases, this will save the runtime the work of applying
   * the same or similar transformations prior to evaluation.
   */
  exprVersion: string;

  /**
   * The checked expression. Semantically equivalent to the parsed \`expr\`, but
   * may have structural differences.
   */
  expr: Expr;
}"
`;

exports[`traversed google/api/expr/v1alpha1/checked 2`] = `
"/** Describes a resolved reference to a declaration. */
export interface Reference {
  /** The fully qualified name of the declaration. */
  name: string;

  /**
   * For references to functions, this is a list of \`Overload.overload_id\`
   * values which match according to typing rules.
   * 
   * If the list has more than one element, overload resolution among the
   * presented candidates must happen at runtime because of dynamic types. The
   * type checker attempts to narrow down this list as much as possible.
   * 
   * Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].
   */
  overloadId: string[];

  /**
   * For references to constants, this may contain the value of the
   * constant if known at compile time.
   */
  value: Constant;
}"
`;

exports[`traversed osmosis/claim/v1beta1/params 1`] = `
"/** Params defines the claim module's parameters. */
export interface Params {
  airdropStartTime: Date;
  durationUntilDecay: string;
  durationOfDecay: string;

  /** denom of claimable asset */
  claimDenom: string;
}"
`;
