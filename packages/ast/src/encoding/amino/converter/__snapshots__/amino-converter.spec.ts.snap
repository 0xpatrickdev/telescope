// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos/staking/v1beta1/tx AminoConverter 1`] = `
"export const AminoConverter = {
  "/cosmos.staking.v1beta1.MsgCreateValidator": {
    aminoType: "cosmos-sdk/MsgCreateValidator",
    toAmino: ({
      description,
      commission,
      minSelfDelegation,
      delegatorAddress,
      validatorAddress,
      pubkey,
      value
    }: MsgCreateValidator): MsgCreateValidatorAminoType["value"] => {
      return {
        description: {
          moniker: omitDefault(description.moniker),
          identity: omitDefault(description.identity),
          website: omitDefault(description.website),
          security_contact: omitDefault(description.securityContact),
          details: omitDefault(description.details)
        },
        commission: {
          rate: padDecimal(commission.rate),
          max_rate: padDecimal(commission.maxRate),
          max_change_rate: padDecimal(commission.maxChangeRate)
        },
        min_self_delegation: omitDefault(minSelfDelegation),
        delegator_address: omitDefault(delegatorAddress),
        validator_address: omitDefault(validatorAddress),
        pubkey: decodePubkey(pubkey)!,
        value: {
          denom: value.denom,
          amount: value.amount
        }
      };
    },
    fromAmino: ({
      description,
      commission,
      min_self_delegation,
      delegator_address,
      validator_address,
      pubkey,
      value
    }: MsgCreateValidatorAminoType["value"]): MsgCreateValidator => {
      return {
        description: description == null ? description : {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          securityContact: description.security_contact,
          details: description.details
        },
        commission: commission == null ? commission : {
          rate: commission.rate,
          maxRate: commission.max_rate,
          maxChangeRate: commission.max_change_rate
        },
        minSelfDelegation: min_self_delegation,
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        pubkey: encodePubkey(pubkey),
        value: value == null ? value : {
          denom: value.denom,
          amount: value.amount
        }
      };
    }
  },
  "/cosmos.staking.v1beta1.MsgEditValidator": {
    aminoType: "cosmos-sdk/MsgEditValidator",
    toAmino: ({
      description,
      validatorAddress,
      commissionRate,
      minSelfDelegation
    }: MsgEditValidator): MsgEditValidatorAminoType["value"] => {
      return {
        description: {
          moniker: omitDefault(description.moniker),
          identity: omitDefault(description.identity),
          website: omitDefault(description.website),
          security_contact: omitDefault(description.securityContact),
          details: omitDefault(description.details)
        },
        validator_address: omitDefault(validatorAddress),
        commission_rate: padDecimal(commissionRate),
        min_self_delegation: omitDefault(minSelfDelegation)
      };
    },
    fromAmino: ({
      description,
      validator_address,
      commission_rate,
      min_self_delegation
    }: MsgEditValidatorAminoType["value"]): MsgEditValidator => {
      return {
        description: description == null ? description : {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          securityContact: description.security_contact,
          details: description.details
        },
        validatorAddress: validator_address,
        commissionRate: commission_rate,
        minSelfDelegation: min_self_delegation
      };
    }
  },
  "/cosmos.staking.v1beta1.MsgDelegate": {
    aminoType: "cosmos-sdk/MsgDelegate",
    toAmino: ({
      delegatorAddress,
      validatorAddress,
      amount
    }: MsgDelegate): MsgDelegateAminoType["value"] => {
      return {
        delegator_address: omitDefault(delegatorAddress),
        validator_address: omitDefault(validatorAddress),
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_address,
      amount
    }: MsgDelegateAminoType["value"]): MsgDelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        amount: amount == null ? amount : {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  },
  "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
    aminoType: "cosmos-sdk/MsgBeginRedelegate",
    toAmino: ({
      delegatorAddress,
      validatorSrcAddress,
      validatorDstAddress,
      amount
    }: MsgBeginRedelegate): MsgBeginRedelegateAminoType["value"] => {
      return {
        delegator_address: omitDefault(delegatorAddress),
        validator_src_address: omitDefault(validatorSrcAddress),
        validator_dst_address: omitDefault(validatorDstAddress),
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_src_address,
      validator_dst_address,
      amount
    }: MsgBeginRedelegateAminoType["value"]): MsgBeginRedelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorSrcAddress: validator_src_address,
        validatorDstAddress: validator_dst_address,
        amount: amount == null ? amount : {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  },
  "/cosmos.staking.v1beta1.MsgUndelegate": {
    aminoType: "cosmos-sdk/MsgUndelegate",
    toAmino: ({
      delegatorAddress,
      validatorAddress,
      amount
    }: MsgUndelegate): MsgUndelegateAminoType["value"] => {
      return {
        delegator_address: omitDefault(delegatorAddress),
        validator_address: omitDefault(validatorAddress),
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_address,
      amount
    }: MsgUndelegateAminoType["value"]): MsgUndelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        amount: amount == null ? amount : {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  }
};"
`;

exports[`evmos/fees/v1/tx AminoConverter 1`] = `
"export const AminoConverter = {
  "/evmos.fees.v1.MsgRegisterDevFeeInfo": {
    aminoType: "/evmos.fees.v1.MsgRegisterDevFeeInfo",
    toAmino: ({
      contractAddress,
      deployerAddress,
      withdrawAddress,
      nonces
    }: MsgRegisterDevFeeInfo): MsgRegisterDevFeeInfoAminoType["value"] => {
      return {
        contract_address: omitDefault(contractAddress),
        deployer_address: omitDefault(deployerAddress),
        withdraw_address: omitDefault(withdrawAddress),
        nonces: nonces.map(el0 => el0.toString())
      };
    },
    fromAmino: ({
      contract_address,
      deployer_address,
      withdraw_address,
      nonces
    }: MsgRegisterDevFeeInfoAminoType["value"]): MsgRegisterDevFeeInfo => {
      return {
        contractAddress: contract_address,
        deployerAddress: deployer_address,
        withdrawAddress: withdraw_address,
        nonces: nonces.map?.(el0 => BigInt(el0))
      };
    }
  },
  "/evmos.fees.v1.MsgCancelDevFeeInfo": {
    aminoType: "/evmos.fees.v1.MsgCancelDevFeeInfo",
    toAmino: ({
      contractAddress,
      deployerAddress
    }: MsgCancelDevFeeInfo): MsgCancelDevFeeInfoAminoType["value"] => {
      return {
        contract_address: omitDefault(contractAddress),
        deployer_address: omitDefault(deployerAddress)
      };
    },
    fromAmino: ({
      contract_address,
      deployer_address
    }: MsgCancelDevFeeInfoAminoType["value"]): MsgCancelDevFeeInfo => {
      return {
        contractAddress: contract_address,
        deployerAddress: deployer_address
      };
    }
  },
  "/evmos.fees.v1.MsgUpdateDevFeeInfo": {
    aminoType: "/evmos.fees.v1.MsgUpdateDevFeeInfo",
    toAmino: ({
      contractAddress,
      deployerAddress,
      withdrawAddress
    }: MsgUpdateDevFeeInfo): MsgUpdateDevFeeInfoAminoType["value"] => {
      return {
        contract_address: omitDefault(contractAddress),
        deployer_address: omitDefault(deployerAddress),
        withdraw_address: omitDefault(withdrawAddress)
      };
    },
    fromAmino: ({
      contract_address,
      deployer_address,
      withdraw_address
    }: MsgUpdateDevFeeInfoAminoType["value"]): MsgUpdateDevFeeInfo => {
      return {
        contractAddress: contract_address,
        deployerAddress: deployer_address,
        withdrawAddress: withdraw_address
      };
    }
  }
};"
`;

exports[`osmosis/gamm/v1beta1/tx AminoConverter 1`] = `
"export const AminoConverter = {
  "/osmosis.gamm.v1beta1.MsgJoinPool": {
    aminoType: "osmosis/gamm/join-pool",
    toAmino: ({
      sender,
      poolId,
      shareOutAmount,
      tokenInMaxs
    }: MsgJoinPool): MsgJoinPoolAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        share_out_amount: omitDefault(shareOutAmount),
        token_in_maxs: tokenInMaxs.map(el0 => ({
          denom: omitDefault(el0.denom),
          amount: omitDefault(el0.amount)
        }))
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      share_out_amount,
      token_in_maxs
    }: MsgJoinPoolAminoType["value"]): MsgJoinPool => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        shareOutAmount: share_out_amount,
        tokenInMaxs: token_in_maxs.map?.(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitPool": {
    aminoType: "osmosis/gamm/exit-pool",
    toAmino: ({
      sender,
      poolId,
      shareInAmount,
      tokenOutMins
    }: MsgExitPool): MsgExitPoolAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        share_in_amount: omitDefault(shareInAmount),
        token_out_mins: tokenOutMins.map(el0 => ({
          denom: omitDefault(el0.denom),
          amount: omitDefault(el0.amount)
        }))
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      share_in_amount,
      token_out_mins
    }: MsgExitPoolAminoType["value"]): MsgExitPool => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        shareInAmount: share_in_amount,
        tokenOutMins: token_out_mins.map?.(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn": {
    aminoType: "osmosis/gamm/swap-exact-amount-in",
    toAmino: ({
      sender,
      routes,
      tokenIn,
      tokenOutMinAmount
    }: MsgSwapExactAmountIn): MsgSwapExactAmountInAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        routes: routes.map(el0 => ({
          pool_id: omitDefault(el0.poolId)?.toString?.(),
          token_out_denom: omitDefault(el0.tokenOutDenom)
        })),
        token_in: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        token_out_min_amount: omitDefault(tokenOutMinAmount)
      };
    },
    fromAmino: ({
      sender,
      routes,
      token_in,
      token_out_min_amount
    }: MsgSwapExactAmountInAminoType["value"]): MsgSwapExactAmountIn => {
      return {
        sender,
        routes: routes.map?.(el0 => ({
          poolId: el0.pool_id == null ? el0.pool_id : BigInt(el0.pool_id),
          tokenOutDenom: el0.token_out_denom
        })),
        tokenIn: token_in == null ? token_in : {
          denom: token_in.denom,
          amount: token_in.amount
        },
        tokenOutMinAmount: token_out_min_amount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut": {
    aminoType: "osmosis/gamm/swap-exact-amount-out",
    toAmino: ({
      sender,
      routes,
      tokenInMaxAmount,
      tokenOut
    }: MsgSwapExactAmountOut): MsgSwapExactAmountOutAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        routes: routes.map(el0 => ({
          pool_id: omitDefault(el0.poolId)?.toString?.(),
          token_in_denom: omitDefault(el0.tokenInDenom)
        })),
        token_in_max_amount: omitDefault(tokenInMaxAmount),
        token_out: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        }
      };
    },
    fromAmino: ({
      sender,
      routes,
      token_in_max_amount,
      token_out
    }: MsgSwapExactAmountOutAminoType["value"]): MsgSwapExactAmountOut => {
      return {
        sender,
        routes: routes.map?.(el0 => ({
          poolId: el0.pool_id == null ? el0.pool_id : BigInt(el0.pool_id),
          tokenInDenom: el0.token_in_denom
        })),
        tokenInMaxAmount: token_in_max_amount,
        tokenOut: token_out == null ? token_out : {
          denom: token_out.denom,
          amount: token_out.amount
        }
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn": {
    aminoType: "osmosis/gamm/join-swap-extern-amount-in",
    toAmino: ({
      sender,
      poolId,
      tokenIn,
      shareOutMinAmount
    }: MsgJoinSwapExternAmountIn): MsgJoinSwapExternAmountInAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        token_in: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        share_out_min_amount: omitDefault(shareOutMinAmount)
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      token_in,
      share_out_min_amount
    }: MsgJoinSwapExternAmountInAminoType["value"]): MsgJoinSwapExternAmountIn => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        tokenIn: token_in == null ? token_in : {
          denom: token_in.denom,
          amount: token_in.amount
        },
        shareOutMinAmount: share_out_min_amount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut": {
    aminoType: "osmosis/gamm/join-swap-share-amount-out",
    toAmino: ({
      sender,
      poolId,
      tokenInDenom,
      shareOutAmount,
      tokenInMaxAmount
    }: MsgJoinSwapShareAmountOut): MsgJoinSwapShareAmountOutAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        token_in_denom: omitDefault(tokenInDenom),
        share_out_amount: omitDefault(shareOutAmount),
        token_in_max_amount: omitDefault(tokenInMaxAmount)
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      token_in_denom,
      share_out_amount,
      token_in_max_amount
    }: MsgJoinSwapShareAmountOutAminoType["value"]): MsgJoinSwapShareAmountOut => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        tokenInDenom: token_in_denom,
        shareOutAmount: share_out_amount,
        tokenInMaxAmount: token_in_max_amount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn": {
    aminoType: "osmosis/gamm/exit-swap-share-amount-in",
    toAmino: ({
      sender,
      poolId,
      tokenOutDenom,
      shareInAmount,
      tokenOutMinAmount
    }: MsgExitSwapShareAmountIn): MsgExitSwapShareAmountInAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        token_out_denom: omitDefault(tokenOutDenom),
        share_in_amount: omitDefault(shareInAmount),
        token_out_min_amount: omitDefault(tokenOutMinAmount)
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      token_out_denom,
      share_in_amount,
      token_out_min_amount
    }: MsgExitSwapShareAmountInAminoType["value"]): MsgExitSwapShareAmountIn => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        tokenOutDenom: token_out_denom,
        shareInAmount: share_in_amount,
        tokenOutMinAmount: token_out_min_amount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut": {
    aminoType: "osmosis/gamm/exit-swap-extern-amount-out",
    toAmino: ({
      sender,
      poolId,
      tokenOut,
      shareInMaxAmount
    }: MsgExitSwapExternAmountOut): MsgExitSwapExternAmountOutAminoType["value"] => {
      return {
        sender: omitDefault(sender),
        pool_id: omitDefault(poolId)?.toString?.(),
        token_out: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        },
        share_in_max_amount: omitDefault(shareInMaxAmount)
      };
    },
    fromAmino: ({
      sender,
      pool_id,
      token_out,
      share_in_max_amount
    }: MsgExitSwapExternAmountOutAminoType["value"]): MsgExitSwapExternAmountOut => {
      return {
        sender,
        poolId: pool_id == null ? pool_id : BigInt(pool_id),
        tokenOut: token_out == null ? token_out : {
          denom: token_out.denom,
          amount: token_out.amount
        },
        shareInMaxAmount: share_in_max_amount
      };
    }
  }
};"
`;
