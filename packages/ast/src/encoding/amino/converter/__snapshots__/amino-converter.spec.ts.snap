// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos/staking/v1beta1/tx AminoConverter 1`] = `
"export const AminoConverter = {
  \\"/cosmos.staking.v1beta1.MsgCreateValidator\\": {
    aminoType: \\"cosmos-sdk/MsgCreateValidator\\",
    toAmino: ({
      description,
      commission,
      minSelfDelegation,
      delegatorAddress,
      validatorAddress,
      pubkey,
      value
    }: MsgCreateValidator): AminoMsgCreateValidator[\\"value\\"] => {
      return {
        description: {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          security_contact: description.securityContact,
          details: description.details
        },
        commission: {
          rate: commission.rate,
          max_rate: commission.maxRate,
          max_change_rate: commission.maxChangeRate
        },
        min_self_delegation: minSelfDelegation,
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        pubkey: {
          typeUrl: \\"/cosmos.crypto.secp256k1.PubKey\\",
          value: fromBase64(decodeBech32Pubkey(pubkey).value)
        },
        value: {
          denom: value.denom,
          amount: value.amount
        }
      };
    },
    fromAmino: ({
      description,
      commission,
      min_self_delegation,
      delegator_address,
      validator_address,
      pubkey,
      value
    }: AminoMsgCreateValidator[\\"value\\"]): MsgCreateValidator => {
      return {
        description: {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          securityContact: description.security_contact,
          details: description.details
        },
        commission: {
          rate: commission.rate,
          maxRate: commission.max_rate,
          maxChangeRate: commission.max_change_rate
        },
        minSelfDelegation: min_self_delegation,
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        pubkey: encodeBech32PubKey({
          type: \\"tendermint/PubKeySecp256k1\\",
          value: toBase64(pubkey.value)
        }, \\"cosmos\\"),
        value: {
          denom: value.denom,
          amount: value.amount
        }
      };
    }
  },
  \\"/cosmos.staking.v1beta1.MsgEditValidator\\": {
    aminoType: \\"cosmos-sdk/MsgEditValidator\\",
    toAmino: ({
      description,
      validatorAddress,
      commissionRate,
      minSelfDelegation
    }: MsgEditValidator): AminoMsgEditValidator[\\"value\\"] => {
      return {
        description: {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          security_contact: description.securityContact,
          details: description.details
        },
        validator_address: validatorAddress,
        commission_rate: commissionRate,
        min_self_delegation: minSelfDelegation
      };
    },
    fromAmino: ({
      description,
      validator_address,
      commission_rate,
      min_self_delegation
    }: AminoMsgEditValidator[\\"value\\"]): MsgEditValidator => {
      return {
        description: {
          moniker: description.moniker,
          identity: description.identity,
          website: description.website,
          securityContact: description.security_contact,
          details: description.details
        },
        validatorAddress: validator_address,
        commissionRate: commission_rate,
        minSelfDelegation: min_self_delegation
      };
    }
  },
  \\"/cosmos.staking.v1beta1.MsgDelegate\\": {
    aminoType: \\"cosmos-sdk/MsgDelegate\\",
    toAmino: ({
      delegatorAddress,
      validatorAddress,
      amount
    }: MsgDelegate): AminoMsgDelegate[\\"value\\"] => {
      return {
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_address,
      amount
    }: AminoMsgDelegate[\\"value\\"]): MsgDelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  },
  \\"/cosmos.staking.v1beta1.MsgBeginRedelegate\\": {
    aminoType: \\"cosmos-sdk/MsgBeginRedelegate\\",
    toAmino: ({
      delegatorAddress,
      validatorSrcAddress,
      validatorDstAddress,
      amount
    }: MsgBeginRedelegate): AminoMsgBeginRedelegate[\\"value\\"] => {
      return {
        delegator_address: delegatorAddress,
        validator_src_address: validatorSrcAddress,
        validator_dst_address: validatorDstAddress,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_src_address,
      validator_dst_address,
      amount
    }: AminoMsgBeginRedelegate[\\"value\\"]): MsgBeginRedelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorSrcAddress: validator_src_address,
        validatorDstAddress: validator_dst_address,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  },
  \\"/cosmos.staking.v1beta1.MsgUndelegate\\": {
    aminoType: \\"cosmos-sdk/MsgUndelegate\\",
    toAmino: ({
      delegatorAddress,
      validatorAddress,
      amount
    }: MsgUndelegate): AminoMsgUndelegate[\\"value\\"] => {
      return {
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    },
    fromAmino: ({
      delegator_address,
      validator_address,
      amount
    }: AminoMsgUndelegate[\\"value\\"]): MsgUndelegate => {
      return {
        delegatorAddress: delegator_address,
        validatorAddress: validator_address,
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  }
};"
`;

exports[`osmosis/gamm/v1beta1/tx AminoConverter 1`] = `
"export const AminoConverter = {
  \\"/osmosis.gamm.v1beta1.MsgJoinPool\\": {
    aminoType: \\"osmosis/gamm/join-pool\\",
    toAmino: ({
      sender,
      poolId,
      shareOutAmount,
      tokenInMaxs
    }: MsgJoinPool): AminoMsgJoinPool[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    },
    fromAmino: ({
      sender,
      poolId,
      shareOutAmount,
      tokenInMaxs
    }: AminoMsgJoinPool[\\"value\\"]): MsgJoinPool => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgExitPool\\": {
    aminoType: \\"osmosis/gamm/exit-pool\\",
    toAmino: ({
      sender,
      poolId,
      shareInAmount,
      tokenOutMins
    }: MsgExitPool): AminoMsgExitPool[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        shareInAmount,
        tokenOutMins: tokenOutMins.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    },
    fromAmino: ({
      sender,
      poolId,
      shareInAmount,
      tokenOutMins
    }: AminoMsgExitPool[\\"value\\"]): MsgExitPool => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        shareInAmount,
        tokenOutMins: tokenOutMins.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgSwapExactAmountIn\\": {
    aminoType: \\"osmosis/gamm/swap-exact-amount-in\\",
    toAmino: ({
      sender,
      routes,
      tokenIn,
      tokenOutMinAmount
    }: MsgSwapExactAmountIn): AminoMsgSwapExactAmountIn[\\"value\\"] => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: el0.poolId.toString(),
          tokenOutDenom: el0.tokenOutDenom
        })),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        tokenOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      routes,
      tokenIn,
      tokenOutMinAmount
    }: AminoMsgSwapExactAmountIn[\\"value\\"]): MsgSwapExactAmountIn => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: Long.fromString(el0.poolId),
          tokenOutDenom: el0.tokenOutDenom
        })),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        tokenOutMinAmount
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgSwapExactAmountOut\\": {
    aminoType: \\"osmosis/gamm/swap-exact-amount-out\\",
    toAmino: ({
      sender,
      routes,
      tokenInMaxAmount,
      tokenOut
    }: MsgSwapExactAmountOut): AminoMsgSwapExactAmountOut[\\"value\\"] => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: el0.poolId.toString(),
          tokenInDenom: el0.tokenInDenom
        })),
        tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        }
      };
    },
    fromAmino: ({
      sender,
      routes,
      tokenInMaxAmount,
      tokenOut
    }: AminoMsgSwapExactAmountOut[\\"value\\"]): MsgSwapExactAmountOut => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: Long.fromString(el0.poolId),
          tokenInDenom: el0.tokenInDenom
        })),
        tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        }
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn\\": {
    aminoType: \\"osmosis/gamm/join-swap-extern-amount-in\\",
    toAmino: ({
      sender,
      poolId,
      tokenIn,
      shareOutMinAmount
    }: MsgJoinSwapExternAmountIn): AminoMsgJoinSwapExternAmountIn[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        shareOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenIn,
      shareOutMinAmount
    }: AminoMsgJoinSwapExternAmountIn[\\"value\\"]): MsgJoinSwapExternAmountIn => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        shareOutMinAmount
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut\\": {
    aminoType: \\"osmosis/gamm/join-swap-share-amount-out\\",
    toAmino: ({
      sender,
      poolId,
      tokenInDenom,
      shareOutAmount,
      tokenInMaxAmount
    }: MsgJoinSwapShareAmountOut): AminoMsgJoinSwapShareAmountOut[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenInDenom,
        shareOutAmount,
        tokenInMaxAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenInDenom,
      shareOutAmount,
      tokenInMaxAmount
    }: AminoMsgJoinSwapShareAmountOut[\\"value\\"]): MsgJoinSwapShareAmountOut => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenInDenom,
        shareOutAmount,
        tokenInMaxAmount
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn\\": {
    aminoType: \\"osmosis/gamm/exit-swap-share-amount-in\\",
    toAmino: ({
      sender,
      poolId,
      tokenOutDenom,
      shareInAmount,
      tokenOutMinAmount
    }: MsgExitSwapShareAmountIn): AminoMsgExitSwapShareAmountIn[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenOutDenom,
        shareInAmount,
        tokenOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenOutDenom,
      shareInAmount,
      tokenOutMinAmount
    }: AminoMsgExitSwapShareAmountIn[\\"value\\"]): MsgExitSwapShareAmountIn => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenOutDenom,
        shareInAmount,
        tokenOutMinAmount
      };
    }
  },
  \\"/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut\\": {
    aminoType: \\"osmosis/gamm/exit-swap-extern-amount-out\\",
    toAmino: ({
      sender,
      poolId,
      tokenOut,
      shareInMaxAmount
    }: MsgExitSwapExternAmountOut): AminoMsgExitSwapExternAmountOut[\\"value\\"] => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        },
        shareInMaxAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenOut,
      shareInMaxAmount
    }: AminoMsgExitSwapExternAmountOut[\\"value\\"]): MsgExitSwapExternAmountOut => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        },
        shareInMaxAmount
      };
    }
  }
};"
`;
