// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`documentRpcClients 1`] = `
"/** ModuleAccountBalance */
const request: QueryModuleAccountBalanceRequest;
const result = await osmosis.claim.v1beta1.moduleAccountBalance(request);

/** Params */
const request: QueryParamsRequest;
const result = await osmosis.claim.v1beta1.params(request);

/** ClaimRecord */
const request: QueryClaimRecordRequest;
const result = await osmosis.claim.v1beta1.claimRecord(request);

/** ClaimableForAction */
const request: QueryClaimableForActionRequest;
const result = await osmosis.claim.v1beta1.claimableForAction(request);

/** TotalClaimable */
const request: QueryTotalClaimableRequest;
const result = await osmosis.claim.v1beta1.totalClaimable(request);

/** EpochInfos provide running epochInfos */
const request: QueryEpochsInfoRequest;
const result = await osmosis.epochs.v1beta1.epochInfos(request);

/** CurrentEpoch provide current epoch of specified identifier */
const request: QueryCurrentEpochRequest;
const result = await osmosis.epochs.v1beta1.currentEpoch(request);

/** Pools */
const request: QueryPoolsRequest;
const result = await osmosis.gamm.v1beta1.pools(request);

/** NumPools */
const request: QueryNumPoolsRequest;
const result = await osmosis.gamm.v1beta1.numPools(request);

/** TotalLiquidity */
const request: QueryTotalLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalLiquidity(request);

/** Per Pool gRPC Endpoints */
const request: QueryPoolRequest;
const result = await osmosis.gamm.v1beta1.pool(request);

/** PoolParams */
const request: QueryPoolParamsRequest;
const result = await osmosis.gamm.v1beta1.poolParams(request);

/** TotalPoolLiquidity */
const request: QueryTotalPoolLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalPoolLiquidity(request);

/** TotalShares */
const request: QueryTotalSharesRequest;
const result = await osmosis.gamm.v1beta1.totalShares(request);

/**
 * SpotPrice defines a gRPC query handler that returns the spot price given
 * a base denomination and a quote denomination.
 */
const request: QuerySpotPriceRequest;
const result = await osmosis.gamm.v1beta1.spotPrice(request);

/** Estimate the swap. */
const request: QuerySwapExactAmountInRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountIn(request);

/** EstimateSwapExactAmountOut */
const request: QuerySwapExactAmountOutRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountOut(request);

/** returns coins that is going to be distributed */
const request: ModuleToDistributeCoinsRequest;
const result = await osmosis.incentives.moduleToDistributeCoins(request);

/** returns coins that are distributed by module so far */
const request: ModuleDistributedCoinsRequest;
const result = await osmosis.incentives.moduleDistributedCoins(request);

/** returns Gauge by id */
const request: GaugeByIDRequest;
const result = await osmosis.incentives.gaugeByID(request);

/** returns gauges both upcoming and active */
const request: GaugesRequest;
const result = await osmosis.incentives.gauges(request);

/** returns active gauges */
const request: ActiveGaugesRequest;
const result = await osmosis.incentives.activeGauges(request);

/** returns active gauges per denom */
const request: ActiveGaugesPerDenomRequest;
const result = await osmosis.incentives.activeGaugesPerDenom(request);

/** returns scheduled gauges */
const request: UpcomingGaugesRequest;
const result = await osmosis.incentives.upcomingGauges(request);

/** returns scheduled gauges per denom */
const request: UpcomingGaugesPerDenomRequest;
const result = await osmosis.incentives.upcomingGaugesPerDenom(request);

/**
 * RewardsEst returns an estimate of the rewards at a future specific time.
 * The querier either provides an address or a set of locks
 * for which they want to find the associated rewards.
 */
const request: RewardsEstRequest;
const result = await osmosis.incentives.rewardsEst(request);

/** returns lockable durations that are valid to give incentives */
const request: QueryLockableDurationsRequest;
const result = await osmosis.incentives.lockableDurations(request);

/** Return full balance of the module */
const request: ModuleBalanceRequest;
const result = await osmosis.lockup.moduleBalance(request);

/** Return locked balance of the module */
const request: ModuleLockedAmountRequest;
const result = await osmosis.lockup.moduleLockedAmount(request);

/** Returns unlockable coins which are not withdrawn yet */
const request: AccountUnlockableCoinsRequest;
const result = await osmosis.lockup.accountUnlockableCoins(request);

/** Returns unlocking coins */
const request: AccountUnlockingCoinsRequest;
const result = await osmosis.lockup.accountUnlockingCoins(request);

/** Return a locked coins that can't be withdrawn */
const request: AccountLockedCoinsRequest;
const result = await osmosis.lockup.accountLockedCoins(request);

/** Returns locked records of an account with unlock time beyond timestamp */
const request: AccountLockedPastTimeRequest;
const result = await osmosis.lockup.accountLockedPastTime(request);

/**
 * Returns locked records of an account with unlock time beyond timestamp
 * excluding tokens started unlocking
 */
const request: AccountLockedPastTimeNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedPastTimeNotUnlockingOnly(request);

/** Returns unlocked records with unlock time before timestamp */
const request: AccountUnlockedBeforeTimeRequest;
const result = await osmosis.lockup.accountUnlockedBeforeTime(request);

/** Returns lock records by address, timestamp, denom */
const request: AccountLockedPastTimeDenomRequest;
const result = await osmosis.lockup.accountLockedPastTimeDenom(request);

/** Returns total locked per denom with longer past given time */
const request: LockedDenomRequest;
const result = await osmosis.lockup.lockedDenom(request);

/** Returns lock record by id */
const request: LockedRequest;
const result = await osmosis.lockup.lockedByID(request);

/** Returns synthetic lockups by native lockup id */
const request: SyntheticLockupsByLockupIDRequest;
const result = await osmosis.lockup.syntheticLockupsByLockupID(request);

/** Returns account locked records with longer duration */
const request: AccountLockedLongerDurationRequest;
const result = await osmosis.lockup.accountLockedLongerDuration(request);

/** Returns account locked records with a specific duration */
const request: AccountLockedDurationRequest;
const result = await osmosis.lockup.accountLockedDuration(request);

/**
 * Returns account locked records with longer duration excluding tokens
 * started unlocking
 */
const request: AccountLockedLongerDurationNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedLongerDurationNotUnlockingOnly(request);

/** Returns account's locked records for a denom with longer duration */
const request: AccountLockedLongerDurationDenomRequest;
const result = await osmosis.lockup.accountLockedLongerDurationDenom(request);

/** Params returns the total set of minting parameters. */
const request: QueryParamsRequest;
const result = await osmosis.mint.v1beta1.params(request);

/** EpochProvisions current minting epoch provisions value. */
const request: QueryEpochProvisionsRequest;
const result = await osmosis.mint.v1beta1.epochProvisions(request);

/** GaugeIds takes the pool id and returns the matching gauge ids and durations */
const request: QueryGaugeIdsRequest;
const result = await osmosis.poolincentives.v1beta1.gaugeIds(request);

/** DistrInfo */
const request: QueryDistrInfoRequest;
const result = await osmosis.poolincentives.v1beta1.distrInfo(request);

/** Params */
const request: QueryParamsRequest;
const result = await osmosis.poolincentives.v1beta1.params(request);

/** LockableDurations */
const request: QueryLockableDurationsRequest;
const result = await osmosis.poolincentives.v1beta1.lockableDurations(request);

/** IncentivizedPools */
const request: QueryIncentivizedPoolsRequest;
const result = await osmosis.poolincentives.v1beta1.incentivizedPools(request);

/** ExternalIncentiveGauges */
const request: QueryExternalIncentiveGaugesRequest;
const result = await osmosis.poolincentives.v1beta1.externalIncentiveGauges(request);

/** Params returns the total set of minting parameters. */
const request: QueryParamsRequest;
const result = await osmosis.superfluid.params(request);

/** Returns superfluid asset type */
const request: AssetTypeRequest;
const result = await osmosis.superfluid.assetType(request);

/** Returns all superfluid asset types */
const request: AllAssetsRequest;
const result = await osmosis.superfluid.allAssets(request);

/** Returns superfluid asset Multiplier */
const request: AssetMultiplierRequest;
const result = await osmosis.superfluid.assetMultiplier(request);

/** Returns all superfluid intermediary account */
const request: AllIntermediaryAccountsRequest;
const result = await osmosis.superfluid.allIntermediaryAccounts(request);

/** Returns intermediary account connected to a superfluid staked lock by id */
const request: ConnectedIntermediaryAccountRequest;
const result = await osmosis.superfluid.connectedIntermediaryAccount(request);

/**
 * Returns the total amount of osmo superfluidly staked
 * response denominated in uosmo
 */
const request: TotalSuperfluidDelegationsRequest;
const result = await osmosis.superfluid.totalSuperfluidDelegations(request);

/**
 * Returns the coins superfluid delegated for a delegator, validator, denom
 * triplet
 */
const request: SuperfluidDelegationAmountRequest;
const result = await osmosis.superfluid.superfluidDelegationAmount(request);

/** Returns all the superfluid poistions for a specific delegator */
const request: SuperfluidDelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidDelegationsByDelegator(request);

/** SuperfluidUndelegationsByDelegator */
const request: SuperfluidUndelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidUndelegationsByDelegator(request);

/**
 * Returns all the superfluid positions of a specific denom delegated to one
 * validator
 */
const request: SuperfluidDelegationsByValidatorDenomRequest;
const result = await osmosis.superfluid.superfluidDelegationsByValidatorDenom(request);

/**
 * Returns the amount of a specific denom delegated to a specific validator
 * This is labeled an estimate, because the way it calculates the amount can
 * lead rounding errors from the true delegated amount
 */
const request: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest;
const result = await osmosis.superfluid.estimateSuperfluidDelegatedAmountByValidatorDenom(request);

/** Params returns the total set of minting parameters. */
const request: QueryParamsRequest;
const result = await osmosis.tokenfactory.v1beta1.params(request);

/** DenomAuthorityMetadata */
const request: QueryDenomAuthorityMetadataRequest;
const result = await osmosis.tokenfactory.v1beta1.denomAuthorityMetadata(request);

/** DenomsFromCreator */
const request: QueryDenomsFromCreatorRequest;
const result = await osmosis.tokenfactory.v1beta1.denomsFromCreator(request);

/**
 * FeeTokens returns a list of all the whitelisted fee tokens and their
 * corresponding pools It does not include the BaseDenom, which has its own
 * query endpoint
 */
const request: QueryFeeTokensRequest;
const result = await osmosis.txfees.v1beta1.feeTokens(request);

/** DenomSpotPrice */
const request: QueryDenomSpotPriceRequest;
const result = await osmosis.txfees.v1beta1.denomSpotPrice(request);

/** DenomPoolId */
const request: QueryDenomPoolIdRequest;
const result = await osmosis.txfees.v1beta1.denomPoolId(request);

/** BaseDenom */
const request: QueryBaseDenomRequest;
const result = await osmosis.txfees.v1beta1.baseDenom(request);"
`;

exports[`documentWithTypeUrl 1`] = `
"const {
  /** my comment */
  methodName
} = tendermint.yolo.db.MessageComposer.withTypeUrl;"
`;

exports[`documentWithTypeUrlReadme 1`] = `
"
#### \`tendermint.yolo.db\` messages

\`\`\`js
const {
  /** my comment */
  methodName
} = tendermint.yolo.db.MessageComposer.withTypeUrl;
\`\`\`
    "
`;
