import * as t from '@babel/types';
export declare const decode: {
    string(num: number, prop: string): t.SwitchCase;
    bool(num: number, prop: string): t.SwitchCase;
    long(num: number, prop: string): t.SwitchCase;
    double(num: number, prop: string): t.SwitchCase;
    int64(num: number, prop: string): t.SwitchCase;
    duration(num: number, prop: string): t.SwitchCase;
    timestamp(num: number, prop: string): t.SwitchCase;
    type(num: number, prop: string, name: string): t.SwitchCase;
    enum(num: number, prop: string): t.SwitchCase;
    bytes(num: number, prop: string): t.SwitchCase;
    keyHash(num: number, prop: string, name: string): t.SwitchCase;
    scalarArray(num: number, prop: string, expr: t.Expression): t.SwitchCase;
    typeArray(num: number, prop: string, name: string): t.SwitchCase;
};
export declare const baseTypes: {
    string(): t.CallExpression;
    bool(): t.CallExpression;
    double(): t.CallExpression;
    int64(): t.TSAsExpression;
    int32(): t.CallExpression;
    long(): t.TSAsExpression;
    type(name: string): t.CallExpression;
    enum(): t.TSAsExpression;
    bytes(): t.CallExpression;
    duration(): t.CallExpression;
    timestamp(): t.CallExpression;
    keyHash(prop: string, name: string): (t.IfStatement | t.VariableDeclaration)[];
};
export declare const switchOnTag: (num: number, prop: string, expr: t.Expression) => t.SwitchCase;
export declare const switchOnTagTakesArray: (num: number, prop: string, expr: t.Statement[]) => t.SwitchCase;
export declare const switchTypeArray: (num: number, prop: string, name: string) => t.SwitchCase;
export declare const switchScalarArray: (num: number, prop: string, expr: t.Expression) => t.SwitchCase;
