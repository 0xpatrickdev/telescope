// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`camel aminoConverter 1`] = `
"export const AminoConverter = {
  \\"/cosmos.some.MsgThing\\": {
    aminoType: \\"cosmos-sdk/MsgThing\\",
    toAmino: ({
      durationCamelCase,
      coinsCamelCase,
      someDuration,
      someHeight,
      myCoin,
      camelCaseName,
      voteValue,
      previousVotes,
      desc,
      commission,
      str
    }: MstThing): AminoMstThing[\\"value\\"] => {
      return {
        durationCamelCase: durationCamelCase.toString(),
        coinsCamelCase,
        someDuration: (someDuration * 1_000_000_000).toString(),
        someHeight: someHeight ? {
          revisionHeight: omitDefault(someHeight.revisionHeight)?.toString(),
          revisionNumber: omitDefault(someHeight.revisionNumber)?.toString()
        } : {},
        myCoin: {
          denom: myCoin.denom,
          amount: Long.fromNumber(myCoin.amount).toString()
        },
        camelCaseName,
        voteValue,
        previousVotes,
        desc: {
          moniker: desc.moniker,
          identity: desc.identity,
          website: desc.website,
          securityContact: desc.securityContact,
          details: desc.details,
          superNested: {
            rate: desc.superNested.rate,
            maxRate: desc.superNested.maxRate,
            maxChangeRate: desc.superNested.maxChangeRate,
            specialPropertyHere: desc.superNested.specialPropertyHere.map(el0 => ({
              rate: el0.rate,
              maxRate: el0.maxRate,
              maxChangeRate: el0.maxChangeRate
            }))
          },
          manyComissions: desc.manyComissions.map(el0 => ({
            rate: el0.rate,
            maxRate: el0.maxRate,
            maxChangeRate: el0.maxChangeRate,
            specialPropertyHere: el0.specialPropertyHere.map(el1 => ({
              rate: el1.rate,
              maxRate: el1.maxRate,
              maxChangeRate: el1.maxChangeRate
            }))
          }))
        },
        commission: {
          rate: commission.rate,
          maxRate: commission.maxRate,
          maxChangeRate: commission.maxChangeRate,
          specialPropertyHere: commission.specialPropertyHere.map(el0 => ({
            rate: el0.rate,
            maxRate: el0.maxRate,
            maxChangeRate: el0.maxChangeRate
          }))
        },
        str
      };
    },
    fromAmino: ({
      durationCamelCase,
      coinsCamelCase,
      someDuration,
      someHeight,
      myCoin,
      camelCaseName,
      voteValue,
      previousVotes,
      desc,
      commission,
      str
    }: AminoMstThing[\\"value\\"]): MstThing => {
      return {
        durationCamelCase: Long.fromString(durationCamelCase),
        coinsCamelCase: Array.from(coinsCamelCase),
        someDuration: {
          seconds: Long.fromNumber(Math.floor(parseInt(someDuration) / 1_000_000_000)),
          nanos: parseInt(someDuration) % 1_000_000_000
        },
        someHeight: someHeight ? {
          revisionHeight: Long.fromString(someHeight.revisionHeight || \\"0\\", true),
          revisionNumber: Long.fromString(someHeight.revisionNumber || \\"0\\", true)
        } : undefined,
        myCoin,
        camelCaseName,
        voteValue: voteOptionToJSON(voteValue),
        previousVotes: previousVotes.map(el => voteOptionToJSON(el)),
        desc: {
          moniker: desc.moniker,
          identity: desc.identity,
          website: desc.website,
          securityContact: desc.securityContact,
          details: desc.details,
          superNested: {
            rate: desc.superNested.rate,
            maxRate: desc.superNested.maxRate,
            maxChangeRate: desc.superNested.maxChangeRate,
            specialPropertyHere: desc.superNested.specialPropertyHere.map(el2 => ({
              rate: el2.rate,
              maxRate: el2.maxRate,
              maxChangeRate: el2.maxChangeRate
            }))
          },
          manyComissions: desc.manyComissions.map(el1 => ({
            rate: el1.rate,
            maxRate: el1.maxRate,
            maxChangeRate: el1.maxChangeRate,
            specialPropertyHere: el1.specialPropertyHere.map(el2 => ({
              rate: el2.rate,
              maxRate: el2.maxRate,
              maxChangeRate: el2.maxChangeRate
            }))
          }))
        },
        commission: {
          rate: commission.rate,
          maxRate: commission.maxRate,
          maxChangeRate: commission.maxChangeRate,
          specialPropertyHere: commission.specialPropertyHere.map(el1 => ({
            rate: el1.rate,
            maxRate: el1.maxRate,
            maxChangeRate: el1.maxChangeRate
          }))
        },
        str
      };
    }
  }
};"
`;

exports[`camel makeAminoConverterItem 1`] = `
"\\"/cosmos.some.MsgThing\\": {
  aminoType: \\"cosmos-sdk/MsgThing\\",
  toAmino: ({
    durationCamelCase,
    coinsCamelCase,
    someDuration,
    someHeight,
    myCoin,
    camelCaseName,
    voteValue,
    previousVotes,
    desc,
    commission,
    str
  }: MstThing): AminoMstThing[\\"value\\"] => {
    return {
      durationCamelCase: durationCamelCase.toString(),
      coinsCamelCase,
      someDuration: (someDuration * 1_000_000_000).toString(),
      someHeight: someHeight ? {
        revisionHeight: omitDefault(someHeight.revisionHeight)?.toString(),
        revisionNumber: omitDefault(someHeight.revisionNumber)?.toString()
      } : {},
      myCoin: {
        denom: myCoin.denom,
        amount: Long.fromNumber(myCoin.amount).toString()
      },
      camelCaseName,
      voteValue,
      previousVotes,
      desc: {
        moniker: desc.moniker,
        identity: desc.identity,
        website: desc.website,
        securityContact: desc.securityContact,
        details: desc.details,
        superNested: {
          rate: desc.superNested.rate,
          maxRate: desc.superNested.maxRate,
          maxChangeRate: desc.superNested.maxChangeRate,
          specialPropertyHere: desc.superNested.specialPropertyHere.map(el0 => ({
            rate: el0.rate,
            maxRate: el0.maxRate,
            maxChangeRate: el0.maxChangeRate
          }))
        },
        manyComissions: desc.manyComissions.map(el0 => ({
          rate: el0.rate,
          maxRate: el0.maxRate,
          maxChangeRate: el0.maxChangeRate,
          specialPropertyHere: el0.specialPropertyHere.map(el1 => ({
            rate: el1.rate,
            maxRate: el1.maxRate,
            maxChangeRate: el1.maxChangeRate
          }))
        }))
      },
      commission: {
        rate: commission.rate,
        maxRate: commission.maxRate,
        maxChangeRate: commission.maxChangeRate,
        specialPropertyHere: commission.specialPropertyHere.map(el0 => ({
          rate: el0.rate,
          maxRate: el0.maxRate,
          maxChangeRate: el0.maxChangeRate
        }))
      },
      str
    };
  },
  fromAmino: ({
    durationCamelCase,
    coinsCamelCase,
    someDuration,
    someHeight,
    myCoin,
    camelCaseName,
    voteValue,
    previousVotes,
    desc,
    commission,
    str
  }: AminoMstThing[\\"value\\"]): MstThing => {
    return {
      durationCamelCase: Long.fromString(durationCamelCase),
      coinsCamelCase: Array.from(coinsCamelCase),
      someDuration: {
        seconds: Long.fromNumber(Math.floor(parseInt(someDuration) / 1_000_000_000)),
        nanos: parseInt(someDuration) % 1_000_000_000
      },
      someHeight: someHeight ? {
        revisionHeight: Long.fromString(someHeight.revisionHeight || \\"0\\", true),
        revisionNumber: Long.fromString(someHeight.revisionNumber || \\"0\\", true)
      } : undefined,
      myCoin,
      camelCaseName,
      voteValue: voteOptionToJSON(voteValue),
      previousVotes: previousVotes.map(el => voteOptionToJSON(el)),
      desc: {
        moniker: desc.moniker,
        identity: desc.identity,
        website: desc.website,
        securityContact: desc.securityContact,
        details: desc.details,
        superNested: {
          rate: desc.superNested.rate,
          maxRate: desc.superNested.maxRate,
          maxChangeRate: desc.superNested.maxChangeRate,
          specialPropertyHere: desc.superNested.specialPropertyHere.map(el2 => ({
            rate: el2.rate,
            maxRate: el2.maxRate,
            maxChangeRate: el2.maxChangeRate
          }))
        },
        manyComissions: desc.manyComissions.map(el1 => ({
          rate: el1.rate,
          maxRate: el1.maxRate,
          maxChangeRate: el1.maxChangeRate,
          specialPropertyHere: el1.specialPropertyHere.map(el2 => ({
            rate: el2.rate,
            maxRate: el2.maxRate,
            maxChangeRate: el2.maxChangeRate
          }))
        }))
      },
      commission: {
        rate: commission.rate,
        maxRate: commission.maxRate,
        maxChangeRate: commission.maxChangeRate,
        specialPropertyHere: commission.specialPropertyHere.map(el1 => ({
          rate: el1.rate,
          maxRate: el1.maxRate,
          maxChangeRate: el1.maxChangeRate
        }))
      },
      str
    };
  }
}"
`;

exports[`camel makeAminoTypeInterface 1`] = `
"export interface AminoMstThing extends AminoMsg {
  type: \\"cosmos-sdk/MsgThing\\";
  value: {
    durationCamelCase: string;
    coinsCamelCase: Coin[];
    someDuration: Duration[];
    someHeight: AminoHeight;
    myCoin: Coin;
    camelCaseName: string;
    voteValue: number;
    previousVotes: number[];
    desc: {
      moniker: string;
      identity: string;
      website: string;
      securityContact: string;
      details: string;
      superNested: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
        specialPropertyHere: {
          rate: string;
          maxRate: string;
          maxChangeRate: string;
        }[];
      };
      manyComissions: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
        specialPropertyHere: {
          rate: string;
          maxRate: string;
          maxChangeRate: string;
        }[];
      }[];
    };
    commission: {
      rate: string;
      maxRate: string;
      maxChangeRate: string;
      specialPropertyHere: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
      }[];
    };
    str: string;
  };
}"
`;

exports[`plugins makeAminoTypeInterface 1`] = `
"export interface AminoMstThing extends AminoMsg {
  type: \\"special-override-type\\";
  value: {
    durationCamelCase: string;
    coinsCamelCase: Coin[];
    someDuration: Duration[];
    someHeight: AminoHeight;
    myCoin: Coin;
    camelCaseName: string;
    voteValue: number;
    previousVotes: number[];
    desc: {
      moniker: string;
      identity: string;
      website: string;
      securityContact: string;
      details: string;
      superNested: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
        specialPropertyHere: {
          rate: string;
          maxRate: string;
          maxChangeRate: string;
        }[];
      };
      manyComissions: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
        specialPropertyHere: {
          rate: string;
          maxRate: string;
          maxChangeRate: string;
        }[];
      }[];
    };
    commission: {
      rate: string;
      maxRate: string;
      maxChangeRate: string;
      specialPropertyHere: {
        rate: string;
        maxRate: string;
        maxChangeRate: string;
      }[];
    };
    str: string;
  };
}"
`;

exports[`snake aminoConverter 1`] = `
"export const AminoConverter = {
  \\"/cosmos.some.MsgThing\\": {
    aminoType: \\"cosmos-sdk/MsgThing\\",
    toAmino: ({
      durationCamelCase,
      coinsCamelCase,
      someDuration,
      someHeight,
      myCoin,
      camelCaseName,
      voteValue,
      previousVotes,
      desc,
      commission,
      str
    }: MstThing): AminoMstThing[\\"value\\"] => {
      return {
        duration_camel_case: durationCamelCase.toString(),
        coins_camel_case: coinsCamelCase,
        some_duration: (someDuration * 1_000_000_000).toString(),
        some_height: someHeight ? {
          revision_height: omitDefault(someHeight.revisionHeight)?.toString(),
          revision_number: omitDefault(someHeight.revisionNumber)?.toString()
        } : {},
        my_coin: {
          denom: myCoin.denom,
          amount: Long.fromNumber(myCoin.amount).toString()
        },
        camel_case_name: camelCaseName,
        vote_value: voteValue,
        previous_votes: previousVotes,
        desc: {
          moniker: desc.moniker,
          identity: desc.identity,
          website: desc.website,
          security_contact: desc.securityContact,
          details: desc.details,
          super_nested: {
            rate: desc.superNested.rate,
            max_rate: desc.superNested.maxRate,
            max_change_rate: desc.superNested.maxChangeRate,
            special_property_here: desc.superNested.specialPropertyHere.map(el0 => ({
              rate: el0.rate,
              max_rate: el0.maxRate,
              max_change_rate: el0.maxChangeRate
            }))
          },
          many_comissions: desc.manyComissions.map(el0 => ({
            rate: el0.rate,
            max_rate: el0.maxRate,
            max_change_rate: el0.maxChangeRate,
            special_property_here: el0.specialPropertyHere.map(el1 => ({
              rate: el1.rate,
              max_rate: el1.maxRate,
              max_change_rate: el1.maxChangeRate
            }))
          }))
        },
        commission: {
          rate: commission.rate,
          max_rate: commission.maxRate,
          max_change_rate: commission.maxChangeRate,
          special_property_here: commission.specialPropertyHere.map(el0 => ({
            rate: el0.rate,
            max_rate: el0.maxRate,
            max_change_rate: el0.maxChangeRate
          }))
        },
        str
      };
    },
    fromAmino: ({
      duration_camel_case,
      coins_camel_case,
      some_duration,
      some_height,
      my_coin,
      camel_case_name,
      vote_value,
      previous_votes,
      desc,
      commission,
      str
    }: AminoMstThing[\\"value\\"]): MstThing => {
      return {
        durationCamelCase: Long.fromString(duration_camel_case),
        coinsCamelCase: Array.from(coins_camel_case),
        someDuration: {
          seconds: Long.fromNumber(Math.floor(parseInt(some_duration) / 1_000_000_000)),
          nanos: parseInt(some_duration) % 1_000_000_000
        },
        someHeight: some_height ? {
          revisionHeight: Long.fromString(some_height.revision_height || \\"0\\", true),
          revisionNumber: Long.fromString(some_height.revision_number || \\"0\\", true)
        } : undefined,
        myCoin: my_coin,
        camelCaseName: camel_case_name,
        voteValue: voteOptionToJSON(vote_value),
        previousVotes: previous_votes.map(el => voteOptionToJSON(el)),
        desc: {
          moniker: desc.moniker,
          identity: desc.identity,
          website: desc.website,
          securityContact: desc.security_contact,
          details: desc.details,
          superNested: {
            rate: desc.super_nested.rate,
            maxRate: desc.super_nested.max_rate,
            maxChangeRate: desc.super_nested.max_change_rate,
            specialPropertyHere: desc.super_nested.special_property_here.map(el2 => ({
              rate: el2.rate,
              maxRate: el2.max_rate,
              maxChangeRate: el2.max_change_rate
            }))
          },
          manyComissions: desc.many_comissions.map(el1 => ({
            rate: el1.rate,
            maxRate: el1.max_rate,
            maxChangeRate: el1.max_change_rate,
            specialPropertyHere: el1.special_property_here.map(el2 => ({
              rate: el2.rate,
              maxRate: el2.max_rate,
              maxChangeRate: el2.max_change_rate
            }))
          }))
        },
        commission: {
          rate: commission.rate,
          maxRate: commission.max_rate,
          maxChangeRate: commission.max_change_rate,
          specialPropertyHere: commission.special_property_here.map(el1 => ({
            rate: el1.rate,
            maxRate: el1.max_rate,
            maxChangeRate: el1.max_change_rate
          }))
        },
        str
      };
    }
  }
};"
`;

exports[`snake makeAminoConverterItem 1`] = `
"\\"/cosmos.some.MsgThing\\": {
  aminoType: \\"cosmos-sdk/MsgThing\\",
  toAmino: ({
    durationCamelCase,
    coinsCamelCase,
    someDuration,
    someHeight,
    myCoin,
    camelCaseName,
    voteValue,
    previousVotes,
    desc,
    commission,
    str
  }: MstThing): AminoMstThing[\\"value\\"] => {
    return {
      duration_camel_case: durationCamelCase.toString(),
      coins_camel_case: coinsCamelCase,
      some_duration: (someDuration * 1_000_000_000).toString(),
      some_height: someHeight ? {
        revision_height: omitDefault(someHeight.revisionHeight)?.toString(),
        revision_number: omitDefault(someHeight.revisionNumber)?.toString()
      } : {},
      my_coin: {
        denom: myCoin.denom,
        amount: Long.fromNumber(myCoin.amount).toString()
      },
      camel_case_name: camelCaseName,
      vote_value: voteValue,
      previous_votes: previousVotes,
      desc: {
        moniker: desc.moniker,
        identity: desc.identity,
        website: desc.website,
        security_contact: desc.securityContact,
        details: desc.details,
        super_nested: {
          rate: desc.superNested.rate,
          max_rate: desc.superNested.maxRate,
          max_change_rate: desc.superNested.maxChangeRate,
          special_property_here: desc.superNested.specialPropertyHere.map(el0 => ({
            rate: el0.rate,
            max_rate: el0.maxRate,
            max_change_rate: el0.maxChangeRate
          }))
        },
        many_comissions: desc.manyComissions.map(el0 => ({
          rate: el0.rate,
          max_rate: el0.maxRate,
          max_change_rate: el0.maxChangeRate,
          special_property_here: el0.specialPropertyHere.map(el1 => ({
            rate: el1.rate,
            max_rate: el1.maxRate,
            max_change_rate: el1.maxChangeRate
          }))
        }))
      },
      commission: {
        rate: commission.rate,
        max_rate: commission.maxRate,
        max_change_rate: commission.maxChangeRate,
        special_property_here: commission.specialPropertyHere.map(el0 => ({
          rate: el0.rate,
          max_rate: el0.maxRate,
          max_change_rate: el0.maxChangeRate
        }))
      },
      str
    };
  },
  fromAmino: ({
    duration_camel_case,
    coins_camel_case,
    some_duration,
    some_height,
    my_coin,
    camel_case_name,
    vote_value,
    previous_votes,
    desc,
    commission,
    str
  }: AminoMstThing[\\"value\\"]): MstThing => {
    return {
      durationCamelCase: Long.fromString(duration_camel_case),
      coinsCamelCase: Array.from(coins_camel_case),
      someDuration: {
        seconds: Long.fromNumber(Math.floor(parseInt(some_duration) / 1_000_000_000)),
        nanos: parseInt(some_duration) % 1_000_000_000
      },
      someHeight: some_height ? {
        revisionHeight: Long.fromString(some_height.revision_height || \\"0\\", true),
        revisionNumber: Long.fromString(some_height.revision_number || \\"0\\", true)
      } : undefined,
      myCoin: my_coin,
      camelCaseName: camel_case_name,
      voteValue: voteOptionToJSON(vote_value),
      previousVotes: previous_votes.map(el => voteOptionToJSON(el)),
      desc: {
        moniker: desc.moniker,
        identity: desc.identity,
        website: desc.website,
        securityContact: desc.security_contact,
        details: desc.details,
        superNested: {
          rate: desc.super_nested.rate,
          maxRate: desc.super_nested.max_rate,
          maxChangeRate: desc.super_nested.max_change_rate,
          specialPropertyHere: desc.super_nested.special_property_here.map(el2 => ({
            rate: el2.rate,
            maxRate: el2.max_rate,
            maxChangeRate: el2.max_change_rate
          }))
        },
        manyComissions: desc.many_comissions.map(el1 => ({
          rate: el1.rate,
          maxRate: el1.max_rate,
          maxChangeRate: el1.max_change_rate,
          specialPropertyHere: el1.special_property_here.map(el2 => ({
            rate: el2.rate,
            maxRate: el2.max_rate,
            maxChangeRate: el2.max_change_rate
          }))
        }))
      },
      commission: {
        rate: commission.rate,
        maxRate: commission.max_rate,
        maxChangeRate: commission.max_change_rate,
        specialPropertyHere: commission.special_property_here.map(el1 => ({
          rate: el1.rate,
          maxRate: el1.max_rate,
          maxChangeRate: el1.max_change_rate
        }))
      },
      str
    };
  }
}"
`;

exports[`snake makeAminoTypeInterface 1`] = `
"export interface AminoMstThing extends AminoMsg {
  type: \\"cosmos-sdk/MsgThing\\";
  value: {
    duration_camel_case: string;
    coins_camel_case: Coin[];
    some_duration: Duration[];
    some_height: AminoHeight;
    my_coin: Coin;
    camel_case_name: string;
    vote_value: number;
    previous_votes: number[];
    desc: {
      moniker: string;
      identity: string;
      website: string;
      security_contact: string;
      details: string;
      super_nested: {
        rate: string;
        max_rate: string;
        max_change_rate: string;
        special_property_here: {
          rate: string;
          max_rate: string;
          max_change_rate: string;
        }[];
      };
      many_comissions: {
        rate: string;
        max_rate: string;
        max_change_rate: string;
        special_property_here: {
          rate: string;
          max_rate: string;
          max_change_rate: string;
        }[];
      }[];
    };
    commission: {
      rate: string;
      max_rate: string;
      max_change_rate: string;
      special_property_here: {
        rate: string;
        max_rate: string;
        max_change_rate: string;
      }[];
    };
    str: string;
  };
}"
`;
