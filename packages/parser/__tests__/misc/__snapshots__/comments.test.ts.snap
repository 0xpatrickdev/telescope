// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos/base/query/v1beta1/pagination 1`] = `
{
  "acceptsInterface": {},
  "implementsInterface": {},
  "importNames": {},
  "imports": undefined,
  "package": "cosmos.base.query.v1beta1",
  "parsedExports": {
    "PageRequest": true,
    "PageResponse": true,
  },
  "parsedImports": {},
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "base": {
            "nested": {
              "query": {
                "nested": {
                  "v1beta1": {
                    "nested": {
                      "PageRequest": {
                        "comment": "PageRequest is to be embedded in gRPC request messages for efficient
 pagination. Ex:

  message SomeRequest {
          Foo some_parameter = 1;
          PageRequest pagination = 2;
  }",
                        "fields": {
                          "countTotal": {
                            "comment": "count_total is set to true  to indicate that the result set should include
 a count of the total number of items available for pagination in UIs.
 count_total is only respected when offset is used. It is ignored when key
 is set.",
                            "id": 4,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "countTotal",
                              "(telescope:name)": "countTotal",
                              "(telescope:orig)": "count_total",
                            },
                            "parsedType": {
                              "name": "bool",
                              "type": "native",
                            },
                            "type": "bool",
                            "typeNum": 12,
                          },
                          "key": {
                            "comment": "key is a value returned in PageResponse.next_key to begin
 querying the next page most efficiently. Only one of offset or key
 should be set.",
                            "id": 1,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "key",
                              "(telescope:name)": "key",
                              "(telescope:orig)": "key",
                            },
                            "parsedType": {
                              "name": "bytes",
                              "type": "native",
                            },
                            "type": "bytes",
                            "typeNum": 14,
                          },
                          "limit": {
                            "comment": "limit is the total number of results to be returned in the result page.
 If left empty it will default to a value to be set by each app.",
                            "id": 3,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "limit",
                              "(telescope:name)": "limit",
                              "(telescope:orig)": "limit",
                            },
                            "parsedType": {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "offset": {
                            "comment": "offset is a numeric offset that can be used when key is unavailable.
 It is less efficient than using key. Only one of offset or key should
 be set.",
                            "id": 2,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "offset",
                              "(telescope:name)": "offset",
                              "(telescope:orig)": "offset",
                            },
                            "parsedType": {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                          "reverse": {
                            "comment": "reverse is set to true if results are to be returned in the descending order.

 Since: cosmos-sdk 0.43",
                            "id": 5,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "reverse",
                              "(telescope:name)": "reverse",
                              "(telescope:orig)": "reverse",
                            },
                            "parsedType": {
                              "name": "bool",
                              "type": "native",
                            },
                            "type": "bool",
                            "typeNum": 12,
                          },
                        },
                        "keyTypes": [],
                        "name": "PageRequest",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "package": "cosmos.base.query.v1beta1",
                        "type": "Type",
                      },
                      "PageResponse": {
                        "comment": "PageResponse is to be embedded in gRPC response messages where the
 corresponding request message has used PageRequest.

  message SomeResponse {
          repeated Bar results = 1;
          PageResponse page = 2;
  }",
                        "fields": {
                          "nextKey": {
                            "comment": "next_key is the key to be passed to PageRequest.key to
 query the next page most efficiently. It will be empty if
 there are no more results.",
                            "id": 1,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "nextKey",
                              "(telescope:name)": "nextKey",
                              "(telescope:orig)": "next_key",
                            },
                            "parsedType": {
                              "name": "bytes",
                              "type": "native",
                            },
                            "type": "bytes",
                            "typeNum": 14,
                          },
                          "total": {
                            "comment": "total is total number of results available if PageRequest.count_total
 was set, its value is undefined otherwise",
                            "id": 2,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "total",
                              "(telescope:name)": "total",
                              "(telescope:orig)": "total",
                            },
                            "parsedType": {
                              "name": "uint64",
                              "type": "native",
                            },
                            "type": "uint64",
                            "typeNum": 8,
                          },
                        },
                        "keyTypes": [],
                        "name": "PageResponse",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "package": "cosmos.base.query.v1beta1",
                        "type": "Type",
                      },
                    },
                    "type": "Namespace",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`google/rpc/code 1`] = `
{
  "acceptsInterface": {},
  "implementsInterface": {},
  "importNames": {},
  "imports": undefined,
  "package": "google.rpc",
  "parsedExports": {},
  "parsedImports": {},
  "root": {
    "nested": {
      "google": {
        "nested": {
          "rpc": {
            "nested": {
              "Code": {
                "comment": "The canonical error codes for gRPC APIs.


 Sometimes multiple error codes may apply.  Services should return
 the most specific error code that applies.  For example, prefer
 \`OUT_OF_RANGE\` over \`FAILED_PRECONDITION\` if both codes apply.
 Similarly prefer \`NOT_FOUND\` or \`ALREADY_EXISTS\` over \`FAILED_PRECONDITION\`.",
                "comments": {
                  "ABORTED": "The operation was aborted, typically due to a concurrency issue such as
 a sequencer check failure or transaction abort.

 See the guidelines above for deciding between \`FAILED_PRECONDITION\`,
 \`ABORTED\`, and \`UNAVAILABLE\`.

 HTTP Mapping: 409 Conflict",
                  "ALREADY_EXISTS": "The entity that a client attempted to create (e.g., file or directory)
 already exists.

 HTTP Mapping: 409 Conflict",
                  "CANCELLED": "The operation was cancelled, typically by the caller.

 HTTP Mapping: 499 Client Closed Request",
                  "DATA_LOSS": "Unrecoverable data loss or corruption.

 HTTP Mapping: 500 Internal Server Error",
                  "DEADLINE_EXCEEDED": "The deadline expired before the operation could complete. For operations
 that change the state of the system, this error may be returned
 even if the operation has completed successfully.  For example, a
 successful response from a server could have been delayed long
 enough for the deadline to expire.

 HTTP Mapping: 504 Gateway Timeout",
                  "FAILED_PRECONDITION": "The operation was rejected because the system is not in a state
 required for the operation's execution.  For example, the directory
 to be deleted is non-empty, an rmdir operation is applied to
 a non-directory, etc.

 Service implementors can use the following guidelines to decide
 between \`FAILED_PRECONDITION\`, \`ABORTED\`, and \`UNAVAILABLE\`:
  (a) Use \`UNAVAILABLE\` if the client can retry just the failing call.
  (b) Use \`ABORTED\` if the client should retry at a higher level
      (e.g., when a client-specified test-and-set fails, indicating the
      client should restart a read-modify-write sequence).
  (c) Use \`FAILED_PRECONDITION\` if the client should not retry until
      the system state has been explicitly fixed.  E.g., if an "rmdir"
      fails because the directory is non-empty, \`FAILED_PRECONDITION\`
      should be returned since the client should not retry unless
      the files are deleted from the directory.

 HTTP Mapping: 400 Bad Request",
                  "INTERNAL": "Internal errors.  This means that some invariants expected by the
 underlying system have been broken.  This error code is reserved
 for serious errors.

 HTTP Mapping: 500 Internal Server Error",
                  "INVALID_ARGUMENT": "The client specified an invalid argument.  Note that this differs
 from \`FAILED_PRECONDITION\`.  \`INVALID_ARGUMENT\` indicates arguments
 that are problematic regardless of the state of the system
 (e.g., a malformed file name).

 HTTP Mapping: 400 Bad Request",
                  "NOT_FOUND": "Some requested entity (e.g., file or directory) was not found.

 Note to server developers: if a request is denied for an entire class
 of users, such as gradual feature rollout or undocumented whitelist,
 \`NOT_FOUND\` may be used. If a request is denied for some users within
 a class of users, such as user-based access control, \`PERMISSION_DENIED\`
 must be used.

 HTTP Mapping: 404 Not Found",
                  "OK": "Not an error; returned on success

 HTTP Mapping: 200 OK",
                  "OUT_OF_RANGE": "The operation was attempted past the valid range.  E.g., seeking or
 reading past end-of-file.

 Unlike \`INVALID_ARGUMENT\`, this error indicates a problem that may
 be fixed if the system state changes. For example, a 32-bit file
 system will generate \`INVALID_ARGUMENT\` if asked to read at an
 offset that is not in the range [0,2^32-1], but it will generate
 \`OUT_OF_RANGE\` if asked to read from an offset past the current
 file size.

 There is a fair bit of overlap between \`FAILED_PRECONDITION\` and
 \`OUT_OF_RANGE\`.  We recommend using \`OUT_OF_RANGE\` (the more specific
 error) when it applies so that callers who are iterating through
 a space can easily look for an \`OUT_OF_RANGE\` error to detect when
 they are done.

 HTTP Mapping: 400 Bad Request",
                  "PERMISSION_DENIED": "The caller does not have permission to execute the specified
 operation. \`PERMISSION_DENIED\` must not be used for rejections
 caused by exhausting some resource (use \`RESOURCE_EXHAUSTED\`
 instead for those errors). \`PERMISSION_DENIED\` must not be
 used if the caller can not be identified (use \`UNAUTHENTICATED\`
 instead for those errors). This error code does not imply the
 request is valid or the requested entity exists or satisfies
 other pre-conditions.

 HTTP Mapping: 403 Forbidden",
                  "RESOURCE_EXHAUSTED": "Some resource has been exhausted, perhaps a per-user quota, or
 perhaps the entire file system is out of space.

 HTTP Mapping: 429 Too Many Requests",
                  "UNAUTHENTICATED": "The request does not have valid authentication credentials for the
 operation.

 HTTP Mapping: 401 Unauthorized",
                  "UNAVAILABLE": "The service is currently unavailable.  This is most likely a
 transient condition, which can be corrected by retrying with
 a backoff. Note that it is not always safe to retry
 non-idempotent operations.

 See the guidelines above for deciding between \`FAILED_PRECONDITION\`,
 \`ABORTED\`, and \`UNAVAILABLE\`.

 HTTP Mapping: 503 Service Unavailable",
                  "UNIMPLEMENTED": "The operation is not implemented or is not supported/enabled in this
 service.

 HTTP Mapping: 501 Not Implemented",
                  "UNKNOWN": "Unknown error.  For example, this error may be returned when
 a \`Status\` value received from another address space belongs to
 an error space that is not known in this address space.  Also
 errors raised by APIs that do not return enough error information
 may be converted to this error.

 HTTP Mapping: 500 Internal Server Error",
                },
                "name": "Code",
                "package": "google.rpc",
                "type": "Enum",
                "values": {
                  "ABORTED": 10,
                  "ALREADY_EXISTS": 6,
                  "CANCELLED": 1,
                  "DATA_LOSS": 15,
                  "DEADLINE_EXCEEDED": 4,
                  "FAILED_PRECONDITION": 9,
                  "INTERNAL": 13,
                  "INVALID_ARGUMENT": 3,
                  "NOT_FOUND": 5,
                  "OK": 0,
                  "OUT_OF_RANGE": 11,
                  "PERMISSION_DENIED": 7,
                  "RESOURCE_EXHAUSTED": 8,
                  "UNAUTHENTICATED": 16,
                  "UNAVAILABLE": 14,
                  "UNIMPLEMENTED": 12,
                  "UNKNOWN": 2,
                },
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;
