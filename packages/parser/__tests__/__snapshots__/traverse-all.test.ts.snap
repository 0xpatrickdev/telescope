// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`google/api/expr/conformance/v1alpha1/conformance_service CheckRequest 1`] = `
Object {
  "container": Object {
    "comment": "The protocol buffer context.  See \\"Name Resolution\\" in the
Language Definition.",
    "id": 3,
    "isScalar": true,
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
  "noStdEnv": Object {
    "comment": "If true, use only the declarations in [type_env][google.api.expr.conformance.v1alpha1.CheckRequest.type_env].  If false (default),
add declarations for the standard definitions to the type environment.  See
\\"Standard Definitions\\" in the Language Definition.",
    "id": 4,
    "isScalar": true,
    "parsedType": Object {
      "name": "bool",
      "type": "native",
    },
    "type": "bool",
    "typeNum": 12,
  },
  "parsedExpr": Object {
    "comment": "Required. The parsed representation of the CEL program.",
    "id": 1,
    "import": "google/api/expr/v1alpha1/syntax.proto",
    "importedName": "google.api.expr.v1alpha1.ParsedExpr",
    "parsedType": Object {
      "name": "ParsedExpr",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
    ],
    "scopeType": "protoImport",
    "type": "google.api.expr.v1alpha1.ParsedExpr",
  },
  "typeEnv": Object {
    "comment": "Declarations of types for external variables and functions.
Required if program uses external variables or functions
not in the default environment.",
    "id": 2,
    "import": "google/api/expr/v1alpha1/checked.proto",
    "importedName": "google.api.expr.v1alpha1.Decl",
    "parsedType": Object {
      "name": "Decl",
      "type": "Type",
    },
    "rule": "repeated",
    "scope": Array [
      "google.api.expr.v1alpha1",
    ],
    "scopeType": "protoImport",
    "type": "google.api.expr.v1alpha1.Decl",
  },
}
`;

exports[`google/api/expr/conformance/v1alpha1/conformance_service Decl 1`] = `
Object {
  "function": Object {
    "comment": "Function declaration.",
    "id": 3,
    "parsedType": Object {
      "name": "FunctionDecl",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
      "Decl",
    ],
    "type": "FunctionDecl",
  },
  "ident": Object {
    "comment": "Identifier declaration.",
    "id": 2,
    "parsedType": Object {
      "name": "IdentDecl",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
      "Decl",
    ],
    "type": "IdentDecl",
  },
  "name": Object {
    "comment": "The fully qualified name of the declaration.

Declarations are organized in containers and this represents the full path
to the declaration in its container, as in \`google.api.expr.Decl\`.

Declarations used as [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload] parameters may or may not
have a name depending on whether the overload is function declaration or a
function definition containing a result [Expr][google.api.expr.v1alpha1.Expr].",
    "id": 1,
    "isScalar": true,
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
}
`;

exports[`google/api/expr/conformance/v1alpha1/conformance_service IdentDecl 1`] = `
Object {
  "doc": Object {
    "comment": "Documentation string for the identifier.",
    "id": 3,
    "isScalar": true,
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
  "type": Object {
    "comment": "Required. The type of the identifier.",
    "id": 1,
    "parsedType": Object {
      "name": "Type",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
    ],
    "type": "Type",
  },
  "value": Object {
    "comment": "The constant value of the identifier. If not specified, the identifier
must be supplied at evaluation time.",
    "id": 2,
    "import": "google/api/expr/v1alpha1/syntax.proto",
    "importedName": "Constant",
    "parsedType": Object {
      "name": "Constant",
      "type": "Type",
    },
    "scope": Array [
      Array [
        "google.api.expr.v1alpha1",
      ],
    ],
    "scopeType": "import",
    "type": "Constant",
  },
}
`;

exports[`google/api/expr/conformance/v1alpha1/conformance_service ParsedExpr 1`] = `
Object {
  "expr": Object {
    "comment": "The parsed expression.",
    "id": 2,
    "parsedType": Object {
      "name": "Expr",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
    ],
    "type": "Expr",
  },
  "sourceInfo": Object {
    "comment": "The source info derived from input that generated the parsed \`expr\`.",
    "id": 3,
    "parsedType": Object {
      "name": "SourceInfo",
      "type": "Type",
    },
    "scope": Array [
      "google.api.expr.v1alpha1",
    ],
    "type": "SourceInfo",
  },
}
`;

exports[`osmosis/gamm/v1beta1/tx Coin 1`] = `
Object {
  "amount": Object {
    "comment": null,
    "id": 2,
    "isScalar": true,
    "options": Object {
      "(cosmos_proto.scalar)": "cosmos.Int",
      "(gogoproto.customtype)": "Int",
      "(gogoproto.nullable)": false,
    },
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
  "denom": Object {
    "comment": null,
    "id": 1,
    "isScalar": true,
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
}
`;

exports[`osmosis/gamm/v1beta1/tx SwapAmountInRoute 1`] = `
Object {
  "poolId": Object {
    "comment": null,
    "id": 1,
    "isScalar": true,
    "options": Object {
      "(gogoproto.moretags)": "yaml:pool_id",
    },
    "parsedType": Object {
      "name": "uint64",
      "type": "native",
    },
    "type": "uint64",
    "typeNum": 8,
  },
  "tokenOutDenom": Object {
    "comment": null,
    "id": 2,
    "isScalar": true,
    "options": Object {
      "(gogoproto.moretags)": "yaml:token_out_denom",
    },
    "parsedType": Object {
      "name": "string",
      "type": "native",
    },
    "type": "string",
    "typeNum": 13,
  },
}
`;
