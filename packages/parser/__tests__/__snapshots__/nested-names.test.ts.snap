// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`google/rpc/error_details 1`] = `
Object {
  "comment": "Describes what preconditions have failed.

For example, if an RPC failed because it required the Terms of Service to be
acknowledged, it could list the terms of service violation in the
PreconditionFailure message.",
  "fields": Object {
    "violations": Object {
      "comment": "Describes all precondition violations.",
      "id": 1,
      "parsedType": Object {
        "name": "Violation",
        "type": "Type",
      },
      "rule": "repeated",
      "scope": Array [
        "google.rpc",
        "PreconditionFailure",
      ],
      "type": "Violation",
    },
  },
  "keyTypes": Array [],
  "name": "PreconditionFailure",
  "nested": Object {
    "Violation": Object {
      "comment": "A message type used to describe a single precondition failure.",
      "fields": Object {
        "description": Object {
          "comment": "A description of how the precondition failed. Developers can use this
description to understand how to fix the failure.

For example: \\"Terms of service not accepted\\".",
          "id": 3,
          "isScalar": true,
          "parsedType": Object {
            "name": "string",
            "type": "native",
          },
          "type": "string",
          "typeNum": 13,
        },
        "subject": Object {
          "comment": "The subject, relative to the type, that failed.
For example, \\"google.com/cloud\\" relative to the \\"TOS\\" type would indicate
which terms of service is being referenced.",
          "id": 2,
          "isScalar": true,
          "parsedType": Object {
            "name": "string",
            "type": "native",
          },
          "type": "string",
          "typeNum": 13,
        },
        "type": Object {
          "comment": "The type of PreconditionFailure. We recommend using a service-specific
enum type to define the supported precondition violation subjects. For
example, \\"TOS\\" for \\"Terms of Service violation\\".",
          "id": 1,
          "isScalar": true,
          "parsedType": Object {
            "name": "string",
            "type": "native",
          },
          "type": "string",
          "typeNum": 13,
        },
      },
      "keyTypes": Array [],
      "name": "Violation",
      "nested": null,
      "oneofs": undefined,
      "options": undefined,
      "type": "Type",
    },
  },
  "oneofs": undefined,
  "options": undefined,
  "type": "Type",
}
`;
