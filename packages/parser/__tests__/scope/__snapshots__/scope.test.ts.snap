// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`google/api/expr/v1alpha1/checked Decl 1`] = `
{
  "FunctionDecl": {
    "fields": {
      "overloads": {
        "id": 1,
        "options": {
          "(telescope:camel)": "overloads",
          "(telescope:name)": "overloads",
          "(telescope:orig)": "overloads",
        },
        "rule": "repeated",
        "type": "Overload",
      },
    },
    "nested": {
      "Overload": {
        "fields": {
          "doc": {
            "id": 6,
            "options": {
              "(telescope:camel)": "doc",
              "(telescope:name)": "doc",
              "(telescope:orig)": "doc",
            },
            "type": "string",
          },
          "isInstanceFunction": {
            "id": 5,
            "options": {
              "(telescope:camel)": "isInstanceFunction",
              "(telescope:name)": "isInstanceFunction",
              "(telescope:orig)": "is_instance_function",
            },
            "type": "bool",
          },
          "overloadId": {
            "id": 1,
            "options": {
              "(telescope:camel)": "overloadId",
              "(telescope:name)": "overloadId",
              "(telescope:orig)": "overload_id",
            },
            "type": "string",
          },
          "params": {
            "id": 2,
            "options": {
              "(telescope:camel)": "params",
              "(telescope:name)": "params",
              "(telescope:orig)": "params",
            },
            "rule": "repeated",
            "type": "Type",
          },
          "resultType": {
            "id": 4,
            "options": {
              "(telescope:camel)": "resultType",
              "(telescope:name)": "resultType",
              "(telescope:orig)": "result_type",
            },
            "type": "Type",
          },
          "typeParams": {
            "id": 3,
            "options": {
              "(telescope:camel)": "typeParams",
              "(telescope:name)": "typeParams",
              "(telescope:orig)": "type_params",
            },
            "rule": "repeated",
            "type": "string",
          },
        },
      },
    },
  },
  "IdentDecl": {
    "fields": {
      "doc": {
        "id": 3,
        "options": {
          "(telescope:camel)": "doc",
          "(telescope:name)": "doc",
          "(telescope:orig)": "doc",
        },
        "type": "string",
      },
      "type": {
        "id": 1,
        "options": {
          "(telescope:camel)": "type",
          "(telescope:name)": "type",
          "(telescope:orig)": "type",
        },
        "type": "Type",
      },
      "value": {
        "id": 2,
        "options": {
          "(telescope:camel)": "value",
          "(telescope:name)": "value",
          "(telescope:orig)": "value",
        },
        "type": "Constant",
      },
    },
  },
  "_ctor": null,
  "_fieldsArray": null,
  "_fieldsById": null,
  "_nestedArray": [
    {
      "fields": {
        "doc": {
          "id": 3,
          "options": {
            "(telescope:camel)": "doc",
            "(telescope:name)": "doc",
            "(telescope:orig)": "doc",
          },
          "type": "string",
        },
        "type": {
          "id": 1,
          "options": {
            "(telescope:camel)": "type",
            "(telescope:name)": "type",
            "(telescope:orig)": "type",
          },
          "type": "Type",
        },
        "value": {
          "id": 2,
          "options": {
            "(telescope:camel)": "value",
            "(telescope:name)": "value",
            "(telescope:orig)": "value",
          },
          "type": "Constant",
        },
      },
    },
    {
      "fields": {
        "overloads": {
          "id": 1,
          "options": {
            "(telescope:camel)": "overloads",
            "(telescope:name)": "overloads",
            "(telescope:orig)": "overloads",
          },
          "rule": "repeated",
          "type": "Overload",
        },
      },
      "nested": {
        "Overload": {
          "fields": {
            "doc": {
              "id": 6,
              "options": {
                "(telescope:camel)": "doc",
                "(telescope:name)": "doc",
                "(telescope:orig)": "doc",
              },
              "type": "string",
            },
            "isInstanceFunction": {
              "id": 5,
              "options": {
                "(telescope:camel)": "isInstanceFunction",
                "(telescope:name)": "isInstanceFunction",
                "(telescope:orig)": "is_instance_function",
              },
              "type": "bool",
            },
            "overloadId": {
              "id": 1,
              "options": {
                "(telescope:camel)": "overloadId",
                "(telescope:name)": "overloadId",
                "(telescope:orig)": "overload_id",
              },
              "type": "string",
            },
            "params": {
              "id": 2,
              "options": {
                "(telescope:camel)": "params",
                "(telescope:name)": "params",
                "(telescope:orig)": "params",
              },
              "rule": "repeated",
              "type": "Type",
            },
            "resultType": {
              "id": 4,
              "options": {
                "(telescope:camel)": "resultType",
                "(telescope:name)": "resultType",
                "(telescope:orig)": "result_type",
              },
              "type": "Type",
            },
            "typeParams": {
              "id": 3,
              "options": {
                "(telescope:camel)": "typeParams",
                "(telescope:name)": "typeParams",
                "(telescope:orig)": "type_params",
              },
              "rule": "repeated",
              "type": "string",
            },
          },
        },
      },
    },
  ],
  "_oneofsArray": null,
  "comment": "Represents a declaration of a named value or function.

 A declaration is part of the contract between the expression, the agent
 evaluating that expression, and the caller requesting evaluation.",
  "extensions": undefined,
  "fields": {
    "function": {
      "id": 3,
      "options": {
        "(telescope:camel)": "function",
        "(telescope:name)": "function",
        "(telescope:orig)": "function",
      },
      "type": "FunctionDecl",
    },
    "ident": {
      "id": 2,
      "options": {
        "(telescope:camel)": "ident",
        "(telescope:name)": "ident",
        "(telescope:orig)": "ident",
      },
      "type": "IdentDecl",
    },
    "name": {
      "id": 1,
      "options": {
        "(telescope:camel)": "name",
        "(telescope:name)": "name",
        "(telescope:orig)": "name",
      },
      "type": "string",
    },
  },
  "filename": null,
  "group": undefined,
  "name": "Decl",
  "nested": {
    "FunctionDecl": {
      "fields": {
        "overloads": {
          "id": 1,
          "options": {
            "(telescope:camel)": "overloads",
            "(telescope:name)": "overloads",
            "(telescope:orig)": "overloads",
          },
          "rule": "repeated",
          "type": "Overload",
        },
      },
      "nested": {
        "Overload": {
          "fields": {
            "doc": {
              "id": 6,
              "options": {
                "(telescope:camel)": "doc",
                "(telescope:name)": "doc",
                "(telescope:orig)": "doc",
              },
              "type": "string",
            },
            "isInstanceFunction": {
              "id": 5,
              "options": {
                "(telescope:camel)": "isInstanceFunction",
                "(telescope:name)": "isInstanceFunction",
                "(telescope:orig)": "is_instance_function",
              },
              "type": "bool",
            },
            "overloadId": {
              "id": 1,
              "options": {
                "(telescope:camel)": "overloadId",
                "(telescope:name)": "overloadId",
                "(telescope:orig)": "overload_id",
              },
              "type": "string",
            },
            "params": {
              "id": 2,
              "options": {
                "(telescope:camel)": "params",
                "(telescope:name)": "params",
                "(telescope:orig)": "params",
              },
              "rule": "repeated",
              "type": "Type",
            },
            "resultType": {
              "id": 4,
              "options": {
                "(telescope:camel)": "resultType",
                "(telescope:name)": "resultType",
                "(telescope:orig)": "result_type",
              },
              "type": "Type",
            },
            "typeParams": {
              "id": 3,
              "options": {
                "(telescope:camel)": "typeParams",
                "(telescope:name)": "typeParams",
                "(telescope:orig)": "type_params",
              },
              "rule": "repeated",
              "type": "string",
            },
          },
        },
      },
    },
    "IdentDecl": {
      "fields": {
        "doc": {
          "id": 3,
          "options": {
            "(telescope:camel)": "doc",
            "(telescope:name)": "doc",
            "(telescope:orig)": "doc",
          },
          "type": "string",
        },
        "type": {
          "id": 1,
          "options": {
            "(telescope:camel)": "type",
            "(telescope:name)": "type",
            "(telescope:orig)": "type",
          },
          "type": "Type",
        },
        "value": {
          "id": 2,
          "options": {
            "(telescope:camel)": "value",
            "(telescope:name)": "value",
            "(telescope:orig)": "value",
          },
          "type": "Constant",
        },
      },
    },
  },
  "oneofs": {
    "declKind": {
      "oneof": [
        "ident",
        "function",
      ],
    },
  },
  "options": undefined,
  "parent": {
    "nested": {
      "CheckedExpr": {
        "fields": {
          "expr": {
            "id": 4,
            "options": {
              "(telescope:camel)": "expr",
              "(telescope:name)": "expr",
              "(telescope:orig)": "expr",
            },
            "type": "Expr",
          },
          "exprVersion": {
            "id": 6,
            "options": {
              "(telescope:camel)": "exprVersion",
              "(telescope:name)": "exprVersion",
              "(telescope:orig)": "expr_version",
            },
            "type": "string",
          },
          "referenceMap": {
            "id": 2,
            "keyType": "int64",
            "options": {
              "(telescope:camel)": "referenceMap",
              "(telescope:name)": "referenceMap",
              "(telescope:orig)": "reference_map",
            },
            "type": "Reference",
          },
          "sourceInfo": {
            "id": 5,
            "options": {
              "(telescope:camel)": "sourceInfo",
              "(telescope:name)": "sourceInfo",
              "(telescope:orig)": "source_info",
            },
            "type": "SourceInfo",
          },
          "typeMap": {
            "id": 3,
            "keyType": "int64",
            "options": {
              "(telescope:camel)": "typeMap",
              "(telescope:name)": "typeMap",
              "(telescope:orig)": "type_map",
            },
            "type": "Type",
          },
        },
      },
      "Decl": {
        "fields": {
          "function": {
            "id": 3,
            "options": {
              "(telescope:camel)": "function",
              "(telescope:name)": "function",
              "(telescope:orig)": "function",
            },
            "type": "FunctionDecl",
          },
          "ident": {
            "id": 2,
            "options": {
              "(telescope:camel)": "ident",
              "(telescope:name)": "ident",
              "(telescope:orig)": "ident",
            },
            "type": "IdentDecl",
          },
          "name": {
            "id": 1,
            "options": {
              "(telescope:camel)": "name",
              "(telescope:name)": "name",
              "(telescope:orig)": "name",
            },
            "type": "string",
          },
        },
        "nested": {
          "FunctionDecl": {
            "fields": {
              "overloads": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "overloads",
                  "(telescope:name)": "overloads",
                  "(telescope:orig)": "overloads",
                },
                "rule": "repeated",
                "type": "Overload",
              },
            },
            "nested": {
              "Overload": {
                "fields": {
                  "doc": {
                    "id": 6,
                    "options": {
                      "(telescope:camel)": "doc",
                      "(telescope:name)": "doc",
                      "(telescope:orig)": "doc",
                    },
                    "type": "string",
                  },
                  "isInstanceFunction": {
                    "id": 5,
                    "options": {
                      "(telescope:camel)": "isInstanceFunction",
                      "(telescope:name)": "isInstanceFunction",
                      "(telescope:orig)": "is_instance_function",
                    },
                    "type": "bool",
                  },
                  "overloadId": {
                    "id": 1,
                    "options": {
                      "(telescope:camel)": "overloadId",
                      "(telescope:name)": "overloadId",
                      "(telescope:orig)": "overload_id",
                    },
                    "type": "string",
                  },
                  "params": {
                    "id": 2,
                    "options": {
                      "(telescope:camel)": "params",
                      "(telescope:name)": "params",
                      "(telescope:orig)": "params",
                    },
                    "rule": "repeated",
                    "type": "Type",
                  },
                  "resultType": {
                    "id": 4,
                    "options": {
                      "(telescope:camel)": "resultType",
                      "(telescope:name)": "resultType",
                      "(telescope:orig)": "result_type",
                    },
                    "type": "Type",
                  },
                  "typeParams": {
                    "id": 3,
                    "options": {
                      "(telescope:camel)": "typeParams",
                      "(telescope:name)": "typeParams",
                      "(telescope:orig)": "type_params",
                    },
                    "rule": "repeated",
                    "type": "string",
                  },
                },
              },
            },
          },
          "IdentDecl": {
            "fields": {
              "doc": {
                "id": 3,
                "options": {
                  "(telescope:camel)": "doc",
                  "(telescope:name)": "doc",
                  "(telescope:orig)": "doc",
                },
                "type": "string",
              },
              "type": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "type",
                  "(telescope:name)": "type",
                  "(telescope:orig)": "type",
                },
                "type": "Type",
              },
              "value": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "value",
                  "(telescope:name)": "value",
                  "(telescope:orig)": "value",
                },
                "type": "Constant",
              },
            },
          },
        },
        "oneofs": {
          "declKind": {
            "oneof": [
              "ident",
              "function",
            ],
          },
        },
      },
      "Reference": {
        "fields": {
          "name": {
            "id": 1,
            "options": {
              "(telescope:camel)": "name",
              "(telescope:name)": "name",
              "(telescope:orig)": "name",
            },
            "type": "string",
          },
          "overloadId": {
            "id": 3,
            "options": {
              "(telescope:camel)": "overloadId",
              "(telescope:name)": "overloadId",
              "(telescope:orig)": "overload_id",
            },
            "rule": "repeated",
            "type": "string",
          },
          "value": {
            "id": 4,
            "options": {
              "(telescope:camel)": "value",
              "(telescope:name)": "value",
              "(telescope:orig)": "value",
            },
            "type": "Constant",
          },
        },
      },
      "Type": {
        "fields": {
          "abstractType": {
            "id": 14,
            "options": {
              "(telescope:camel)": "abstractType",
              "(telescope:name)": "abstractType",
              "(telescope:orig)": "abstract_type",
            },
            "type": "AbstractType",
          },
          "dyn": {
            "id": 1,
            "options": {
              "(telescope:camel)": "dyn",
              "(telescope:name)": "dyn",
              "(telescope:orig)": "dyn",
            },
            "type": "google.protobuf.Empty",
          },
          "error": {
            "id": 12,
            "options": {
              "(telescope:camel)": "error",
              "(telescope:name)": "error",
              "(telescope:orig)": "error",
            },
            "type": "google.protobuf.Empty",
          },
          "function": {
            "id": 8,
            "options": {
              "(telescope:camel)": "function",
              "(telescope:name)": "function",
              "(telescope:orig)": "function",
            },
            "type": "FunctionType",
          },
          "listType": {
            "id": 6,
            "options": {
              "(telescope:camel)": "listType",
              "(telescope:name)": "listType",
              "(telescope:orig)": "list_type",
            },
            "type": "ListType",
          },
          "mapType": {
            "id": 7,
            "options": {
              "(telescope:camel)": "mapType",
              "(telescope:name)": "mapType",
              "(telescope:orig)": "map_type",
            },
            "type": "MapType",
          },
          "messageType": {
            "id": 9,
            "options": {
              "(telescope:camel)": "messageType",
              "(telescope:name)": "messageType",
              "(telescope:orig)": "message_type",
            },
            "type": "string",
          },
          "null": {
            "id": 2,
            "options": {
              "(telescope:camel)": "null",
              "(telescope:name)": "null",
              "(telescope:orig)": "null",
            },
            "type": "google.protobuf.NullValue",
          },
          "primitive": {
            "id": 3,
            "options": {
              "(telescope:camel)": "primitive",
              "(telescope:name)": "primitive",
              "(telescope:orig)": "primitive",
            },
            "type": "PrimitiveType",
          },
          "type": {
            "id": 11,
            "options": {
              "(telescope:camel)": "type",
              "(telescope:name)": "type",
              "(telescope:orig)": "type",
            },
            "type": "Type",
          },
          "typeParam": {
            "id": 10,
            "options": {
              "(telescope:camel)": "typeParam",
              "(telescope:name)": "typeParam",
              "(telescope:orig)": "type_param",
            },
            "type": "string",
          },
          "wellKnown": {
            "id": 5,
            "options": {
              "(telescope:camel)": "wellKnown",
              "(telescope:name)": "wellKnown",
              "(telescope:orig)": "well_known",
            },
            "type": "WellKnownType",
          },
          "wrapper": {
            "id": 4,
            "options": {
              "(telescope:camel)": "wrapper",
              "(telescope:name)": "wrapper",
              "(telescope:orig)": "wrapper",
            },
            "type": "PrimitiveType",
          },
        },
        "nested": {
          "AbstractType": {
            "fields": {
              "name": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "name",
                  "(telescope:name)": "name",
                  "(telescope:orig)": "name",
                },
                "type": "string",
              },
              "parameterTypes": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "parameterTypes",
                  "(telescope:name)": "parameterTypes",
                  "(telescope:orig)": "parameter_types",
                },
                "rule": "repeated",
                "type": "Type",
              },
            },
          },
          "FunctionType": {
            "fields": {
              "argTypes": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "argTypes",
                  "(telescope:name)": "argTypes",
                  "(telescope:orig)": "arg_types",
                },
                "rule": "repeated",
                "type": "Type",
              },
              "resultType": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "resultType",
                  "(telescope:name)": "resultType",
                  "(telescope:orig)": "result_type",
                },
                "type": "Type",
              },
            },
          },
          "ListType": {
            "fields": {
              "elemType": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "elemType",
                  "(telescope:name)": "elemType",
                  "(telescope:orig)": "elem_type",
                },
                "type": "Type",
              },
            },
          },
          "MapType": {
            "fields": {
              "keyType": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "keyType",
                  "(telescope:name)": "keyType",
                  "(telescope:orig)": "key_type",
                },
                "type": "Type",
              },
              "valueType": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "valueType",
                  "(telescope:name)": "valueType",
                  "(telescope:orig)": "value_type",
                },
                "type": "Type",
              },
            },
          },
          "PrimitiveType": {
            "values": {
              "BOOL": 1,
              "BYTES": 6,
              "DOUBLE": 4,
              "INT64": 2,
              "PRIMITIVE_TYPE_UNSPECIFIED": 0,
              "STRING": 5,
              "UINT64": 3,
            },
          },
          "WellKnownType": {
            "values": {
              "ANY": 1,
              "DURATION": 3,
              "TIMESTAMP": 2,
              "WELL_KNOWN_TYPE_UNSPECIFIED": 0,
            },
          },
        },
        "oneofs": {
          "typeKind": {
            "oneof": [
              "dyn",
              "null",
              "primitive",
              "wrapper",
              "wellKnown",
              "listType",
              "mapType",
              "function",
              "messageType",
              "typeParam",
              "type",
              "error",
              "abstractType",
            ],
          },
        },
      },
    },
    "options": {
      "cc_enable_arenas": true,
      "go_package": "google.golang.org/genproto/googleapis/api/expr/v1alpha1;expr",
      "java_multiple_files": true,
      "java_outer_classname": "DeclProto",
      "java_package": "com.google.api.expr.v1alpha1",
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "google.api.expr.v1alpha1",
  ],
}
`;

exports[`google/api/expr/v1alpha1/checked IdentDecl 1`] = `
{
  "_ctor": null,
  "_fieldsArray": [
    {
      "id": 1,
      "options": {
        "(telescope:camel)": "type",
        "(telescope:name)": "type",
        "(telescope:orig)": "type",
      },
      "type": "Type",
    },
    {
      "id": 2,
      "options": {
        "(telescope:camel)": "value",
        "(telescope:name)": "value",
        "(telescope:orig)": "value",
      },
      "type": "Constant",
    },
    {
      "id": 3,
      "options": {
        "(telescope:camel)": "doc",
        "(telescope:name)": "doc",
        "(telescope:orig)": "doc",
      },
      "type": "string",
    },
  ],
  "_fieldsById": null,
  "_nestedArray": [],
  "_oneofsArray": [],
  "comment": "Identifier declaration which specifies its type and optional \`Expr\` value.

 An identifier without a value is a declaration that must be provided at
 evaluation time. An identifier with a value should resolve to a constant,
 but may be used in conjunction with other identifiers bound at evaluation
 time.",
  "extensions": undefined,
  "fields": {
    "doc": {
      "id": 3,
      "options": {
        "(telescope:camel)": "doc",
        "(telescope:name)": "doc",
        "(telescope:orig)": "doc",
      },
      "type": "string",
    },
    "type": {
      "id": 1,
      "options": {
        "(telescope:camel)": "type",
        "(telescope:name)": "type",
        "(telescope:orig)": "type",
      },
      "type": "Type",
    },
    "value": {
      "id": 2,
      "options": {
        "(telescope:camel)": "value",
        "(telescope:name)": "value",
        "(telescope:orig)": "value",
      },
      "type": "Constant",
    },
  },
  "filename": null,
  "group": undefined,
  "name": "IdentDecl",
  "nested": undefined,
  "oneofs": undefined,
  "options": undefined,
  "parent": {
    "fields": {
      "function": {
        "id": 3,
        "options": {
          "(telescope:camel)": "function",
          "(telescope:name)": "function",
          "(telescope:orig)": "function",
        },
        "type": "FunctionDecl",
      },
      "ident": {
        "id": 2,
        "options": {
          "(telescope:camel)": "ident",
          "(telescope:name)": "ident",
          "(telescope:orig)": "ident",
        },
        "type": "IdentDecl",
      },
      "name": {
        "id": 1,
        "options": {
          "(telescope:camel)": "name",
          "(telescope:name)": "name",
          "(telescope:orig)": "name",
        },
        "type": "string",
      },
    },
    "nested": {
      "FunctionDecl": {
        "fields": {
          "overloads": {
            "id": 1,
            "options": {
              "(telescope:camel)": "overloads",
              "(telescope:name)": "overloads",
              "(telescope:orig)": "overloads",
            },
            "rule": "repeated",
            "type": "Overload",
          },
        },
        "nested": {
          "Overload": {
            "fields": {
              "doc": {
                "id": 6,
                "options": {
                  "(telescope:camel)": "doc",
                  "(telescope:name)": "doc",
                  "(telescope:orig)": "doc",
                },
                "type": "string",
              },
              "isInstanceFunction": {
                "id": 5,
                "options": {
                  "(telescope:camel)": "isInstanceFunction",
                  "(telescope:name)": "isInstanceFunction",
                  "(telescope:orig)": "is_instance_function",
                },
                "type": "bool",
              },
              "overloadId": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "overloadId",
                  "(telescope:name)": "overloadId",
                  "(telescope:orig)": "overload_id",
                },
                "type": "string",
              },
              "params": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "params",
                  "(telescope:name)": "params",
                  "(telescope:orig)": "params",
                },
                "rule": "repeated",
                "type": "Type",
              },
              "resultType": {
                "id": 4,
                "options": {
                  "(telescope:camel)": "resultType",
                  "(telescope:name)": "resultType",
                  "(telescope:orig)": "result_type",
                },
                "type": "Type",
              },
              "typeParams": {
                "id": 3,
                "options": {
                  "(telescope:camel)": "typeParams",
                  "(telescope:name)": "typeParams",
                  "(telescope:orig)": "type_params",
                },
                "rule": "repeated",
                "type": "string",
              },
            },
          },
        },
      },
      "IdentDecl": {
        "fields": {
          "doc": {
            "id": 3,
            "options": {
              "(telescope:camel)": "doc",
              "(telescope:name)": "doc",
              "(telescope:orig)": "doc",
            },
            "type": "string",
          },
          "type": {
            "id": 1,
            "options": {
              "(telescope:camel)": "type",
              "(telescope:name)": "type",
              "(telescope:orig)": "type",
            },
            "type": "Type",
          },
          "value": {
            "id": 2,
            "options": {
              "(telescope:camel)": "value",
              "(telescope:name)": "value",
              "(telescope:orig)": "value",
            },
            "type": "Constant",
          },
        },
      },
    },
    "oneofs": {
      "declKind": {
        "oneof": [
          "ident",
          "function",
        ],
      },
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "google.api.expr.v1alpha1",
    "Decl",
  ],
}
`;

exports[`google/api/expr/v1alpha1/checked Overload 1`] = `
{
  "_ctor": null,
  "_fieldsArray": [
    {
      "id": 1,
      "options": {
        "(telescope:camel)": "overloadId",
        "(telescope:name)": "overloadId",
        "(telescope:orig)": "overload_id",
      },
      "type": "string",
    },
    {
      "id": 2,
      "options": {
        "(telescope:camel)": "params",
        "(telescope:name)": "params",
        "(telescope:orig)": "params",
      },
      "rule": "repeated",
      "type": "Type",
    },
    {
      "id": 3,
      "options": {
        "(telescope:camel)": "typeParams",
        "(telescope:name)": "typeParams",
        "(telescope:orig)": "type_params",
      },
      "rule": "repeated",
      "type": "string",
    },
    {
      "id": 4,
      "options": {
        "(telescope:camel)": "resultType",
        "(telescope:name)": "resultType",
        "(telescope:orig)": "result_type",
      },
      "type": "Type",
    },
    {
      "id": 5,
      "options": {
        "(telescope:camel)": "isInstanceFunction",
        "(telescope:name)": "isInstanceFunction",
        "(telescope:orig)": "is_instance_function",
      },
      "type": "bool",
    },
    {
      "id": 6,
      "options": {
        "(telescope:camel)": "doc",
        "(telescope:name)": "doc",
        "(telescope:orig)": "doc",
      },
      "type": "string",
    },
  ],
  "_fieldsById": null,
  "_nestedArray": [],
  "_oneofsArray": [],
  "comment": "An overload indicates a function's parameter types and return type, and
 may optionally include a function body described in terms of [Expr][google.api.expr.v1alpha1.Expr]
 values.

 Functions overloads are declared in either a function or method
 call-style. For methods, the \`params[0]\` is the expected type of the
 target receiver.

 Overloads must have non-overlapping argument types after erasure of all
 parameterized type variables (similar as type erasure in Java).",
  "extensions": undefined,
  "fields": {
    "doc": {
      "id": 6,
      "options": {
        "(telescope:camel)": "doc",
        "(telescope:name)": "doc",
        "(telescope:orig)": "doc",
      },
      "type": "string",
    },
    "isInstanceFunction": {
      "id": 5,
      "options": {
        "(telescope:camel)": "isInstanceFunction",
        "(telescope:name)": "isInstanceFunction",
        "(telescope:orig)": "is_instance_function",
      },
      "type": "bool",
    },
    "overloadId": {
      "id": 1,
      "options": {
        "(telescope:camel)": "overloadId",
        "(telescope:name)": "overloadId",
        "(telescope:orig)": "overload_id",
      },
      "type": "string",
    },
    "params": {
      "id": 2,
      "options": {
        "(telescope:camel)": "params",
        "(telescope:name)": "params",
        "(telescope:orig)": "params",
      },
      "rule": "repeated",
      "type": "Type",
    },
    "resultType": {
      "id": 4,
      "options": {
        "(telescope:camel)": "resultType",
        "(telescope:name)": "resultType",
        "(telescope:orig)": "result_type",
      },
      "type": "Type",
    },
    "typeParams": {
      "id": 3,
      "options": {
        "(telescope:camel)": "typeParams",
        "(telescope:name)": "typeParams",
        "(telescope:orig)": "type_params",
      },
      "rule": "repeated",
      "type": "string",
    },
  },
  "filename": null,
  "group": undefined,
  "name": "Overload",
  "nested": undefined,
  "oneofs": undefined,
  "options": undefined,
  "parent": {
    "fields": {
      "overloads": {
        "id": 1,
        "options": {
          "(telescope:camel)": "overloads",
          "(telescope:name)": "overloads",
          "(telescope:orig)": "overloads",
        },
        "rule": "repeated",
        "type": "Overload",
      },
    },
    "nested": {
      "Overload": {
        "fields": {
          "doc": {
            "id": 6,
            "options": {
              "(telescope:camel)": "doc",
              "(telescope:name)": "doc",
              "(telescope:orig)": "doc",
            },
            "type": "string",
          },
          "isInstanceFunction": {
            "id": 5,
            "options": {
              "(telescope:camel)": "isInstanceFunction",
              "(telescope:name)": "isInstanceFunction",
              "(telescope:orig)": "is_instance_function",
            },
            "type": "bool",
          },
          "overloadId": {
            "id": 1,
            "options": {
              "(telescope:camel)": "overloadId",
              "(telescope:name)": "overloadId",
              "(telescope:orig)": "overload_id",
            },
            "type": "string",
          },
          "params": {
            "id": 2,
            "options": {
              "(telescope:camel)": "params",
              "(telescope:name)": "params",
              "(telescope:orig)": "params",
            },
            "rule": "repeated",
            "type": "Type",
          },
          "resultType": {
            "id": 4,
            "options": {
              "(telescope:camel)": "resultType",
              "(telescope:name)": "resultType",
              "(telescope:orig)": "result_type",
            },
            "type": "Type",
          },
          "typeParams": {
            "id": 3,
            "options": {
              "(telescope:camel)": "typeParams",
              "(telescope:name)": "typeParams",
              "(telescope:orig)": "type_params",
            },
            "rule": "repeated",
            "type": "string",
          },
        },
      },
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "google.api.expr.v1alpha1",
    "Decl",
    "FunctionDecl",
  ],
}
`;

exports[`nested lookup 1`] = `
{
  "comment": "Severities of issues.",
  "comments": {
    "DEPRECATION": "Deprecation issue for statements and method that may no longer be
 supported or maintained.",
    "ERROR": "Errors such as: unmatched curly braces or variable redefinition.",
    "SEVERITY_UNSPECIFIED": "An unspecified severity.",
    "WARNING": "Warnings such as: unused variables.",
  },
  "filename": null,
  "name": "Severity",
  "options": undefined,
  "parent": {
    "fields": {
      "id": {
        "id": 3,
        "options": {
          "(telescope:camel)": "id",
          "(telescope:name)": "id",
          "(telescope:orig)": "id",
        },
        "type": "int64",
      },
      "position": {
        "id": 2,
        "options": {
          "(telescope:camel)": "position",
          "(telescope:name)": "position",
          "(telescope:orig)": "position",
        },
        "type": "google.api.expr.v1alpha1.SourcePosition",
      },
      "severity": {
        "id": 1,
        "options": {
          "(telescope:camel)": "severity",
          "(telescope:name)": "severity",
          "(telescope:orig)": "severity",
        },
        "type": "Severity",
      },
    },
    "nested": {
      "Severity": {
        "values": {
          "DEPRECATION": 1,
          "ERROR": 3,
          "SEVERITY_UNSPECIFIED": 0,
          "WARNING": 2,
        },
      },
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "google.api.expr.conformance.v1alpha1",
    "IssueDetails",
  ],
  "values": {
    "DEPRECATION": 1,
    "ERROR": 3,
    "SEVERITY_UNSPECIFIED": 0,
    "WARNING": 2,
  },
  "valuesById": {
    "0": "SEVERITY_UNSPECIFIED",
    "1": "DEPRECATION",
    "2": "WARNING",
    "3": "ERROR",
  },
}
`;

exports[`recursive nested lookup Data 1`] = `
{
  "Multi": {
    "fields": {
      "bitarray": {
        "id": 1,
        "options": {
          "(telescope:camel)": "bitarray",
          "(telescope:name)": "bitarray",
          "(telescope:orig)": "bitarray",
        },
        "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
      },
      "signatures": {
        "id": 2,
        "options": {
          "(telescope:camel)": "signatures",
          "(telescope:name)": "signatures",
          "(telescope:orig)": "signatures",
        },
        "rule": "repeated",
        "type": "Data",
      },
    },
  },
  "Single": {
    "fields": {
      "mode": {
        "id": 1,
        "options": {
          "(telescope:camel)": "mode",
          "(telescope:name)": "mode",
          "(telescope:orig)": "mode",
        },
        "type": "SignMode",
      },
      "signature": {
        "id": 2,
        "options": {
          "(telescope:camel)": "signature",
          "(telescope:name)": "signature",
          "(telescope:orig)": "signature",
        },
        "type": "bytes",
      },
    },
  },
  "_ctor": null,
  "_fieldsArray": [
    {
      "id": 1,
      "options": {
        "(telescope:camel)": "single",
        "(telescope:name)": "single",
        "(telescope:orig)": "single",
      },
      "type": "Single",
    },
    {
      "id": 2,
      "options": {
        "(telescope:camel)": "multi",
        "(telescope:name)": "multi",
        "(telescope:orig)": "multi",
      },
      "type": "Multi",
    },
  ],
  "_fieldsById": null,
  "_nestedArray": [
    {
      "fields": {
        "mode": {
          "id": 1,
          "options": {
            "(telescope:camel)": "mode",
            "(telescope:name)": "mode",
            "(telescope:orig)": "mode",
          },
          "type": "SignMode",
        },
        "signature": {
          "id": 2,
          "options": {
            "(telescope:camel)": "signature",
            "(telescope:name)": "signature",
            "(telescope:orig)": "signature",
          },
          "type": "bytes",
        },
      },
    },
    {
      "fields": {
        "bitarray": {
          "id": 1,
          "options": {
            "(telescope:camel)": "bitarray",
            "(telescope:name)": "bitarray",
            "(telescope:orig)": "bitarray",
          },
          "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
        },
        "signatures": {
          "id": 2,
          "options": {
            "(telescope:camel)": "signatures",
            "(telescope:name)": "signatures",
            "(telescope:orig)": "signatures",
          },
          "rule": "repeated",
          "type": "Data",
        },
      },
    },
  ],
  "_oneofsArray": [
    {
      "oneof": [
        "single",
        "multi",
      ],
    },
  ],
  "comment": "Data represents signature data",
  "extensions": undefined,
  "fields": {
    "multi": {
      "id": 2,
      "options": {
        "(telescope:camel)": "multi",
        "(telescope:name)": "multi",
        "(telescope:orig)": "multi",
      },
      "type": "Multi",
    },
    "single": {
      "id": 1,
      "options": {
        "(telescope:camel)": "single",
        "(telescope:name)": "single",
        "(telescope:orig)": "single",
      },
      "type": "Single",
    },
  },
  "filename": null,
  "group": undefined,
  "name": "Data",
  "nested": {
    "Multi": {
      "fields": {
        "bitarray": {
          "id": 1,
          "options": {
            "(telescope:camel)": "bitarray",
            "(telescope:name)": "bitarray",
            "(telescope:orig)": "bitarray",
          },
          "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
        },
        "signatures": {
          "id": 2,
          "options": {
            "(telescope:camel)": "signatures",
            "(telescope:name)": "signatures",
            "(telescope:orig)": "signatures",
          },
          "rule": "repeated",
          "type": "Data",
        },
      },
    },
    "Single": {
      "fields": {
        "mode": {
          "id": 1,
          "options": {
            "(telescope:camel)": "mode",
            "(telescope:name)": "mode",
            "(telescope:orig)": "mode",
          },
          "type": "SignMode",
        },
        "signature": {
          "id": 2,
          "options": {
            "(telescope:camel)": "signature",
            "(telescope:name)": "signature",
            "(telescope:orig)": "signature",
          },
          "type": "bytes",
        },
      },
    },
  },
  "oneofs": {
    "sum": {
      "oneof": [
        "single",
        "multi",
      ],
    },
  },
  "options": undefined,
  "parent": {
    "fields": {
      "data": {
        "id": 2,
        "options": {
          "(telescope:camel)": "data",
          "(telescope:name)": "data",
          "(telescope:orig)": "data",
        },
        "type": "Data",
      },
      "publicKey": {
        "id": 1,
        "options": {
          "(telescope:camel)": "publicKey",
          "(telescope:name)": "publicKey",
          "(telescope:orig)": "public_key",
        },
        "type": "google.protobuf.Any",
      },
      "sequence": {
        "id": 3,
        "options": {
          "(telescope:camel)": "sequence",
          "(telescope:name)": "sequence",
          "(telescope:orig)": "sequence",
        },
        "type": "uint64",
      },
    },
    "nested": {
      "Data": {
        "fields": {
          "multi": {
            "id": 2,
            "options": {
              "(telescope:camel)": "multi",
              "(telescope:name)": "multi",
              "(telescope:orig)": "multi",
            },
            "type": "Multi",
          },
          "single": {
            "id": 1,
            "options": {
              "(telescope:camel)": "single",
              "(telescope:name)": "single",
              "(telescope:orig)": "single",
            },
            "type": "Single",
          },
        },
        "nested": {
          "Multi": {
            "fields": {
              "bitarray": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "bitarray",
                  "(telescope:name)": "bitarray",
                  "(telescope:orig)": "bitarray",
                },
                "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
              },
              "signatures": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "signatures",
                  "(telescope:name)": "signatures",
                  "(telescope:orig)": "signatures",
                },
                "rule": "repeated",
                "type": "Data",
              },
            },
          },
          "Single": {
            "fields": {
              "mode": {
                "id": 1,
                "options": {
                  "(telescope:camel)": "mode",
                  "(telescope:name)": "mode",
                  "(telescope:orig)": "mode",
                },
                "type": "SignMode",
              },
              "signature": {
                "id": 2,
                "options": {
                  "(telescope:camel)": "signature",
                  "(telescope:name)": "signature",
                  "(telescope:orig)": "signature",
                },
                "type": "bytes",
              },
            },
          },
        },
        "oneofs": {
          "sum": {
            "oneof": [
              "single",
              "multi",
            ],
          },
        },
      },
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "cosmos.tx.signing.v1beta1",
    "SignatureDescriptor",
  ],
}
`;

exports[`recursive nested lookup Data 2`] = `
[
  "cosmos.tx.signing.v1beta1",
  "SignatureDescriptor",
]
`;

exports[`recursive nested lookup Multi 1`] = `
{
  "_ctor": null,
  "_fieldsArray": null,
  "_fieldsById": null,
  "_nestedArray": [],
  "_oneofsArray": null,
  "comment": "Multi is the signature data for a multisig public key",
  "extensions": undefined,
  "fields": {
    "bitarray": {
      "id": 1,
      "options": {
        "(telescope:camel)": "bitarray",
        "(telescope:name)": "bitarray",
        "(telescope:orig)": "bitarray",
      },
      "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
    },
    "signatures": {
      "id": 2,
      "options": {
        "(telescope:camel)": "signatures",
        "(telescope:name)": "signatures",
        "(telescope:orig)": "signatures",
      },
      "rule": "repeated",
      "type": "Data",
    },
  },
  "filename": null,
  "group": undefined,
  "name": "Multi",
  "nested": undefined,
  "oneofs": undefined,
  "options": undefined,
  "parent": {
    "fields": {
      "multi": {
        "id": 2,
        "options": {
          "(telescope:camel)": "multi",
          "(telescope:name)": "multi",
          "(telescope:orig)": "multi",
        },
        "type": "Multi",
      },
      "single": {
        "id": 1,
        "options": {
          "(telescope:camel)": "single",
          "(telescope:name)": "single",
          "(telescope:orig)": "single",
        },
        "type": "Single",
      },
    },
    "nested": {
      "Multi": {
        "fields": {
          "bitarray": {
            "id": 1,
            "options": {
              "(telescope:camel)": "bitarray",
              "(telescope:name)": "bitarray",
              "(telescope:orig)": "bitarray",
            },
            "type": "cosmos.crypto.multisig.v1beta1.CompactBitArray",
          },
          "signatures": {
            "id": 2,
            "options": {
              "(telescope:camel)": "signatures",
              "(telescope:name)": "signatures",
              "(telescope:orig)": "signatures",
            },
            "rule": "repeated",
            "type": "Data",
          },
        },
      },
      "Single": {
        "fields": {
          "mode": {
            "id": 1,
            "options": {
              "(telescope:camel)": "mode",
              "(telescope:name)": "mode",
              "(telescope:orig)": "mode",
            },
            "type": "SignMode",
          },
          "signature": {
            "id": 2,
            "options": {
              "(telescope:camel)": "signature",
              "(telescope:name)": "signature",
              "(telescope:orig)": "signature",
            },
            "type": "bytes",
          },
        },
      },
    },
    "oneofs": {
      "sum": {
        "oneof": [
          "single",
          "multi",
        ],
      },
    },
  },
  "parsedOptions": null,
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "cosmos.tx.signing.v1beta1",
    "SignatureDescriptor",
    "Data",
  ],
}
`;

exports[`recursive nested lookup Multi 2`] = `
[
  "cosmos.tx.signing.v1beta1",
  "SignatureDescriptor",
  "Data",
]
`;

exports[`top-level lookup 1`] = `
{
  "comment": "VoteOption enumerates the valid vote options for a given governance proposal.",
  "comments": {
    "VOTE_OPTION_ABSTAIN": "VOTE_OPTION_ABSTAIN defines an abstain vote option.",
    "VOTE_OPTION_NO": "VOTE_OPTION_NO defines a no vote option.",
    "VOTE_OPTION_NO_WITH_VETO": "VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.",
    "VOTE_OPTION_UNSPECIFIED": "VOTE_OPTION_UNSPECIFIED defines a no-op vote option.",
    "VOTE_OPTION_YES": "VOTE_OPTION_YES defines a yes vote option.",
  },
  "filename": null,
  "name": "VoteOption",
  "options": {
    "(gogoproto.goproto_enum_prefix)": false,
  },
  "parent": {
    "nested": {
      "Deposit": {
        "fields": {
          "amount": {
            "id": 3,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "amount",
              "(telescope:name)": "amount",
              "(telescope:orig)": "amount",
            },
            "rule": "repeated",
            "type": "cosmos.base.v1beta1.Coin",
          },
          "depositor": {
            "id": 2,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "depositor",
              "(telescope:name)": "depositor",
              "(telescope:orig)": "depositor",
            },
            "type": "string",
          },
          "proposalId": {
            "id": 1,
            "options": {
              "(telescope:camel)": "proposalId",
              "(telescope:name)": "proposalId",
              "(telescope:orig)": "proposal_id",
            },
            "type": "uint64",
          },
        },
        "options": {
          "(gogoproto.equal)": false,
          "(gogoproto.goproto_getters)": false,
        },
      },
      "DepositParams": {
        "fields": {
          "maxDepositPeriod": {
            "id": 2,
            "options": {
              "(gogoproto.jsontag)": "max_deposit_period,omitempty",
              "(gogoproto.nullable)": false,
              "(gogoproto.stdduration)": true,
              "(telescope:camel)": "maxDepositPeriod",
              "(telescope:name)": "maxDepositPeriod",
              "(telescope:orig)": "max_deposit_period",
            },
            "type": "google.protobuf.Duration",
          },
          "minDeposit": {
            "id": 1,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.jsontag)": "min_deposit,omitempty",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "minDeposit",
              "(telescope:name)": "minDeposit",
              "(telescope:orig)": "min_deposit",
            },
            "rule": "repeated",
            "type": "cosmos.base.v1beta1.Coin",
          },
        },
      },
      "Proposal": {
        "fields": {
          "content": {
            "id": 2,
            "options": {
              "(cosmos_proto.accepts_interface)": "Content",
              "(telescope:camel)": "content",
              "(telescope:name)": "content",
              "(telescope:orig)": "content",
            },
            "type": "google.protobuf.Any",
          },
          "depositEndTime": {
            "id": 6,
            "options": {
              "(gogoproto.nullable)": false,
              "(gogoproto.stdtime)": true,
              "(telescope:camel)": "depositEndTime",
              "(telescope:name)": "depositEndTime",
              "(telescope:orig)": "deposit_end_time",
            },
            "type": "google.protobuf.Timestamp",
          },
          "finalTallyResult": {
            "id": 4,
            "options": {
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "finalTallyResult",
              "(telescope:name)": "finalTallyResult",
              "(telescope:orig)": "final_tally_result",
            },
            "type": "TallyResult",
          },
          "proposalId": {
            "id": 1,
            "options": {
              "(telescope:camel)": "proposalId",
              "(telescope:name)": "proposalId",
              "(telescope:orig)": "proposal_id",
            },
            "type": "uint64",
          },
          "status": {
            "id": 3,
            "options": {
              "(telescope:camel)": "status",
              "(telescope:name)": "status",
              "(telescope:orig)": "status",
            },
            "type": "ProposalStatus",
          },
          "submitTime": {
            "id": 5,
            "options": {
              "(gogoproto.nullable)": false,
              "(gogoproto.stdtime)": true,
              "(telescope:camel)": "submitTime",
              "(telescope:name)": "submitTime",
              "(telescope:orig)": "submit_time",
            },
            "type": "google.protobuf.Timestamp",
          },
          "totalDeposit": {
            "id": 7,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "totalDeposit",
              "(telescope:name)": "totalDeposit",
              "(telescope:orig)": "total_deposit",
            },
            "rule": "repeated",
            "type": "cosmos.base.v1beta1.Coin",
          },
          "votingEndTime": {
            "id": 9,
            "options": {
              "(gogoproto.nullable)": false,
              "(gogoproto.stdtime)": true,
              "(telescope:camel)": "votingEndTime",
              "(telescope:name)": "votingEndTime",
              "(telescope:orig)": "voting_end_time",
            },
            "type": "google.protobuf.Timestamp",
          },
          "votingStartTime": {
            "id": 8,
            "options": {
              "(gogoproto.nullable)": false,
              "(gogoproto.stdtime)": true,
              "(telescope:camel)": "votingStartTime",
              "(telescope:name)": "votingStartTime",
              "(telescope:orig)": "voting_start_time",
            },
            "type": "google.protobuf.Timestamp",
          },
        },
        "options": {
          "(gogoproto.equal)": true,
        },
      },
      "ProposalStatus": {
        "options": {
          "(gogoproto.goproto_enum_prefix)": false,
        },
        "values": {
          "PROPOSAL_STATUS_DEPOSIT_PERIOD": 1,
          "PROPOSAL_STATUS_FAILED": 5,
          "PROPOSAL_STATUS_PASSED": 3,
          "PROPOSAL_STATUS_REJECTED": 4,
          "PROPOSAL_STATUS_UNSPECIFIED": 0,
          "PROPOSAL_STATUS_VOTING_PERIOD": 2,
        },
      },
      "TallyParams": {
        "fields": {
          "quorum": {
            "id": 1,
            "options": {
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
              "(gogoproto.jsontag)": "quorum,omitempty",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "quorum",
              "(telescope:name)": "quorum",
              "(telescope:orig)": "quorum",
            },
            "type": "bytes",
          },
          "threshold": {
            "id": 2,
            "options": {
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
              "(gogoproto.jsontag)": "threshold,omitempty",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "threshold",
              "(telescope:name)": "threshold",
              "(telescope:orig)": "threshold",
            },
            "type": "bytes",
          },
          "vetoThreshold": {
            "id": 3,
            "options": {
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
              "(gogoproto.jsontag)": "veto_threshold,omitempty",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "vetoThreshold",
              "(telescope:name)": "vetoThreshold",
              "(telescope:orig)": "veto_threshold",
            },
            "type": "bytes",
          },
        },
      },
      "TallyResult": {
        "fields": {
          "abstain": {
            "id": 2,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.Int",
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "abstain",
              "(telescope:name)": "abstain",
              "(telescope:orig)": "abstain",
            },
            "type": "string",
          },
          "no": {
            "id": 3,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.Int",
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "no",
              "(telescope:name)": "no",
              "(telescope:orig)": "no",
            },
            "type": "string",
          },
          "noWithVeto": {
            "id": 4,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.Int",
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "noWithVeto",
              "(telescope:name)": "noWithVeto",
              "(telescope:orig)": "no_with_veto",
            },
            "type": "string",
          },
          "yes": {
            "id": 1,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.Int",
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "yes",
              "(telescope:name)": "yes",
              "(telescope:orig)": "yes",
            },
            "type": "string",
          },
        },
        "options": {
          "(gogoproto.equal)": true,
        },
      },
      "TextProposal": {
        "fields": {
          "description": {
            "id": 2,
            "options": {
              "(telescope:camel)": "description",
              "(telescope:name)": "description",
              "(telescope:orig)": "description",
            },
            "type": "string",
          },
          "title": {
            "id": 1,
            "options": {
              "(telescope:camel)": "title",
              "(telescope:name)": "title",
              "(telescope:orig)": "title",
            },
            "type": "string",
          },
        },
        "options": {
          "(cosmos_proto.implements_interface)": "Content",
          "(gogoproto.equal)": true,
        },
      },
      "Vote": {
        "fields": {
          "option": {
            "id": 3,
            "options": {
              "(telescope:camel)": "option",
              "(telescope:name)": "option",
              "(telescope:orig)": "option",
              "deprecated": true,
            },
            "type": "VoteOption",
          },
          "options": {
            "id": 4,
            "options": {
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "options",
              "(telescope:name)": "options",
              "(telescope:orig)": "options",
            },
            "rule": "repeated",
            "type": "WeightedVoteOption",
          },
          "proposalId": {
            "id": 1,
            "options": {
              "(gogoproto.jsontag)": "id",
              "(telescope:camel)": "proposalId",
              "(telescope:name)": "proposalId",
              "(telescope:orig)": "proposal_id",
            },
            "type": "uint64",
          },
          "voter": {
            "id": 2,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "voter",
              "(telescope:name)": "voter",
              "(telescope:orig)": "voter",
            },
            "type": "string",
          },
        },
        "options": {
          "(gogoproto.equal)": false,
          "(gogoproto.goproto_stringer)": false,
        },
      },
      "VoteOption": {
        "options": {
          "(gogoproto.goproto_enum_prefix)": false,
        },
        "values": {
          "VOTE_OPTION_ABSTAIN": 2,
          "VOTE_OPTION_NO": 3,
          "VOTE_OPTION_NO_WITH_VETO": 4,
          "VOTE_OPTION_UNSPECIFIED": 0,
          "VOTE_OPTION_YES": 1,
        },
      },
      "VotingParams": {
        "fields": {
          "votingPeriod": {
            "id": 1,
            "options": {
              "(gogoproto.jsontag)": "voting_period,omitempty",
              "(gogoproto.nullable)": false,
              "(gogoproto.stdduration)": true,
              "(telescope:camel)": "votingPeriod",
              "(telescope:name)": "votingPeriod",
              "(telescope:orig)": "voting_period",
            },
            "type": "google.protobuf.Duration",
          },
        },
      },
      "WeightedVoteOption": {
        "fields": {
          "option": {
            "id": 1,
            "options": {
              "(telescope:camel)": "option",
              "(telescope:name)": "option",
              "(telescope:orig)": "option",
            },
            "type": "VoteOption",
          },
          "weight": {
            "id": 2,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.Dec",
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "weight",
              "(telescope:name)": "weight",
              "(telescope:orig)": "weight",
            },
            "type": "string",
          },
        },
      },
    },
    "options": {
      "(gogoproto.goproto_getters_all)": false,
      "(gogoproto.goproto_stringer_all)": false,
      "(gogoproto.stringer_all)": false,
      "go_package": "github.com/cosmos/cosmos-sdk/x/gov/types/v1beta1",
    },
  },
  "parsedOptions": [
    {
      "(gogoproto.goproto_enum_prefix)": false,
    },
  ],
  "reserved": undefined,
  "resolved": false,
  "scope": [
    "cosmos.gov.v1beta1",
  ],
  "values": {
    "VOTE_OPTION_ABSTAIN": 2,
    "VOTE_OPTION_NO": 3,
    "VOTE_OPTION_NO_WITH_VETO": 4,
    "VOTE_OPTION_UNSPECIFIED": 0,
    "VOTE_OPTION_YES": 1,
  },
  "valuesById": {
    "0": "VOTE_OPTION_UNSPECIFIED",
    "1": "VOTE_OPTION_YES",
    "2": "VOTE_OPTION_ABSTAIN",
    "3": "VOTE_OPTION_NO",
    "4": "VOTE_OPTION_NO_WITH_VETO",
  },
}
`;
