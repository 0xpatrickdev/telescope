// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`nested google/api/expr/v1alpha1/checked 1`] = `
Object {
  "imports": Array [
    "google/api/expr/v1alpha1/syntax.proto",
    "google/protobuf/empty.proto",
    "google/protobuf/struct.proto",
  ],
  "package": "google.api.expr.v1alpha1",
  "parsedImports": Object {
    "google/api/expr/v1alpha1/syntax.proto": Array [
      "SourceInfo",
      "Expr",
      "Constant",
    ],
    "google/protobuf/empty.proto": Array [
      "Empty",
    ],
    "google/protobuf/struct.proto": Array [
      "NullValue",
    ],
  },
  "root": Object {
    "nested": Object {
      "google": Object {
        "nested": Object {
          "api": Object {
            "nested": Object {
              "expr": Object {
                "nested": Object {
                  "v1alpha1": Object {
                    "nested": Object {
                      "CheckedExpr": Object {
                        "fields": Object {
                          "expr": Object {
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Expr",
                            "parsedType": Object {
                              "name": "Expr",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Expr",
                          },
                          "exprVersion": Object {
                            "id": 6,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "referenceMap": Object {
                            "id": 2,
                            "keyType": "int64",
                            "parsedType": Object {
                              "name": "Reference",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Reference",
                          },
                          "sourceInfo": Object {
                            "id": 5,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "SourceInfo",
                            "parsedType": Object {
                              "name": "SourceInfo",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "SourceInfo",
                          },
                          "typeMap": Object {
                            "id": 3,
                            "keyType": "int64",
                            "parsedType": Object {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                        },
                        "name": "CheckedExpr",
                        "nested": null,
                        "options": undefined,
                        "type": "Type",
                      },
                      "Decl": Object {
                        "fields": Object {
                          "function": Object {
                            "id": 3,
                            "parsedType": Object {
                              "name": "FunctionDecl",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "FunctionDecl",
                          },
                          "ident": Object {
                            "id": 2,
                            "parsedType": Object {
                              "name": "IdentDecl",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "IdentDecl",
                          },
                          "name": Object {
                            "id": 1,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "name": "Decl",
                        "nested": Object {
                          "FunctionDecl": Object {
                            "fields": Object {
                              "overloads": Object {
                                "id": 1,
                                "parsedType": Object {
                                  "name": "Overload",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                  "Decl",
                                  "FunctionDecl",
                                ],
                                "type": "Overload",
                              },
                            },
                            "name": "FunctionDecl",
                            "nested": Object {
                              "Overload": Object {
                                "fields": Object {
                                  "doc": Object {
                                    "id": 6,
                                    "isScalar": true,
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "isInstanceFunction": Object {
                                    "id": 5,
                                    "isScalar": true,
                                    "parsedType": Object {
                                      "name": "bool",
                                      "type": "native",
                                    },
                                    "type": "bool",
                                    "typeNum": 12,
                                  },
                                  "overloadId": Object {
                                    "id": 1,
                                    "isScalar": true,
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "params": Object {
                                    "id": 2,
                                    "parsedType": Object {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "rule": "repeated",
                                    "scope": Array [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "resultType": Object {
                                    "id": 4,
                                    "parsedType": Object {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "scope": Array [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "typeParams": Object {
                                    "id": 3,
                                    "isScalar": true,
                                    "parsedType": Object {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "rule": "repeated",
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                },
                                "name": "Overload",
                                "nested": null,
                                "options": undefined,
                                "type": "Type",
                              },
                            },
                            "options": undefined,
                            "type": "Type",
                          },
                          "IdentDecl": Object {
                            "fields": Object {
                              "doc": Object {
                                "id": 3,
                                "isScalar": true,
                                "parsedType": Object {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "type": Object {
                                "id": 1,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "value": Object {
                                "id": 2,
                                "import": "google/api/expr/v1alpha1/syntax.proto",
                                "importedName": "Constant",
                                "parsedType": Object {
                                  "name": "Constant",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  Array [
                                    "google.api.expr.v1alpha1",
                                  ],
                                ],
                                "scopeType": "import",
                                "type": "Constant",
                              },
                            },
                            "name": "IdentDecl",
                            "nested": null,
                            "options": undefined,
                            "type": "Type",
                          },
                        },
                        "options": undefined,
                        "type": "Type",
                      },
                      "Reference": Object {
                        "fields": Object {
                          "name": Object {
                            "id": 1,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "overloadId": Object {
                            "id": 3,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "rule": "repeated",
                            "type": "string",
                            "typeNum": 13,
                          },
                          "value": Object {
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Constant",
                            "parsedType": Object {
                              "name": "Constant",
                              "type": "Type",
                            },
                            "scope": Array [
                              Array [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Constant",
                          },
                        },
                        "name": "Reference",
                        "nested": null,
                        "options": undefined,
                        "type": "Type",
                      },
                      "Type": Object {
                        "fields": Object {
                          "abstractType": Object {
                            "id": 14,
                            "parsedType": Object {
                              "name": "AbstractType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "AbstractType",
                          },
                          "dyn": Object {
                            "id": 1,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "parsedType": Object {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "error": Object {
                            "id": 12,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "parsedType": Object {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "function": Object {
                            "id": 8,
                            "parsedType": Object {
                              "name": "FunctionType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "FunctionType",
                          },
                          "listType": Object {
                            "id": 6,
                            "parsedType": Object {
                              "name": "ListType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "ListType",
                          },
                          "mapType": Object {
                            "id": 7,
                            "parsedType": Object {
                              "name": "MapType",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "MapType",
                          },
                          "messageType": Object {
                            "id": 9,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "null": Object {
                            "id": 2,
                            "import": "google/protobuf/struct.proto",
                            "importedName": "google.protobuf.NullValue",
                            "parsedType": Object {
                              "name": "NullValue",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.NullValue",
                          },
                          "primitive": Object {
                            "id": 3,
                            "parsedType": Object {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                          "type": Object {
                            "id": 11,
                            "parsedType": Object {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                          "typeParam": Object {
                            "id": 10,
                            "isScalar": true,
                            "parsedType": Object {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "wellKnown": Object {
                            "id": 5,
                            "parsedType": Object {
                              "name": "WellKnownType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "WellKnownType",
                          },
                          "wrapper": Object {
                            "id": 4,
                            "parsedType": Object {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": Array [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                        },
                        "name": "Type",
                        "nested": Object {
                          "AbstractType": Object {
                            "fields": Object {
                              "name": Object {
                                "id": 1,
                                "isScalar": true,
                                "parsedType": Object {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "parameterTypes": Object {
                                "id": 2,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "name": "AbstractType",
                            "nested": null,
                            "options": undefined,
                            "type": "Type",
                          },
                          "FunctionType": Object {
                            "fields": Object {
                              "argTypes": Object {
                                "id": 2,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "resultType": Object {
                                "id": 1,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "name": "FunctionType",
                            "nested": null,
                            "options": undefined,
                            "type": "Type",
                          },
                          "ListType": Object {
                            "fields": Object {
                              "elemType": Object {
                                "id": 1,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "name": "ListType",
                            "nested": null,
                            "options": undefined,
                            "type": "Type",
                          },
                          "MapType": Object {
                            "fields": Object {
                              "keyType": Object {
                                "id": 1,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "valueType": Object {
                                "id": 2,
                                "parsedType": Object {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": Array [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "name": "MapType",
                            "nested": null,
                            "options": undefined,
                            "type": "Type",
                          },
                          "PrimitiveType": Object {
                            "comments": Object {
                              "BOOL": "Boolean type.",
                              "BYTES": "Bytes type.",
                              "DOUBLE": "Double type.

Proto-based float values are widened to double values.",
                              "INT64": "Int64 type.

Proto-based integer values are widened to int64.",
                              "PRIMITIVE_TYPE_UNSPECIFIED": "Unspecified type.",
                              "STRING": "String type.",
                              "UINT64": "Uint64 type.

Proto-based unsigned integer values are widened to uint64.",
                            },
                            "name": "PrimitiveType",
                            "type": "Enum",
                            "values": Object {
                              "0": "PRIMITIVE_TYPE_UNSPECIFIED",
                              "1": "BOOL",
                              "2": "INT64",
                              "3": "UINT64",
                              "4": "DOUBLE",
                              "5": "STRING",
                              "6": "BYTES",
                              "BOOL": 1,
                              "BYTES": 6,
                              "DOUBLE": 4,
                              "INT64": 2,
                              "PRIMITIVE_TYPE_UNSPECIFIED": 0,
                              "STRING": 5,
                              "UINT64": 3,
                            },
                          },
                          "WellKnownType": Object {
                            "comments": Object {
                              "ANY": "Well-known protobuf.Any type.

Any types are a polymorphic message type. During type-checking they are
treated like \`DYN\` types, but at runtime they are resolved to a specific
message type specified at evaluation time.",
                              "DURATION": "Well-known protobuf.Duration type, internally referenced as \`duration\`.",
                              "TIMESTAMP": "Well-known protobuf.Timestamp type, internally referenced as \`timestamp\`.",
                              "WELL_KNOWN_TYPE_UNSPECIFIED": "Unspecified type.",
                            },
                            "name": "WellKnownType",
                            "type": "Enum",
                            "values": Object {
                              "0": "WELL_KNOWN_TYPE_UNSPECIFIED",
                              "1": "ANY",
                              "2": "TIMESTAMP",
                              "3": "DURATION",
                              "ANY": 1,
                              "DURATION": 3,
                              "TIMESTAMP": 2,
                              "WELL_KNOWN_TYPE_UNSPECIFIED": 0,
                            },
                          },
                        },
                        "options": undefined,
                        "type": "Type",
                      },
                    },
                    "type": "Namespace",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`nested google/api/expr/v1alpha1/checked 2`] = `
"export interface CheckedExpr {
  referenceMap: {
    [key: Long]: Reference;
  };
  typeMap: {
    [key: Long]: Type;
  };
  sourceInfo: SourceInfo;
  exprVersion: string;
  expr: Expr;
}

function createBaseCheckedExpr(): CheckedExpr {
  return {
    referenceMap: undefined,
    typeMap: undefined,
    sourceInfo: undefined,
    exprVersion: \\"\\",
    expr: undefined
  };
}

export const CheckedExpr = {
  encode(message: CheckedExpr, writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.referenceMap).forEach(([key, value]) => {
      CheckedExpr_ReferenceMapEntry.encode({
        key: (key as any),
        value
      }, writer.uint32(18).fork()).ldelim();
    });
    Object.entries(message.typeMap).forEach(([key, value]) => {
      CheckedExpr_TypeMapEntry.encode({
        key: (key as any),
        value
      }, writer.uint32(26).fork()).ldelim();
    });

    if (message.sourceInfo !== undefined) {
      SourceInfo.encode(message.sourceInfo, writer.uint32(42).fork()).ldelim();
    }

    if (message.exprVersion !== \\"\\") {
      writer.uint32(50).string(message.exprVersion);
    }

    if (message.expr !== undefined) {
      Expr.encode(message.expr, writer.uint32(34).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): CheckedExpr {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckedExpr();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 2:
          const entry123 = CheckedExpr_ReferenceMapEntry.decode(reader, reader.uint32());

          if (entry123.value !== undefined) {
            message.labels[entry123.key] = entry123.value;
          }

          break;

        case 3:
          const entry123 = CheckedExpr_TypeMapEntry.decode(reader, reader.uint32());

          if (entry123.value !== undefined) {
            message.labels[entry123.key] = entry123.value;
          }

          break;

        case 5:
          message.sourceInfo = SourceInfo.decode(reader, reader.uint32());
          break;

        case 6:
          message.exprVersion = reader.string();
          break;

        case 4:
          message.expr = Expr.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): CheckedExpr {
    return {
      referenceMap: isObject(object.referenceMap) ? Object.entries(object.referenceMap).reduce<{
        [key: Long]: Reference;
      }>((acc, [key, value]) => {
        acc[Number(key)] = Reference.fromJSON(value);
        return acc;
      }, {}) : {},
      typeMap: isObject(object.typeMap) ? Object.entries(object.typeMap).reduce<{
        [key: Long]: Type;
      }>((acc, [key, value]) => {
        acc[Number(key)] = Type.fromJSON(value);
        return acc;
      }, {}) : {},
      sourceInfo: isSet(object.sourceInfo) ? SourceInfo.fromJSON(object.sourceInfo) : undefined,
      exprVersion: isSet(object.exprVersion) ? String(object.exprVersion) : \\"\\",
      expr: isSet(object.expr) ? Expr.fromJSON(object.expr) : undefined
    };
  },

  toJSON(message: CheckedExpr): unknown {
    const obj: any = {};
    obj.referenceMap = {};

    if (message.referenceMap) {
      Object.entries(message.labels).forEach(([k, v]) => {
        obj.referenceMap[k] = Reference.toJSON(v);
      });
    }

    obj.typeMap = {};

    if (message.typeMap) {
      Object.entries(message.labels).forEach(([k, v]) => {
        obj.typeMap[k] = Type.toJSON(v);
      });
    }

    message.sourceInfo !== undefined && (obj.sourceInfo = message.sourceInfo ? SourceInfo.toJSON(message.sourceInfo) : undefined);
    message.exprVersion !== undefined && (obj.exprVersion = message.exprVersion);
    message.expr !== undefined && (obj.expr = message.expr ? Expr.toJSON(message.expr) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<CheckedExpr>, I>>(object: I): CheckedExpr {
    const message = createBaseCheckedExpr();
    message.labels = Object.entries(object.referenceMap ?? {}).reduce<{
      [key: Long]: Reference;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[Number(key)] = Reference.fromPartial(value);
      }

      return acc;
    }, {});
    message.labels = Object.entries(object.typeMap ?? {}).reduce<{
      [key: Long]: Type;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[Number(key)] = Type.fromPartial(value);
      }

      return acc;
    }, {});
    message.sourceInfo = object.sourceInfo !== undefined && object.sourceInfo !== null ? SourceInfo.fromPartial(object.sourceInfo) : undefined;
    message.exprVersion = object.exprVersion ?? \\"\\";
    message.expr = object.expr !== undefined && object.expr !== null ? Expr.fromPartial(object.expr) : undefined;
    return message;
  }

};
export interface Type_ListType {
  elemType: Type;
}

function createBaseType_ListType(): Type_ListType {
  return {
    elemType: undefined
  };
}

export const Type_ListType = {
  encode(message: Type_ListType, writer = _m0.Writer.create()): _m0.Writer {
    if (message.elemType !== undefined) {
      Type.encode(message.elemType, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Type_ListType {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_ListType();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.elemType = Type.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Type_ListType {
    return {
      elemType: isSet(object.elemType) ? Type.fromJSON(object.elemType) : undefined
    };
  },

  toJSON(message: Type_ListType): unknown {
    const obj: any = {};
    message.elemType !== undefined && (obj.elemType = message.elemType ? Type.toJSON(message.elemType) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Type_ListType>, I>>(object: I): Type_ListType {
    const message = createBaseType_ListType();
    message.elemType = object.elemType !== undefined && object.elemType !== null ? Type.fromPartial(object.elemType) : undefined;
    return message;
  }

};
export interface Type_MapType {
  keyType: Type;
  valueType: Type;
}

function createBaseType_MapType(): Type_MapType {
  return {
    keyType: undefined,
    valueType: undefined
  };
}

export const Type_MapType = {
  encode(message: Type_MapType, writer = _m0.Writer.create()): _m0.Writer {
    if (message.keyType !== undefined) {
      Type.encode(message.keyType, writer.uint32(10).fork()).ldelim();
    }

    if (message.valueType !== undefined) {
      Type.encode(message.valueType, writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Type_MapType {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_MapType();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.keyType = Type.decode(reader, reader.uint32());
          break;

        case 2:
          message.valueType = Type.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Type_MapType {
    return {
      keyType: isSet(object.keyType) ? Type.fromJSON(object.keyType) : undefined,
      valueType: isSet(object.valueType) ? Type.fromJSON(object.valueType) : undefined
    };
  },

  toJSON(message: Type_MapType): unknown {
    const obj: any = {};
    message.keyType !== undefined && (obj.keyType = message.keyType ? Type.toJSON(message.keyType) : undefined);
    message.valueType !== undefined && (obj.valueType = message.valueType ? Type.toJSON(message.valueType) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Type_MapType>, I>>(object: I): Type_MapType {
    const message = createBaseType_MapType();
    message.keyType = object.keyType !== undefined && object.keyType !== null ? Type.fromPartial(object.keyType) : undefined;
    message.valueType = object.valueType !== undefined && object.valueType !== null ? Type.fromPartial(object.valueType) : undefined;
    return message;
  }

};
export interface Type_FunctionType {
  resultType: Type;
  argTypes: Type[];
}

function createBaseType_FunctionType(): Type_FunctionType {
  return {
    resultType: undefined,
    argTypes: []
  };
}

export const Type_FunctionType = {
  encode(message: Type_FunctionType, writer = _m0.Writer.create()): _m0.Writer {
    if (message.resultType !== undefined) {
      Type.encode(message.resultType, writer.uint32(10).fork()).ldelim();
    }

    for (const v of message.argTypes) {
      Type.encode(v!, writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Type_FunctionType {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_FunctionType();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.resultType = Type.decode(reader, reader.uint32());
          break;

        case 2:
          message.argTypes.push(Type.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Type_FunctionType {
    return {
      resultType: isSet(object.resultType) ? Type.fromJSON(object.resultType) : undefined,
      argTypes: Array.isArray(object?.argTypes) ? object.argTypes.map((e: any) => Type.fromJSON(e)) : []
    };
  },

  toJSON(message: Type_FunctionType): unknown {
    const obj: any = {};
    message.resultType !== undefined && (obj.resultType = message.resultType ? Type.toJSON(message.resultType) : undefined);

    if (message.argTypes) {
      obj.argTypes = message.argTypes.map(e => e ? Type.toJSON(e) : undefined);
    } else {
      obj.argTypes = [];
    }

    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Type_FunctionType>, I>>(object: I): Type_FunctionType {
    const message = createBaseType_FunctionType();
    message.resultType = object.resultType !== undefined && object.resultType !== null ? Type.fromPartial(object.resultType) : undefined;
    message.argTypes = object.argTypes?.map(e => Type.fromPartial(e)) || [];
    return message;
  }

};
export interface Type_AbstractType {
  name: string;
  parameterTypes: Type[];
}

function createBaseType_AbstractType(): Type_AbstractType {
  return {
    name: \\"\\",
    parameterTypes: []
  };
}

export const Type_AbstractType = {
  encode(message: Type_AbstractType, writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== \\"\\") {
      writer.uint32(10).string(message.name);
    }

    for (const v of message.parameterTypes) {
      Type.encode(v!, writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Type_AbstractType {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_AbstractType();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.parameterTypes.push(Type.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Type_AbstractType {
    return {
      name: isSet(object.name) ? String(object.name) : \\"\\",
      parameterTypes: Array.isArray(object?.parameterTypes) ? object.parameterTypes.map((e: any) => Type.fromJSON(e)) : []
    };
  },

  toJSON(message: Type_AbstractType): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);

    if (message.parameterTypes) {
      obj.parameterTypes = message.parameterTypes.map(e => e ? Type.toJSON(e) : undefined);
    } else {
      obj.parameterTypes = [];
    }

    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Type_AbstractType>, I>>(object: I): Type_AbstractType {
    const message = createBaseType_AbstractType();
    message.name = object.name ?? \\"\\";
    message.parameterTypes = object.parameterTypes?.map(e => Type.fromPartial(e)) || [];
    return message;
  }

};
export enum Type_PrimitiveType {
  /*Unspecified type.*/
  PRIMITIVE_TYPE_UNSPECIFIED = 0,

  /*Boolean type.*/
  BOOL = 1,

  /*Int64 type.
  
  Proto-based integer values are widened to int64.*/
  INT64 = 2,

  /*Uint64 type.
  
  Proto-based unsigned integer values are widened to uint64.*/
  UINT64 = 3,

  /*Double type.
  
  Proto-based float values are widened to double values.*/
  DOUBLE = 4,

  /*String type.*/
  STRING = 5,

  /*Bytes type.*/
  BYTES = 6,
  UNRECOGNIZED = -1,
}
export enum Type_WellKnownType {
  /*Unspecified type.*/
  WELL_KNOWN_TYPE_UNSPECIFIED = 0,

  /*Well-known protobuf.Any type.
  
  Any types are a polymorphic message type. During type-checking they are
  treated like \`DYN\` types, but at runtime they are resolved to a specific
  message type specified at evaluation time.*/
  ANY = 1,

  /*Well-known protobuf.Timestamp type, internally referenced as \`timestamp\`.*/
  TIMESTAMP = 2,

  /*Well-known protobuf.Duration type, internally referenced as \`duration\`.*/
  DURATION = 3,
  UNRECOGNIZED = -1,
}
export interface Decl_IdentDecl {
  type: Type;
  value: Constant;
  doc: string;
}

function createBaseDecl_IdentDecl(): Decl_IdentDecl {
  return {
    type: undefined,
    value: undefined,
    doc: \\"\\"
  };
}

export const Decl_IdentDecl = {
  encode(message: Decl_IdentDecl, writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== undefined) {
      Type.encode(message.type, writer.uint32(10).fork()).ldelim();
    }

    if (message.value !== undefined) {
      Constant.encode(message.value, writer.uint32(18).fork()).ldelim();
    }

    if (message.doc !== \\"\\") {
      writer.uint32(26).string(message.doc);
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Decl_IdentDecl {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl_IdentDecl();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.type = Type.decode(reader, reader.uint32());
          break;

        case 2:
          message.value = Constant.decode(reader, reader.uint32());
          break;

        case 3:
          message.doc = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Decl_IdentDecl {
    return {
      type: isSet(object.type) ? Type.fromJSON(object.type) : undefined,
      value: isSet(object.value) ? Constant.fromJSON(object.value) : undefined,
      doc: isSet(object.doc) ? String(object.doc) : \\"\\"
    };
  },

  toJSON(message: Decl_IdentDecl): unknown {
    const obj: any = {};
    message.type !== undefined && (obj.type = message.type ? Type.toJSON(message.type) : undefined);
    message.value !== undefined && (obj.value = message.value ? Constant.toJSON(message.value) : undefined);
    message.doc !== undefined && (obj.doc = message.doc);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Decl_IdentDecl>, I>>(object: I): Decl_IdentDecl {
    const message = createBaseDecl_IdentDecl();
    message.type = object.type !== undefined && object.type !== null ? Type.fromPartial(object.type) : undefined;
    message.value = object.value !== undefined && object.value !== null ? Constant.fromPartial(object.value) : undefined;
    message.doc = object.doc ?? \\"\\";
    return message;
  }

};
export interface Decl_FunctionDecl_Overload {
  overloadId: string;
  params: Type[];
  typeParams: string[];
  resultType: Type;
  isInstanceFunction: boolean;
  doc: string;
}

function createBaseDecl_FunctionDecl_Overload(): Decl_FunctionDecl_Overload {
  return {
    overloadId: \\"\\",
    params: [],
    typeParams: [],
    resultType: undefined,
    isInstanceFunction: false,
    doc: \\"\\"
  };
}

export const Decl_FunctionDecl_Overload = {
  encode(message: Decl_FunctionDecl_Overload, writer = _m0.Writer.create()): _m0.Writer {
    if (message.overloadId !== \\"\\") {
      writer.uint32(10).string(message.overloadId);
    }

    for (const v of message.params) {
      Type.encode(v!, writer.uint32(18).fork()).ldelim();
    }

    writer.uint32(26).fork();

    for (const v of message.typeParams) {
      writer.string(v);
    }

    writer.ldelim();

    if (message.resultType !== undefined) {
      Type.encode(message.resultType, writer.uint32(34).fork()).ldelim();
    }

    if (message.isInstanceFunction === true) {
      writer.uint32(40).bool(message.isInstanceFunction);
    }

    if (message.doc !== \\"\\") {
      writer.uint32(50).string(message.doc);
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Decl_FunctionDecl_Overload {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl_FunctionDecl_Overload();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.overloadId = reader.string();
          break;

        case 2:
          message.params.push(Type.decode(reader, reader.uint32()));
          break;

        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;

            while (reader.pos < end2) {
              message.typeParams.push(reader.string());
            }
          } else {
            message.typeParams.push(reader.string());
          }

        case 4:
          message.resultType = Type.decode(reader, reader.uint32());
          break;

        case 5:
          message.isInstanceFunction = reader.bool();
          break;

        case 6:
          message.doc = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Decl_FunctionDecl_Overload {
    return {
      overloadId: isSet(object.overloadId) ? String(object.overloadId) : \\"\\",
      params: Array.isArray(object?.params) ? object.params.map((e: any) => Type.fromJSON(e)) : [],
      typeParams: Array.isArray(object?.typeParams) ? object.typeParams.map((e: any) => String(e)) : [],
      resultType: isSet(object.resultType) ? Type.fromJSON(object.resultType) : undefined,
      isInstanceFunction: isSet(object.isInstanceFunction) ? Boolean(object.isInstanceFunction) : false,
      doc: isSet(object.doc) ? String(object.doc) : \\"\\"
    };
  },

  toJSON(message: Decl_FunctionDecl_Overload): unknown {
    const obj: any = {};
    message.overloadId !== undefined && (obj.overloadId = message.overloadId);

    if (message.params) {
      obj.params = message.params.map(e => e ? Type.toJSON(e) : undefined);
    } else {
      obj.params = [];
    }

    if (message.typeParams) {
      obj.typeParams = message.typeParams.map(e => e);
    } else {
      obj.typeParams = [];
    }

    message.resultType !== undefined && (obj.resultType = message.resultType ? Type.toJSON(message.resultType) : undefined);
    message.isInstanceFunction !== undefined && (obj.isInstanceFunction = message.isInstanceFunction);
    message.doc !== undefined && (obj.doc = message.doc);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Decl_FunctionDecl_Overload>, I>>(object: I): Decl_FunctionDecl_Overload {
    const message = createBaseDecl_FunctionDecl_Overload();
    message.overloadId = object.overloadId ?? \\"\\";
    message.params = object.params?.map(e => Type.fromPartial(e)) || [];
    message.typeParams = object.typeParams?.map(e => e) || [];
    message.resultType = object.resultType !== undefined && object.resultType !== null ? Type.fromPartial(object.resultType) : undefined;
    message.isInstanceFunction = object.isInstanceFunction ?? false;
    message.doc = object.doc ?? \\"\\";
    return message;
  }

};
export interface Reference {
  name: string;
  overloadId: string[];
  value: Constant;
}

function createBaseReference(): Reference {
  return {
    name: \\"\\",
    overloadId: [],
    value: undefined
  };
}

export const Reference = {
  encode(message: Reference, writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== \\"\\") {
      writer.uint32(10).string(message.name);
    }

    writer.uint32(26).fork();

    for (const v of message.overloadId) {
      writer.string(v);
    }

    writer.ldelim();

    if (message.value !== undefined) {
      Constant.encode(message.value, writer.uint32(34).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array): Reference {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReference();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;

            while (reader.pos < end2) {
              message.overloadId.push(reader.string());
            }
          } else {
            message.overloadId.push(reader.string());
          }

        case 4:
          message.value = Constant.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Reference {
    return {
      name: isSet(object.name) ? String(object.name) : \\"\\",
      overloadId: Array.isArray(object?.overloadId) ? object.overloadId.map((e: any) => String(e)) : [],
      value: isSet(object.value) ? Constant.fromJSON(object.value) : undefined
    };
  },

  toJSON(message: Reference): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);

    if (message.overloadId) {
      obj.overloadId = message.overloadId.map(e => e);
    } else {
      obj.overloadId = [];
    }

    message.value !== undefined && (obj.value = message.value ? Constant.toJSON(message.value) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Reference>, I>>(object: I): Reference {
    const message = createBaseReference();
    message.name = object.name ?? \\"\\";
    message.overloadId = object.overloadId?.map(e => e) || [];
    message.value = object.value !== undefined && object.value !== null ? Constant.fromPartial(object.value) : undefined;
    return message;
  }

};"
`;
