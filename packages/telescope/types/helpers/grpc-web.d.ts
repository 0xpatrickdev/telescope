export declare const grpcWeb = "\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n    unary<T extends UnaryMethodDefinitionish>(\n      methodDesc: T,\n      request: any,\n      metadata: grpc.Metadata | undefined,\n    ): Promise<any>;\n  }\n\n//same for every file so put it here for now\nexport class GrpcWebImpl {\n    private host: string;\n    private options: {\n      transport?: grpc.TransportFactory;\n  \n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    };\n  \n    constructor(\n      host: string,\n      options: {\n        transport?: grpc.TransportFactory;\n  \n        debug?: boolean;\n        metadata?: grpc.Metadata;\n      },\n    ) {\n      this.host = host;\n      this.options = options;\n    }\n  \n    unary<T extends UnaryMethodDefinitionish>(\n      methodDesc: T,\n      _request: any,\n      metadata: grpc.Metadata | undefined,\n    ): Promise<any> {\n      const request = { ..._request, ...methodDesc.requestType };\n      const maybeCombinedMetadata =\n        metadata && this.options.metadata\n          ? new BrowserHeaders({\n              ...this.options?.metadata.headersMap,\n              ...metadata?.headersMap,\n            })\n          : metadata || this.options.metadata;\n      return new Promise((resolve, reject) => {\n        grpc.unary(methodDesc, {\n          request,\n          host: this.host,\n          metadata: maybeCombinedMetadata,\n          transport: this.options.transport,\n          debug: this.options.debug,\n          onEnd: function (response) {\n            if (response.status === grpc.Code.OK) {\n              resolve(response.message);\n            } else {\n              const err = new Error(response.statusMessage) as any;\n              err.code = response.status;\n              err.metadata = response.trailers;\n              reject(err);\n            }\n          },\n        });\n      });\n    }\n}\n";
