export declare const types = "import { IBinaryReader, IBinaryWriter } from \"./binary\";\nimport { Any } from \"./google/protobuf/any\";\n\nexport type ProtoMsg = Omit<Any, \"typeUrl\"> & { typeUrl: any };\n\nexport interface IAminoMsg<Amino> {\n  type: any;\n  value: Amino;\n}\n\nexport interface IProtoType {\n  $typeUrl?: any;\n}\n\n/**\n * A type generated by Telescope 1.0.\n */\nexport interface TelescopeGeneratedCodec<\n  T = unknown,\n  SDK = unknown,\n  Amino = unknown\n> {\n  readonly typeUrl: string;\n  readonly aminoType?: string;\n  is?(o: unknown): o is T;\n  isSDK?(o: unknown): o is SDK;\n  isAmino?(o: unknown): o is Amino;\n  encode: (message: T, writer?: IBinaryWriter | any) => IBinaryWriter | any;\n  decode: (input: IBinaryReader | Uint8Array | any, length?: number) => T;\n  fromPartial: (object: any) => T;\n  fromJSON?: (object: unknown) => T;\n  toJSON?: (message: T) => unknown;\n  fromSDK?: (sdk: SDK) => T;\n  fromSDKJSON?: (object: any) => SDK;\n  toSDK?: (message: T) => SDK;\n  fromAmino?: (amino: Amino) => T;\n  toAmino?: (message: T) => Amino;\n  fromAminoMsg?: (aminoMsg: IAminoMsg<Amino>) => T;\n  toAminoMsg?: (message: T) => IAminoMsg<Amino>;\n  toProto?: (message: T) => Uint8Array;\n  fromProtoMsg?: (message: ProtoMsg) => T;\n  toProtoMsg?: (message: T) => Any;\n}\n\nexport type TelescopeGeneratedType<\n  T = unknown,\n  SDK = unknown,\n  Amino = unknown\n> = TelescopeGeneratedCodec<T, SDK, Amino>;\n\nexport type GeneratedType = TelescopeGeneratedCodec;\n";
