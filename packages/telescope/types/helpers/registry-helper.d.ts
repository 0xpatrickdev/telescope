export declare const registryHelper = "import { BinaryReader, BinaryWriter } from \"./binary\";\nimport { Any } from \"./google/protobuf/any\";\n\nexport type ProtoMsg = Omit<Any, \"typeUrl\"> & { typeUrl: any };\n\nexport interface IAminoMsg<Amino> {\n  type: any;\n  value: Amino;\n}\n\nexport interface IProtoType {\n  $typeUrl?: any;\n}\n\nexport interface TelescopeGeneratedDecoder<\n  T = unknown,\n  SDK = unknown,\n  Amino = unknown\n> {\n  readonly typeUrl: string;\n  readonly aminoType?: string;\n  is(o: unknown): o is T;\n  isSDK?(o: unknown): o is SDK;\n  isAmino?(o: unknown): o is Amino;\n  encode: (message: T, writer?: BinaryWriter | any) => BinaryWriter | any;\n  decode: (input: BinaryReader | Uint8Array | any, length?: number) => T;\n  fromPartial: (object: any) => T;\n  fromJSON?: (object: unknown) => T;\n  toJSON?: (message: T) => unknown;\n  fromSDK?: (sdk: SDK) => T;\n  fromSDKJSON?: (object: any) => SDK;\n  toSDK?: (message: T) => SDK;\n  fromAmino?: (amino: Amino) => T;\n  toAmino?: (message: T) => Amino;\n  fromAminoMsg?: (aminoMsg: IAminoMsg<Amino>) => T;\n  toAminoMsg?: (message: T) => IAminoMsg<Amino>;\n  toProto?: (message: T) => Uint8Array;\n  fromProtoMsg?: (message: ProtoMsg) => T;\n  toProtoMsg?: (message: T) => Any;\n}\n\nexport class GlobalDecoderRegistry {\n  static registry: {\n    [key: string]: TelescopeGeneratedDecoder<any, any, any>;\n  } = {};\n  static register<T, SDK, Amino>(\n    key: string,\n    decoder: TelescopeGeneratedDecoder<T, SDK, Amino>\n  ) {\n    GlobalDecoderRegistry.registry[key] = decoder;\n  }\n  static getDecoder<T, SDK, Amino>(\n    key: string\n  ): TelescopeGeneratedDecoder<T, SDK, Amino> {\n    return GlobalDecoderRegistry.registry[key];\n  }\n  static getDecoderByInstance<T, SDK, Amino>(\n    obj: unknown\n  ): TelescopeGeneratedDecoder<T, SDK, Amino> | null {\n    if (obj === undefined || obj === null) {\n      return null;\n    }\n    const protoType = obj as IProtoType;\n\n    if (protoType.$typeUrl) {\n      return this.getDecoder<T, SDK, Amino>(protoType.$typeUrl);\n    }\n\n    for (const key in GlobalDecoderRegistry.registry) {\n      if (\n        Object.prototype.hasOwnProperty.call(\n          GlobalDecoderRegistry.registry,\n          key\n        )\n      ) {\n        const element = GlobalDecoderRegistry.registry[key];\n\n        if (element.is(obj)) {\n          return element;\n        }\n\n        if (element.isSDK && element.isSDK(obj)) {\n          return element;\n        }\n\n        if (element.isAmino && element.isAmino(obj)) {\n          return element;\n        }\n      }\n    }\n\n    return null;\n  }\n  static wrapAny(obj: unknown): Any {\n    const decoder = getDecoderByInstance(obj);\n\n    return {\n      typeUrl: decoder.typeUrl,\n      value: decoder.encode(obj).finish(),\n    };\n  }\n  static unwrapAny<T, SDK, Amino>(input: BinaryReader | Uint8Array) {\n    const reader =\n      input instanceof BinaryReader ? input : new BinaryReader(input);\n\n    const data = Any.decode(reader, reader.uint32());\n\n    const decoder = GlobalDecoderRegistry.getDecoder<T, SDK, Amino>(\n      data.typeUrl\n    );\n\n    if (!decoder) {\n      return data;\n    }\n\n    return decoder.decode(data.value);\n  }\n  static fromJSON<T>(object: any): T {\n    const decoder = getDecoderByInstance<T>(object);\n    return decoder.fromJSON!(object);\n  }\n  static toJSON<T>(message: T): any {\n    const decoder = getDecoderByInstance<T>(message);\n    return decoder.toJSON!(message);\n  }\n  static fromPartial<T>(object: unknown): T {\n    const decoder = getDecoderByInstance<T>(object);\n    return decoder ? decoder.fromPartial(object) : (object as T);\n  }\n  static fromSDK<T = unknown, SDK = unknown>(object: SDK): T {\n    const decoder = getDecoderByInstance<T, SDK>(object);\n    return decoder.fromSDK!(object);\n  }\n  static fromSDKJSON<SDK = unknown>(object: any): SDK {\n    const decoder = getDecoderByInstance<unknown, SDK>(object);\n    return decoder.fromSDKJSON!(object);\n  }\n  static toSDK<T = unknown, SDK = unknown>(object: T): SDK {\n    const decoder = getDecoderByInstance<T, SDK>(object);\n    return decoder.toSDK!(object);\n  }\n  static fromAmino<T = unknown, Amino = unknown>(object: Amino): T {\n    const decoder = getDecoderByInstance<T, unknown, Amino>(object);\n    return decoder.fromAmino!(object);\n  }\n  static toAmino<T = unknown, Amino = unknown>(object: T): Amino {\n    const decoder = getDecoderByInstance<T, unknown, Amino>(object);\n    return decoder.toAmino!(object);\n  }\n}\n\nfunction getDecoderByInstance<T = unknown, SDK = unknown, Amino = unknown>(\n  obj: unknown\n): TelescopeGeneratedDecoder<T, SDK, Amino> {\n  const decoder = GlobalDecoderRegistry.getDecoderByInstance<T, SDK, Amino>(\n    obj\n  );\n\n  if (!decoder) {\n    throw new Error(\n      `There's no decoder for the instance ${JSON.stringify(obj)}`\n    );\n  }\n\n  return decoder;\n}\n";
