{
  "package": "google.api.servicecontrol.v1",
  "imports": [
    "google/api/annotations.proto",
    "google/api/servicecontrol/v1/metric_value.proto",
    "google/rpc/status.proto",
    "google/api/client.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "google": {
        "nested": {
          "api": {
            "nested": {
              "servicecontrol": {
                "nested": {
                  "v1": {
                    "options": {
                      "cc_enable_arenas": true,
                      "csharp_namespace": "Google.Cloud.ServiceControl.V1",
                      "go_package": "google.golang.org/genproto/googleapis/api/servicecontrol/v1;servicecontrol",
                      "java_multiple_files": true,
                      "java_outer_classname": "QuotaControllerProto",
                      "java_package": "com.google.api.servicecontrol.v1",
                      "php_namespace": "Google\\Cloud\\ServiceControl\\V1",
                      "ruby_package": "Google::Cloud::ServiceControl::V1"
                    },
                    "nested": {
                      "QuotaController": {
                        "options": {
                          "(google.api.default_host)": "servicecontrol.googleapis.com",
                          "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/servicecontrol"
                        },
                        "methods": {
                          "AllocateQuota": {
                            "requestType": "AllocateQuotaRequest",
                            "responseType": "AllocateQuotaResponse",
                            "options": {
                              "(google.api.http).post": "/v1/services/{service_name}:allocateQuota",
                              "(google.api.http).body": "*"
                            },
                            "comment": "Attempts to allocate quota for the specified consumer. It should be called\nbefore the operation is executed.\n\nThis method requires the `servicemanagement.services.quota`\npermission on the specified service. For more information, see\n[Cloud IAM](https://cloud.google.com/iam).\n\n**NOTE:** The client **must** fail-open on server errors `INTERNAL`,\n`UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system\nreliability, the server may inject these errors to prohibit any hard\ndependency on the quota functionality.",
                            "parsedOptions": [
                              {
                                "(google.api.http)": {
                                  "post": "/v1/services/{service_name}:allocateQuota",
                                  "body": "*"
                                }
                              }
                            ]
                          }
                        },
                        "comment": "[Google Quota Control API](/service-control/overview)\n\nAllows clients to allocate and release quota against a [managed\nservice](https://cloud.google.com/service-management/reference/rpc/google.api/servicemanagement.v1#google.api.servicemanagement.v1.ManagedService)."
                      },
                      "AllocateQuotaRequest": {
                        "fields": {
                          "serviceName": {
                            "type": "string",
                            "id": 1,
                            "comment": "Name of the service as specified in the service configuration. For example,\n`\"pubsub.googleapis.com\"`.\n\nSee [google.api.Service][google.api.Service] for the definition of a service name."
                          },
                          "allocateOperation": {
                            "type": "QuotaOperation",
                            "id": 2,
                            "comment": "Operation that describes the quota allocation."
                          },
                          "serviceConfigId": {
                            "type": "string",
                            "id": 4,
                            "comment": "Specifies which version of service configuration should be used to process\nthe request. If unspecified or no matching version can be found, the latest\none will be used."
                          }
                        },
                        "comment": "Request message for the AllocateQuota method."
                      },
                      "QuotaOperation": {
                        "fields": {
                          "operationId": {
                            "type": "string",
                            "id": 1,
                            "comment": "Identity of the operation. This is expected to be unique within the scope\nof the service that generated the operation, and guarantees idempotency in\ncase of retries.\n\nIn order to ensure best performance and latency in the Quota backends,\noperation_ids are optimally associated with time, so that related\noperations can be accessed fast in storage. For this reason, the\nrecommended token for services that intend to operate at a high QPS is\nUnix time in nanos + UUID"
                          },
                          "methodName": {
                            "type": "string",
                            "id": 2,
                            "comment": "Fully qualified name of the API method for which this quota operation is\nrequested. This name is used for matching quota rules or metric rules and\nbilling status rules defined in service configuration.\n\nThis field should not be set if any of the following is true:\n(1) the quota operation is performed on non-API resources.\n(2) quota_metrics is set because the caller is doing quota override.\n\n\nExample of an RPC method name:\ngoogle.example.library.v1.LibraryService.CreateShelf"
                          },
                          "consumerId": {
                            "type": "string",
                            "id": 3,
                            "comment": "Identity of the consumer for whom this quota operation is being performed.\n\nThis can be in one of the following formats:\nproject:<project_id>,\nproject_number:<project_number>,\napi_key:<api_key>."
                          },
                          "labels": {
                            "keyType": "string",
                            "type": "string",
                            "id": 4,
                            "comment": "Labels describing the operation."
                          },
                          "quotaMetrics": {
                            "rule": "repeated",
                            "type": "MetricValueSet",
                            "id": 5,
                            "comment": "Represents information about this operation. Each MetricValueSet\ncorresponds to a metric defined in the service configuration.\nThe data type used in the MetricValueSet must agree with\nthe data type specified in the metric definition.\n\nWithin a single operation, it is not allowed to have more than one\nMetricValue instances that have the same metric names and identical\nlabel value combinations. If a request has such duplicated MetricValue\ninstances, the entire request is rejected with\nan invalid argument error.\n\nThis field is mutually exclusive with method_name."
                          },
                          "quotaMode": {
                            "type": "QuotaMode",
                            "id": 6,
                            "comment": "Quota mode for this operation."
                          }
                        },
                        "nested": {
                          "QuotaMode": {
                            "values": {
                              "UNSPECIFIED": 0,
                              "NORMAL": 1,
                              "BEST_EFFORT": 2,
                              "CHECK_ONLY": 3,
                              "QUERY_ONLY": 4,
                              "ADJUST_ONLY": 5
                            },
                            "comment": "Supported quota modes.",
                            "comments": {
                              "UNSPECIFIED": "Guard against implicit default. Must not be used.",
                              "NORMAL": "For AllocateQuota request, allocates quota for the amount specified in\nthe service configuration or specified using the quota metrics. If the\namount is higher than the available quota, allocation error will be\nreturned and no quota will be allocated.\nIf multiple quotas are part of the request, and one fails, none of the\nquotas are allocated or released.",
                              "BEST_EFFORT": "The operation allocates quota for the amount specified in the service\nconfiguration or specified using the quota metrics. If the amount is\nhigher than the available quota, request does not fail but all available\nquota will be allocated.\nFor rate quota, BEST_EFFORT will continue to deduct from other groups\neven if one does not have enough quota. For allocation, it will find the\nminimum available amount across all groups and deduct that amount from\nall the affected groups.",
                              "CHECK_ONLY": "For AllocateQuota request, only checks if there is enough quota\navailable and does not change the available quota. No lock is placed on\nthe available quota either.",
                              "QUERY_ONLY": "Unimplemented. When used in AllocateQuotaRequest, this returns the\neffective quota limit(s) in the response, and no quota check will be\nperformed. Not supported for other requests, and even for\nAllocateQuotaRequest, this is currently supported only for allowlisted\nservices.",
                              "ADJUST_ONLY": "The operation allocates quota for the amount specified in the service\nconfiguration or specified using the quota metrics. If the requested\namount is higher than the available quota, request does not fail and\nremaining quota would become negative (going over the limit).\nNot supported for Rate Quota."
                            }
                          }
                        },
                        "comment": "Represents information regarding a quota operation."
                      },
                      "AllocateQuotaResponse": {
                        "fields": {
                          "operationId": {
                            "type": "string",
                            "id": 1,
                            "comment": "The same operation_id value used in the AllocateQuotaRequest. Used for\nlogging and diagnostics purposes."
                          },
                          "allocateErrors": {
                            "rule": "repeated",
                            "type": "QuotaError",
                            "id": 2,
                            "comment": "Indicates the decision of the allocate."
                          },
                          "quotaMetrics": {
                            "rule": "repeated",
                            "type": "MetricValueSet",
                            "id": 3,
                            "comment": "Quota metrics to indicate the result of allocation. Depending on the\nrequest, one or more of the following metrics will be included:\n\n1. Per quota group or per quota metric incremental usage will be specified\nusing the following delta metric :\n\"serviceruntime.googleapis.com/api/consumer/quota_used_count\"\n\n2. The quota limit reached condition will be specified using the following\nboolean metric :\n\"serviceruntime.googleapis.com/quota/exceeded\""
                          },
                          "serviceConfigId": {
                            "type": "string",
                            "id": 4,
                            "comment": "ID of the actual config used to process the request."
                          }
                        },
                        "comment": "Response message for the AllocateQuota method."
                      },
                      "QuotaError": {
                        "fields": {
                          "code": {
                            "type": "Code",
                            "id": 1,
                            "comment": "Error code."
                          },
                          "subject": {
                            "type": "string",
                            "id": 2,
                            "comment": "Subject to whom this error applies. See the specific enum for more details\non this field. For example, \"clientip:<ip address of client>\" or\n\"project:<Google developer project id>\"."
                          },
                          "description": {
                            "type": "string",
                            "id": 3,
                            "comment": "Free-form text that provides details on the cause of the error."
                          },
                          "status": {
                            "type": "google.rpc.Status",
                            "id": 4,
                            "comment": "Contains additional information about the quota error.\nIf available, `status.code` will be non zero."
                          }
                        },
                        "nested": {
                          "Code": {
                            "values": {
                              "UNSPECIFIED": 0,
                              "RESOURCE_EXHAUSTED": 8,
                              "BILLING_NOT_ACTIVE": 107,
                              "PROJECT_DELETED": 108,
                              "API_KEY_INVALID": 105,
                              "API_KEY_EXPIRED": 112
                            },
                            "comment": "Error codes related to project config validations are deprecated since the\nquota controller methods do not perform these validations. Instead services\nhave to call the Check method, without quota_properties field, to perform\nthese validations before calling the quota controller methods. These\nmethods check only for project deletion to be wipe out compliant.",
                            "comments": {
                              "UNSPECIFIED": "This is never used.",
                              "RESOURCE_EXHAUSTED": "Quota allocation failed.\nSame as [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED].",
                              "BILLING_NOT_ACTIVE": "Consumer cannot access the service because the service requires active\nbilling.",
                              "PROJECT_DELETED": "Consumer's project has been marked as deleted (soft deletion).",
                              "API_KEY_INVALID": "Specified API key is invalid.",
                              "API_KEY_EXPIRED": "Specified API Key has expired."
                            }
                          }
                        },
                        "comment": "Represents error information for [QuotaOperation][google.api.servicecontrol.v1.QuotaOperation]."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}