{
  "package": "google.api",
  "imports": [
    "google/protobuf/descriptor.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "google": {
        "nested": {
          "api": {
            "options": {
              "go_package": "google.golang.org/genproto/googleapis/api/annotations;annotations",
              "java_multiple_files": true,
              "java_outer_classname": "RoutingProto",
              "java_package": "com.google.api",
              "objc_class_prefix": "GAPI"
            },
            "nested": {
              "routing": {
                "type": "google.api.RoutingRule",
                "id": 72295729,
                "extend": "google.protobuf.MethodOptions",
                "comment": "See RoutingRule."
              },
              "RoutingRule": {
                "fields": {
                  "routingParameters": {
                    "rule": "repeated",
                    "type": "RoutingParameter",
                    "id": 2,
                    "comment": "A collection of Routing Parameter specifications.\n**NOTE:** If multiple Routing Parameters describe the same key\n(via the `path_template` field or via the `field` field when\n`path_template` is not provided), \"last one wins\" rule\ndetermines which Parameter gets used.\nSee the examples for more details."
                  }
                },
                "comment": "Specifies the routing information that should be sent along with the request\nin the form of routing header.\n**NOTE:** All service configuration rules follow the \"last one wins\" order.\n\nThe examples below will apply to an RPC which has the following request type:\n\nMessage Definition:\n\nmessage Request {\n// The name of the Table\n// Values can be of the following formats:\n// - `projects/<project>/tables/<table>`\n// - `projects/<project>/instances/<instance>/tables/<table>`\n// - `region/<region>/zones/<zone>/tables/<table>`\nstring table_name = 1;\n\n// This value specifies routing for replication.\n// It can be in the following formats:\n// - `profiles/<profile_id>`\n// - a legacy `profile_id` that can be any string\nstring app_profile_id = 2;\n}\n\nExample message:\n\n{\ntable_name: projects/proj_foo/instances/instance_bar/table/table_baz,\napp_profile_id: profiles/prof_qux\n}\n\nThe routing header consists of one or multiple key-value pairs. Every key\nand value must be percent-encoded, and joined together in the format of\n`key1=value1&key2=value2`.\nIn the examples below I am skipping the percent-encoding for readablity.\n\nExample 1\n\nExtracting a field from the request to put into the routing header\nunchanged, with the key equal to the field name.\n\nannotation:\n\noption (google.api.routing) = {\n// Take the `app_profile_id`.\nrouting_parameters {\nfield: \"app_profile_id\"\n}\n};\n\nresult:\n\nx-goog-request-params: app_profile_id=profiles/prof_qux\n\nExample 2\n\nExtracting a field from the request to put into the routing header\nunchanged, with the key different from the field name.\n\nannotation:\n\noption (google.api.routing) = {\n// Take the `app_profile_id`, but name it `routing_id` in the header.\nrouting_parameters {\nfield: \"app_profile_id\"\npath_template: \"{routing_id=**}\"\n}\n};\n\nresult:\n\nx-goog-request-params: routing_id=profiles/prof_qux\n\nExample 3\n\nExtracting a field from the request to put into the routing\nheader, while matching a path template syntax on the field's value.\n\nNB: it is more useful to send nothing than to send garbage for the purpose\nof dynamic routing, since garbage pollutes cache. Thus the matching.\n\nSub-example 3a\n\nThe field matches the template.\n\nannotation:\n\noption (google.api.routing) = {\n// Take the `table_name`, if it's well-formed (with project-based\n// syntax).\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{table_name=projects/*/instances/*/**}\"\n}\n};\n\nresult:\n\nx-goog-request-params:\ntable_name=projects/proj_foo/instances/instance_bar/table/table_baz\n\nSub-example 3b\n\nThe field does not match the template.\n\nannotation:\n\noption (google.api.routing) = {\n// Take the `table_name`, if it's well-formed (with region-based\n// syntax).\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{table_name=regions/*/zones/*/**}\"\n}\n};\n\nresult:\n\n<no routing header will be sent>\n\nSub-example 3c\n\nMultiple alternative conflictingly named path templates are\nspecified. The one that matches is used to construct the header.\n\nannotation:\n\noption (google.api.routing) = {\n// Take the `table_name`, if it's well-formed, whether\n// using the region- or projects-based syntax.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{table_name=regions/*/zones/*/**}\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{table_name=projects/*/instances/*/**}\"\n}\n};\n\nresult:\n\nx-goog-request-params:\ntable_name=projects/proj_foo/instances/instance_bar/table/table_baz\n\nExample 4\n\nExtracting a single routing header key-value pair by matching a\ntemplate syntax on (a part of) a single request field.\n\nannotation:\n\noption (google.api.routing) = {\n// Take just the project id from the `table_name` field.\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=projects/*}/**\"\n}\n};\n\nresult:\n\nx-goog-request-params: routing_id=projects/proj_foo\n\nExample 5\n\nExtracting a single routing header key-value pair by matching\nseveral conflictingly named path templates on (parts of) a single request\nfield. The last template to match \"wins\" the conflict.\n\nannotation:\n\noption (google.api.routing) = {\n// If the `table_name` does not have instances information,\n// take just the project id for routing.\n// Otherwise take project + instance.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=projects/*}/**\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=projects/*/instances/*}/**\"\n}\n};\n\nresult:\n\nx-goog-request-params:\nrouting_id=projects/proj_foo/instances/instance_bar\n\nExample 6\n\nExtracting multiple routing header key-value pairs by matching\nseveral non-conflicting path templates on (parts of) a single request field.\n\nSub-example 6a\n\nMake the templates strict, so that if the `table_name` does not\nhave an instance information, nothing is sent.\n\nannotation:\n\noption (google.api.routing) = {\n// The routing code needs two keys instead of one composite\n// but works only for the tables with the \"project-instance\" name\n// syntax.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{project_id=projects/*}/instances/*/**\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"projects/*/{instance_id=instances/*}/**\"\n}\n};\n\nresult:\n\nx-goog-request-params:\nproject_id=projects/proj_foo&instance_id=instances/instance_bar\n\nSub-example 6b\n\nMake the templates loose, so that if the `table_name` does not\nhave an instance information, just the project id part is sent.\n\nannotation:\n\noption (google.api.routing) = {\n// The routing code wants two keys instead of one composite\n// but will work with just the `project_id` for tables without\n// an instance in the `table_name`.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{project_id=projects/*}/**\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"projects/*/{instance_id=instances/*}/**\"\n}\n};\n\nresult (is the same as 6a for our example message because it has the instance\ninformation):\n\nx-goog-request-params:\nproject_id=projects/proj_foo&instance_id=instances/instance_bar\n\nExample 7\n\nExtracting multiple routing header key-value pairs by matching\nseveral path templates on multiple request fields.\n\nNB: note that here there is no way to specify sending nothing if one of the\nfields does not match its template. E.g. if the `table_name` is in the wrong\nformat, the `project_id` will not be sent, but the `routing_id` will be.\nThe backend routing code has to be aware of that and be prepared to not\nreceive a full complement of keys if it expects multiple.\n\nannotation:\n\noption (google.api.routing) = {\n// The routing needs both `project_id` and `routing_id`\n// (from the `app_profile_id` field) for routing.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{project_id=projects/*}/**\"\n}\nrouting_parameters {\nfield: \"app_profile_id\"\npath_template: \"{routing_id=**}\"\n}\n};\n\nresult:\n\nx-goog-request-params:\nproject_id=projects/proj_foo&routing_id=profiles/prof_qux\n\nExample 8\n\nExtracting a single routing header key-value pair by matching\nseveral conflictingly named path templates on several request fields. The\nlast template to match \"wins\" the conflict.\n\nannotation:\n\noption (google.api.routing) = {\n// The `routing_id` can be a project id or a region id depending on\n// the table name format, but only if the `app_profile_id` is not set.\n// If `app_profile_id` is set it should be used instead.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=projects/*}/**\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=regions/*}/**\"\n}\nrouting_parameters {\nfield: \"app_profile_id\"\npath_template: \"{routing_id=**}\"\n}\n};\n\nresult:\n\nx-goog-request-params: routing_id=profiles/prof_qux\n\nExample 9\n\nBringing it all together.\n\nannotation:\n\noption (google.api.routing) = {\n// For routing both `table_location` and a `routing_id` are needed.\n//\n// table_location can be either an instance id or a region+zone id.\n//\n// For `routing_id`, take the value of `app_profile_id`\n// - If it's in the format `profiles/<profile_id>`, send\n// just the `<profile_id>` part.\n// - If it's any other literal, send it as is.\n// If the `app_profile_id` is empty, and the `table_name` starts with\n// the project_id, send that instead.\n\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"projects/*/{table_location=instances/*}/tables/*\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{table_location=regions/*/zones/*}/tables/*\"\n}\nrouting_parameters {\nfield: \"table_name\"\npath_template: \"{routing_id=projects/*}/**\"\n}\nrouting_parameters {\nfield: \"app_profile_id\"\npath_template: \"{routing_id=**}\"\n}\nrouting_parameters {\nfield: \"app_profile_id\"\npath_template: \"profiles/{routing_id=*}\"\n}\n};\n\nresult:\n\nx-goog-request-params:\ntable_location=instances/instance_bar&routing_id=prof_qux"
              },
              "RoutingParameter": {
                "fields": {
                  "field": {
                    "type": "string",
                    "id": 1,
                    "comment": "A request field to extract the header key-value pair from."
                  },
                  "pathTemplate": {
                    "type": "string",
                    "id": 2,
                    "comment": "A pattern matching the key-value field. Optional.\nIf not specified, the whole field specified in the `field` field will be\ntaken as value, and its name used as key. If specified, it MUST contain\nexactly one named segment (along with any number of unnamed segments) The\npattern will be matched over the field specified in the `field` field, then\nif the match is successful:\n- the name of the single named segment will be used as a header name,\n- the match value of the segment will be used as a header value;\nif the match is NOT successful, nothing will be sent.\n\nExample:\n\n-- This is a field in the request message\n|   that the header value will be extracted from.\n|\n|                     -- This is the key name in the\n|                    |   routing header.\nV                    |\nfield: \"table_name\"           v\npath_template: \"projects/*/{table_location=instances/*}/tables/*\"\n^            ^\n|            |\nIn the {} brackets is the pattern that --             |\nspecifies what to extract from the                    |\nfield as a value to be sent.                          |\n|\nThe string in the field must match the whole pattern --\nbefore brackets, inside brackets, after brackets.\n\nWhen looking at this specific example, we can see that:\n- A key-value pair with the key `table_location`\nand the value matching `instances/*` should be added\nto the x-goog-request-params routing header.\n- The value is extracted from the request message's `table_name` field\nif it matches the full pattern specified:\n`projects/*/instances/*/tables/*`.\n\n**NB:** If the `path_template` field is not provided, the key name is\nequal to the field name, and the whole field should be sent as a value.\nThis makes the pattern for the field and the value functionally equivalent\nto `**`, and the configuration\n\n{\nfield: \"table_name\"\n}\n\nis a functionally equivalent shorthand to:\n\n{\nfield: \"table_name\"\npath_template: \"{table_name=**}\"\n}\n\nSee Example 1 for more details."
                  }
                },
                "comment": "A projection from an input message to the GRPC or REST header."
              }
            }
          }
        }
      }
    }
  }
}