{
  "package": "google.api.expr.v1alpha1",
  "imports": [
    "google/protobuf/duration.proto",
    "google/protobuf/struct.proto",
    "google/protobuf/timestamp.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "google": {
        "nested": {
          "api": {
            "nested": {
              "expr": {
                "nested": {
                  "v1alpha1": {
                    "options": {
                      "cc_enable_arenas": true,
                      "go_package": "google.golang.org/genproto/googleapis/api/expr/v1alpha1;expr",
                      "java_multiple_files": true,
                      "java_outer_classname": "SyntaxProto",
                      "java_package": "com.google.api.expr.v1alpha1"
                    },
                    "nested": {
                      "ParsedExpr": {
                        "fields": {
                          "expr": {
                            "type": "Expr",
                            "id": 2,
                            "comment": "The parsed expression."
                          },
                          "sourceInfo": {
                            "type": "SourceInfo",
                            "id": 3,
                            "comment": "The source info derived from input that generated the parsed `expr`."
                          }
                        },
                        "comment": "An expression together with source information as returned by the parser."
                      },
                      "Expr": {
                        "oneofs": {
                          "exprKind": {
                            "oneof": [
                              "constExpr",
                              "identExpr",
                              "selectExpr",
                              "callExpr",
                              "listExpr",
                              "structExpr",
                              "comprehensionExpr"
                            ],
                            "comment": "Required. Variants of expressions."
                          }
                        },
                        "fields": {
                          "id": {
                            "type": "int64",
                            "id": 2,
                            "comment": "Required. An id assigned to this node by the parser which is unique in a\ngiven expression tree. This is used to associate type information and other\nattributes to a node in the parse tree."
                          },
                          "constExpr": {
                            "type": "Constant",
                            "id": 3,
                            "comment": "A literal expression."
                          },
                          "identExpr": {
                            "type": "Ident",
                            "id": 4,
                            "comment": "An identifier expression."
                          },
                          "selectExpr": {
                            "type": "Select",
                            "id": 5,
                            "comment": "A field selection expression, e.g. `request.auth`."
                          },
                          "callExpr": {
                            "type": "Call",
                            "id": 6,
                            "comment": "A call expression, including calls to predefined functions and operators."
                          },
                          "listExpr": {
                            "type": "CreateList",
                            "id": 7,
                            "comment": "A list creation expression."
                          },
                          "structExpr": {
                            "type": "CreateStruct",
                            "id": 8,
                            "comment": "A map or message creation expression."
                          },
                          "comprehensionExpr": {
                            "type": "Comprehension",
                            "id": 9,
                            "comment": "A comprehension expression."
                          }
                        },
                        "nested": {
                          "Ident": {
                            "fields": {
                              "name": {
                                "type": "string",
                                "id": 1,
                                "comment": "Required. Holds a single, unqualified identifier, possibly preceded by a\n'.'.\n\nQualified names are represented by the [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression."
                              }
                            },
                            "comment": "An identifier expression. e.g. `request`."
                          },
                          "Select": {
                            "fields": {
                              "operand": {
                                "type": "Expr",
                                "id": 1,
                                "comment": "Required. The target of the selection expression.\n\nFor example, in the select expression `request.auth`, the `request`\nportion of the expression is the `operand`."
                              },
                              "field": {
                                "type": "string",
                                "id": 2,
                                "comment": "Required. The name of the field to select.\n\nFor example, in the select expression `request.auth`, the `auth` portion\nof the expression would be the `field`."
                              },
                              "testOnly": {
                                "type": "bool",
                                "id": 3,
                                "comment": "Whether the select is to be interpreted as a field presence test.\n\nThis results from the macro `has(request.auth)`."
                              }
                            },
                            "comment": "A field selection expression. e.g. `request.auth`."
                          },
                          "Call": {
                            "fields": {
                              "target": {
                                "type": "Expr",
                                "id": 1,
                                "comment": "The target of an method call-style expression. For example, `x` in\n`x.f()`."
                              },
                              "function": {
                                "type": "string",
                                "id": 2,
                                "comment": "Required. The name of the function or method being called."
                              },
                              "args": {
                                "rule": "repeated",
                                "type": "Expr",
                                "id": 3,
                                "comment": "The arguments."
                              }
                            },
                            "comment": "A call expression, including calls to predefined functions and operators.\n\nFor example, `value == 10`, `size(map_value)`."
                          },
                          "CreateList": {
                            "fields": {
                              "elements": {
                                "rule": "repeated",
                                "type": "Expr",
                                "id": 1,
                                "comment": "The elements part of the list."
                              }
                            },
                            "comment": "A list creation expression.\n\nLists may either be homogenous, e.g. `[1, 2, 3]`, or heterogeneous, e.g.\n`dyn([1, 'hello', 2.0])`"
                          },
                          "CreateStruct": {
                            "fields": {
                              "messageName": {
                                "type": "string",
                                "id": 1,
                                "comment": "The type name of the message to be created, empty when creating map\nliterals."
                              },
                              "entries": {
                                "rule": "repeated",
                                "type": "Entry",
                                "id": 2,
                                "comment": "The entries in the creation expression."
                              }
                            },
                            "nested": {
                              "Entry": {
                                "oneofs": {
                                  "keyKind": {
                                    "oneof": [
                                      "fieldKey",
                                      "mapKey"
                                    ],
                                    "comment": "The `Entry` key kinds."
                                  }
                                },
                                "fields": {
                                  "id": {
                                    "type": "int64",
                                    "id": 1,
                                    "comment": "Required. An id assigned to this node by the parser which is unique\nin a given expression tree. This is used to associate type\ninformation and other attributes to the node."
                                  },
                                  "fieldKey": {
                                    "type": "string",
                                    "id": 2,
                                    "comment": "The field key for a message creator statement."
                                  },
                                  "mapKey": {
                                    "type": "Expr",
                                    "id": 3,
                                    "comment": "The key expression for a map creation statement."
                                  },
                                  "value": {
                                    "type": "Expr",
                                    "id": 4,
                                    "comment": "Required. The value assigned to the key."
                                  }
                                },
                                "comment": "Represents an entry."
                              }
                            },
                            "comment": "A map or message creation expression.\n\nMaps are constructed as `{'key_name': 'value'}`. Message construction is\nsimilar, but prefixed with a type name and composed of field ids:\n`types.MyType{field_id: 'value'}`."
                          },
                          "Comprehension": {
                            "fields": {
                              "iterVar": {
                                "type": "string",
                                "id": 1,
                                "comment": "The name of the iteration variable."
                              },
                              "iterRange": {
                                "type": "Expr",
                                "id": 2,
                                "comment": "The range over which var iterates."
                              },
                              "accuVar": {
                                "type": "string",
                                "id": 3,
                                "comment": "The name of the variable used for accumulation of the result."
                              },
                              "accuInit": {
                                "type": "Expr",
                                "id": 4,
                                "comment": "The initial value of the accumulator."
                              },
                              "loopCondition": {
                                "type": "Expr",
                                "id": 5,
                                "comment": "An expression which can contain iter_var and accu_var.\n\nReturns false when the result has been computed and may be used as\na hint to short-circuit the remainder of the comprehension."
                              },
                              "loopStep": {
                                "type": "Expr",
                                "id": 6,
                                "comment": "An expression which can contain iter_var and accu_var.\n\nComputes the next value of accu_var."
                              },
                              "result": {
                                "type": "Expr",
                                "id": 7,
                                "comment": "An expression which can contain accu_var.\n\nComputes the result."
                              }
                            },
                            "comment": "A comprehension expression applied to a list or map.\n\nComprehensions are not part of the core syntax, but enabled with macros.\nA macro matches a specific call signature within a parsed AST and replaces\nthe call with an alternate AST block. Macro expansion happens at parse\ntime.\n\nThe following macros are supported within CEL:\n\nAggregate type macros may be applied to all elements in a list or all keys\nin a map:\n\n*  `all`, `exists`, `exists_one` -  test a predicate expression against\nthe inputs and return `true` if the predicate is satisfied for all,\nany, or only one value `list.all(x, x < 10)`.\n*  `filter` - test a predicate expression against the inputs and return\nthe subset of elements which satisfy the predicate:\n`payments.filter(p, p > 1000)`.\n*  `map` - apply an expression to all elements in the input and return the\noutput aggregate type: `[1, 2, 3].map(i, i * i)`.\n\nThe `has(m.x)` macro tests whether the property `x` is present in struct\n`m`. The semantics of this macro depend on the type of `m`. For proto2\nmessages `has(m.x)` is defined as 'defined, but not set`. For proto3, the\nmacro tests whether the property is set to its default. For map and struct\ntypes, the macro tests whether the property `x` is defined on `m`."
                          }
                        },
                        "comment": "An abstract representation of a common expression.\n\nExpressions are abstractly represented as a collection of identifiers,\nselect statements, function calls, literals, and comprehensions. All\noperators with the exception of the '.' operator are modelled as function\ncalls. This makes it easy to represent new operators into the existing AST.\n\nAll references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at\ntype-check for an expression to be valid. A reference may either be a bare\nidentifier `name` or a qualified identifier `google.api.name`. References\nmay either refer to a value or a function declaration.\n\nFor example, the expression `google.api.name.startsWith('expr')` references\nthe declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and\nthe function declaration `startsWith`."
                      },
                      "Constant": {
                        "oneofs": {
                          "constantKind": {
                            "oneof": [
                              "nullValue",
                              "boolValue",
                              "int64Value",
                              "uint64Value",
                              "doubleValue",
                              "stringValue",
                              "bytesValue",
                              "durationValue",
                              "timestampValue"
                            ],
                            "comment": "Required. The valid constant kinds."
                          }
                        },
                        "fields": {
                          "nullValue": {
                            "type": "google.protobuf.NullValue",
                            "id": 1,
                            "comment": "null value."
                          },
                          "boolValue": {
                            "type": "bool",
                            "id": 2,
                            "comment": "boolean value."
                          },
                          "int64Value": {
                            "type": "int64",
                            "id": 3,
                            "comment": "int64 value."
                          },
                          "uint64Value": {
                            "type": "uint64",
                            "id": 4,
                            "comment": "uint64 value."
                          },
                          "doubleValue": {
                            "type": "double",
                            "id": 5,
                            "comment": "double value."
                          },
                          "stringValue": {
                            "type": "string",
                            "id": 6,
                            "comment": "string value."
                          },
                          "bytesValue": {
                            "type": "bytes",
                            "id": 7,
                            "comment": "bytes value."
                          },
                          "durationValue": {
                            "type": "google.protobuf.Duration",
                            "id": 8,
                            "options": {
                              "deprecated": true
                            },
                            "comment": "protobuf.Duration value.\n\nDeprecated: duration is no longer considered a builtin cel type."
                          },
                          "timestampValue": {
                            "type": "google.protobuf.Timestamp",
                            "id": 9,
                            "options": {
                              "deprecated": true
                            },
                            "comment": "protobuf.Timestamp value.\n\nDeprecated: timestamp is no longer considered a builtin cel type."
                          }
                        },
                        "comment": "Represents a primitive literal.\n\nNamed 'Constant' here for backwards compatibility.\n\nThis is similar as the primitives supported in the well-known type\n`google.protobuf.Value`, but richer so it can represent CEL's full range of\nprimitives.\n\nLists and structs are not included as constants as these aggregate types may\ncontain [Expr][google.api.expr.v1alpha1.Expr] elements which require evaluation and are thus not constant.\n\nExamples of literals include: `\"hello\"`, `b'bytes'`, `1u`, `4.2`, `-2`,\n`true`, `null`."
                      },
                      "SourceInfo": {
                        "fields": {
                          "syntaxVersion": {
                            "type": "string",
                            "id": 1,
                            "comment": "The syntax version of the source, e.g. `cel1`."
                          },
                          "location": {
                            "type": "string",
                            "id": 2,
                            "comment": "The location name. All position information attached to an expression is\nrelative to this location.\n\nThe location could be a file, UI element, or similar. For example,\n`acme/app/AnvilPolicy.cel`."
                          },
                          "lineOffsets": {
                            "rule": "repeated",
                            "type": "int32",
                            "id": 3,
                            "comment": "Monotonically increasing list of code point offsets where newlines\n`\\n` appear.\n\nThe line number of a given position is the index `i` where for a given\n`id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The\ncolumn may be derivd from `id_positions[id] - line_offsets[i]`."
                          },
                          "positions": {
                            "keyType": "int64",
                            "type": "int32",
                            "id": 4,
                            "comment": "A map from the parse node id (e.g. `Expr.id`) to the code point offset\nwithin the source."
                          },
                          "macroCalls": {
                            "keyType": "int64",
                            "type": "Expr",
                            "id": 5,
                            "comment": "A map from the parse node id where a macro replacement was made to the\ncall `Expr` that resulted in a macro expansion.\n\nFor example, `has(value.field)` is a function call that is replaced by a\n`test_only` field selection in the AST. Likewise, the call\n`list.exists(e, e > 10)` translates to a comprehension expression. The key\nin the map corresponds to the expression id of the expanded macro, and the\nvalue is the call `Expr` that was replaced."
                          }
                        },
                        "comment": "Source information collected at parse time."
                      },
                      "SourcePosition": {
                        "fields": {
                          "location": {
                            "type": "string",
                            "id": 1,
                            "comment": "The soucre location name (e.g. file name)."
                          },
                          "offset": {
                            "type": "int32",
                            "id": 2,
                            "comment": "The UTF-8 code unit offset."
                          },
                          "line": {
                            "type": "int32",
                            "id": 3,
                            "comment": "The 1-based index of the starting line in the source text\nwhere the issue occurs, or 0 if unknown."
                          },
                          "column": {
                            "type": "int32",
                            "id": 4,
                            "comment": "The 0-based index of the starting position within the line of source text\nwhere the issue occurs.  Only meaningful if line is nonzero."
                          }
                        },
                        "comment": "A specific position in source."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}