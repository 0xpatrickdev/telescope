{
  "package": "google.protobuf",
  "imports": [
    "google/protobuf/source_context.proto",
    "google/protobuf/type.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "google": {
        "nested": {
          "protobuf": {
            "options": {
              "csharp_namespace": "Google.Protobuf.WellKnownTypes",
              "java_package": "com.google.protobuf",
              "java_outer_classname": "ApiProto",
              "java_multiple_files": true,
              "objc_class_prefix": "GPB",
              "go_package": "types"
            },
            "nested": {
              "Api": {
                "fields": {
                  "name": {
                    "type": "string",
                    "id": 1,
                    "comment": "The fully qualified name of this interface, including package name\nfollowed by the interface's simple name."
                  },
                  "methods": {
                    "rule": "repeated",
                    "type": "Method",
                    "id": 2,
                    "comment": "The methods of this interface, in unspecified order."
                  },
                  "options": {
                    "rule": "repeated",
                    "type": "Option",
                    "id": 3,
                    "comment": "Any metadata attached to the interface."
                  },
                  "version": {
                    "type": "string",
                    "id": 4,
                    "comment": "A version string for this interface. If specified, must have the form\n`major-version.minor-version`, as in `1.10`. If the minor version is\nomitted, it defaults to zero. If the entire version field is empty, the\nmajor version is derived from the package name, as outlined below. If the\nfield is not empty, the version in the package name will be verified to be\nconsistent with what is provided here.\n\nThe versioning schema uses [semantic\nversioning](http://semver.org) where the major version number\nindicates a breaking change and the minor version an additive,\nnon-breaking change. Both version numbers are signals to users\nwhat to expect from different versions, and should be carefully\nchosen based on the product plan.\n\nThe major version is also reflected in the package name of the\ninterface, which must end in `v<major-version>`, as in\n`google.feature.v1`. For major versions 0 and 1, the suffix can\nbe omitted. Zero major versions must only be used for\nexperimental, non-GA interfaces."
                  },
                  "sourceContext": {
                    "type": "SourceContext",
                    "id": 5,
                    "comment": "Source context for the protocol buffer service represented by this\nmessage."
                  },
                  "mixins": {
                    "rule": "repeated",
                    "type": "Mixin",
                    "id": 6,
                    "comment": "Included interfaces. See [Mixin][]."
                  },
                  "syntax": {
                    "type": "Syntax",
                    "id": 7,
                    "comment": "The source syntax of the service."
                  }
                },
                "comment": "Api is a light-weight descriptor for an API Interface.\n\nInterfaces are also described as \"protocol buffer services\" in some contexts,\nsuch as by the \"service\" keyword in a .proto file, but they are different\nfrom API Services, which represent a concrete implementation of an interface\nas opposed to simply a description of methods and bindings. They are also\nsometimes simply referred to as \"APIs\" in other contexts, such as the name of\nthis message itself. See https://cloud.google.com/apis/design/glossary for\ndetailed terminology."
              },
              "Method": {
                "fields": {
                  "name": {
                    "type": "string",
                    "id": 1,
                    "comment": "The simple name of this method."
                  },
                  "requestTypeUrl": {
                    "type": "string",
                    "id": 2,
                    "comment": "A URL of the input message type."
                  },
                  "requestStreaming": {
                    "type": "bool",
                    "id": 3,
                    "comment": "If true, the request is streamed."
                  },
                  "responseTypeUrl": {
                    "type": "string",
                    "id": 4,
                    "comment": "The URL of the output message type."
                  },
                  "responseStreaming": {
                    "type": "bool",
                    "id": 5,
                    "comment": "If true, the response is streamed."
                  },
                  "options": {
                    "rule": "repeated",
                    "type": "Option",
                    "id": 6,
                    "comment": "Any metadata attached to the method."
                  },
                  "syntax": {
                    "type": "Syntax",
                    "id": 7,
                    "comment": "The source syntax of this method."
                  }
                },
                "comment": "Method represents a method of an API interface."
              },
              "Mixin": {
                "fields": {
                  "name": {
                    "type": "string",
                    "id": 1,
                    "comment": "The fully qualified name of the interface which is included."
                  },
                  "root": {
                    "type": "string",
                    "id": 2,
                    "comment": "If non-empty specifies a path under which inherited HTTP paths\nare rooted."
                  }
                },
                "comment": "Declares an API Interface to be included in this interface. The including\ninterface must redeclare all the methods from the included interface, but\ndocumentation and options are inherited as follows:\n\n- If after comment and whitespace stripping, the documentation\nstring of the redeclared method is empty, it will be inherited\nfrom the original method.\n\n- Each annotation belonging to the service config (http,\nvisibility) which is not set in the redeclared method will be\ninherited.\n\n- If an http annotation is inherited, the path pattern will be\nmodified as follows. Any version prefix will be replaced by the\nversion of the including interface plus the [root][] path if\nspecified.\n\nExample of a simple mixin:\n\npackage google.acl.v1;\nservice AccessControl {\n// Get the underlying ACL object.\nrpc GetAcl(GetAclRequest) returns (Acl) {\noption (google.api.http).get = \"/v1/{resource=**}:getAcl\";\n}\n}\n\npackage google.storage.v2;\nservice Storage {\nrpc GetAcl(GetAclRequest) returns (Acl);\n\n// Get a data record.\nrpc GetData(GetDataRequest) returns (Data) {\noption (google.api.http).get = \"/v2/{resource=**}\";\n}\n}\n\nExample of a mixin configuration:\n\napis:\n- name: google.storage.v2.Storage\nmixins:\n- name: google.acl.v1.AccessControl\n\nThe mixin construct implies that all methods in `AccessControl` are\nalso declared with same name and request/response types in\n`Storage`. A documentation generator or annotation processor will\nsee the effective `Storage.GetAcl` method after inherting\ndocumentation and annotations as follows:\n\nservice Storage {\n// Get the underlying ACL object.\nrpc GetAcl(GetAclRequest) returns (Acl) {\noption (google.api.http).get = \"/v2/{resource=**}:getAcl\";\n}\n...\n}\n\nNote how the version in the path pattern changed from `v1` to `v2`.\n\nIf the `root` field in the mixin is specified, it should be a\nrelative path under which inherited HTTP paths are placed. Example:\n\napis:\n- name: google.storage.v2.Storage\nmixins:\n- name: google.acl.v1.AccessControl\nroot: acls\n\nThis implies the following inherited HTTP annotation:\n\nservice Storage {\n// Get the underlying ACL object.\nrpc GetAcl(GetAclRequest) returns (Acl) {\noption (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\";\n}\n...\n}"
              }
            }
          }
        }
      }
    }
  }
}