{
  "package": "cosmos.orm.v1alpha1",
  "imports": [
    "google/protobuf/descriptor.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "orm": {
            "nested": {
              "v1alpha1": {
                "nested": {
                  "moduleSchema": {
                    "type": "ModuleSchemaDescriptor",
                    "id": 104503792,
                    "extend": "google.protobuf.MessageOptions",
                    "comment": "module_schema is used to define the ORM schema for an app module.\nAll module config messages that use module_schema must also declare\nthemselves as app module config messages using the cosmos.app.v1.is_module\noption."
                  },
                  "ModuleSchemaDescriptor": {
                    "fields": {
                      "schemaFile": {
                        "rule": "repeated",
                        "type": "FileEntry",
                        "id": 1,
                        "comment": null
                      },
                      "prefix": {
                        "type": "bytes",
                        "id": 2,
                        "comment": "prefix is an optional prefix that precedes all keys in this module's\nstore."
                      }
                    },
                    "nested": {
                      "FileEntry": {
                        "fields": {
                          "id": {
                            "type": "uint32",
                            "id": 1,
                            "comment": "id is a prefix that will be varint encoded and prepended to all the\ntable keys specified in the file's tables."
                          },
                          "protoFileName": {
                            "type": "string",
                            "id": 2,
                            "comment": "proto_file_name is the name of a file .proto in that contains\ntable definitions. The .proto file must be in a package that the\nmodule has referenced using cosmos.app.v1.ModuleDescriptor.use_package."
                          },
                          "storageType": {
                            "type": "StorageType",
                            "id": 3,
                            "comment": "storage_type optionally indicates the type of storage this file's\ntables should used. If it is left unspecified, the default KV-storage\nof the app will be used."
                          }
                        },
                        "comment": "FileEntry describes an ORM file used in a module."
                      }
                    },
                    "comment": "ModuleSchemaDescriptor describe's a module's ORM schema."
                  },
                  "StorageType": {
                    "values": {
                      "STORAGE_TYPE_DEFAULT_UNSPECIFIED": 0,
                      "STORAGE_TYPE_MEMORY": 1,
                      "STORAGE_TYPE_TRANSIENT": 2,
                      "STORAGE_TYPE_INDEX": 3,
                      "STORAGE_TYPE_COMMITMENT": 4
                    },
                    "comment": "StorageType",
                    "comments": {
                      "STORAGE_TYPE_DEFAULT_UNSPECIFIED": "STORAGE_TYPE_DEFAULT_UNSPECIFIED indicates the persistent\nKV-storage where primary key entries are stored in merkle-tree\nbacked commitment storage and indexes and seqs are stored in\nfast index storage. Note that the Cosmos SDK before store/v2alpha1\ndoes not support this.",
                      "STORAGE_TYPE_MEMORY": "STORAGE_TYPE_MEMORY indicates in-memory storage that will be\nreloaded every time an app restarts. Tables with this type of storage\nwill by default be ignored when importing and exporting a module's\nstate from JSON.",
                      "STORAGE_TYPE_TRANSIENT": "STORAGE_TYPE_TRANSIENT indicates transient storage that is reset\nat the end of every block. Tables with this type of storage\nwill by default be ignored when importing and exporting a module's\nstate from JSON.",
                      "STORAGE_TYPE_INDEX": "STORAGE_TYPE_INDEX indicates persistent storage which is not backed\nby a merkle-tree and won't affect the app hash. Note that the Cosmos SDK\nbefore store/v2alpha1 does not support this.",
                      "STORAGE_TYPE_COMMITMENT": "STORAGE_TYPE_INDEX indicates persistent storage which is backed by\na merkle-tree. With this type of storage, both primary and index keys\nwill affect the app hash and this is generally less efficient\nthan using STORAGE_TYPE_DEFAULT_UNSPECIFIED which separates index\nkeys into index storage. Note that modules built with the\nCosmos SDK before store/v2alpha1 must specify STORAGE_TYPE_COMMITMENT\ninstead of STORAGE_TYPE_DEFAULT_UNSPECIFIED or STORAGE_TYPE_INDEX\nbecause this is the only type of persistent storage available."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}