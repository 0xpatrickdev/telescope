{
  "package": "cosmos.orm.v1",
  "imports": [
    "google/protobuf/descriptor.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "orm": {
            "nested": {
              "v1": {
                "nested": {
                  "table": {
                    "type": "TableDescriptor",
                    "id": 104503790,
                    "extend": "google.protobuf.MessageOptions",
                    "comment": "table specifies that this message will be used as an ORM table. It cannot\nbe used together with the singleton option."
                  },
                  "singleton": {
                    "type": "SingletonDescriptor",
                    "id": 104503791,
                    "extend": "google.protobuf.MessageOptions",
                    "comment": "singleton specifies that this message will be used as an ORM singleton. It cannot\nbe used together with the table option."
                  },
                  "TableDescriptor": {
                    "fields": {
                      "primaryKey": {
                        "type": "PrimaryKeyDescriptor",
                        "id": 1,
                        "comment": "primary_key defines the primary key for the table."
                      },
                      "index": {
                        "rule": "repeated",
                        "type": "SecondaryIndexDescriptor",
                        "id": 2,
                        "comment": "index defines one or more secondary indexes."
                      },
                      "id": {
                        "type": "uint32",
                        "id": 3,
                        "comment": "id is a non-zero integer ID that must be unique within the\ntables and singletons in this file. It may be deprecated in the future when this\ncan be auto-generated."
                      }
                    },
                    "comment": "TableDescriptor describes an ORM table."
                  },
                  "PrimaryKeyDescriptor": {
                    "fields": {
                      "fields": {
                        "type": "string",
                        "id": 1,
                        "comment": "fields is a comma-separated list of fields in the primary key. Spaces are\nnot allowed. Supported field types, their encodings, and any applicable constraints\nare described below.\n- uint32 are encoded as 2,3,4 or 5 bytes using a compact encoding that\nis suitable for sorted iteration (not varint encoding). This type is\nwell-suited for small integers.\n- uint64 are encoded as 2,4,6 or 9 bytes using a compact encoding that\nis suitable for sorted iteration (not varint encoding). This type is\nwell-suited for small integers such as auto-incrementing sequences.\n- fixed32, fixed64 are encoded as big-endian fixed width bytes and support\nsorted iteration. These types are well-suited for encoding fixed with\ndecimals as integers.\n- string's are encoded as raw bytes in terminal key segments and null-terminated\nin non-terminal segments. Null characters are thus forbidden in strings.\nstring fields support sorted iteration.\n- bytes are encoded as raw bytes in terminal segments and length-prefixed\nwith a 32-bit unsigned varint in non-terminal segments.\n- int32, sint32, int64, sint64, sfixed32, sfixed64 are encoded as fixed width bytes with\nan encoding that enables sorted iteration.\n- google.protobuf.Timestamp and google.protobuf.Duration are encoded\nas 12 bytes using an encoding that enables sorted iteration.\n- enum fields are encoded using varint encoding and do not support sorted\niteration.\n- bool fields are encoded as a single byte 0 or 1.\n\nAll other fields types are unsupported in keys including repeated and\noneof fields.\n\nPrimary keys are prefixed by the varint encoded table id and the byte 0x0\nplus any additional prefix specified by the schema."
                      },
                      "autoIncrement": {
                        "type": "bool",
                        "id": 2,
                        "comment": "auto_increment specifies that the primary key is generated by an\nauto-incrementing integer. If this is set to true fields must only\ncontain one field of that is of type uint64."
                      }
                    },
                    "comment": "PrimaryKeyDescriptor describes a table primary key."
                  },
                  "SecondaryIndexDescriptor": {
                    "fields": {
                      "fields": {
                        "type": "string",
                        "id": 1,
                        "comment": "fields is a comma-separated list of fields in the index. The supported\nfield types are the same as those for PrimaryKeyDescriptor.fields.\nIndex keys are prefixed by the varint encoded table id and the varint\nencoded index id plus any additional prefix specified by the schema.\n\nIn addition the the field segments, non-unique index keys are suffixed with\nany additional primary key fields not present in the index fields so that the\nprimary key can be reconstructed. Unique indexes instead of being suffixed\nstore the remaining primary key fields in the value.."
                      },
                      "id": {
                        "type": "uint32",
                        "id": 2,
                        "comment": "id is a non-zero integer ID that must be unique within the indexes for this\ntable and less than 32768. It may be deprecated in the future when this can\nbe auto-generated."
                      },
                      "unique": {
                        "type": "bool",
                        "id": 3,
                        "comment": "unique specifies that this an unique index."
                      }
                    },
                    "comment": "PrimaryKeyDescriptor describes a table secondary index."
                  },
                  "SingletonDescriptor": {
                    "fields": {
                      "id": {
                        "type": "uint32",
                        "id": 1,
                        "comment": "id is a non-zero integer ID that must be unique within the\ntables and singletons in this file. It may be deprecated in the future when this\ncan be auto-generated."
                      }
                    },
                    "comment": "TableDescriptor describes an ORM singleton table which has at most one instance."
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}