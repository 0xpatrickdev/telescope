{
  "package": "cosmos.app.v1alpha1",
  "imports": [
    "google/protobuf/descriptor.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "app": {
            "nested": {
              "v1alpha1": {
                "nested": {
                  "module": {
                    "type": "ModuleDescriptor",
                    "id": 57193479,
                    "extend": "google.protobuf.MessageOptions",
                    "comment": "module indicates that this proto type is a config object for an app module\nand optionally provides other descriptive information about the module.\nIt is recommended that a new module config object and go module is versioned\nfor every state machine breaking version of a module. The recommended\npattern for doing this is to put module config objects in a separate proto\npackage from the API they expose. Ex: the cosmos.group.v1 API would be\nexposed by module configs cosmos.group.module.v1, cosmos.group.module.v2, etc."
                  },
                  "ModuleDescriptor": {
                    "fields": {
                      "goImport": {
                        "type": "string",
                        "id": 1,
                        "comment": "go_import names the package that should be imported by an app to load the\nmodule in the runtime module registry. Either go_import must be defined here\nor the go_package option must be defined at the file level to indicate\nto users where to location the module implementation. go_import takes\nprecedence over go_package when both are defined."
                      },
                      "usePackage": {
                        "rule": "repeated",
                        "type": "PackageReference",
                        "id": 2,
                        "comment": "use_package refers to a protobuf package that this module\nuses and exposes to the world. In an app, only one module should \"use\"\nor own a single protobuf package. It is assumed that the module uses\nall of the .proto files in a single package."
                      },
                      "canMigrateFrom": {
                        "rule": "repeated",
                        "type": "MigrateFromInfo",
                        "id": 3,
                        "comment": "can_migrate_from defines which module versions this module can migrate\nstate from. The framework will check that one module version is able to\nmigrate from a previous module version before attempting to update its\nconfig. It is assumed that modules can transitively migrate from earlier\nversions. For instance if v3 declares it can migrate from v2, and v2\ndeclares it can migrate from v1, the framework knows how to migrate\nfrom v1 to v3, assuming all 3 module versions are registered at runtime."
                      }
                    },
                    "comment": "ModuleDescriptor describes an app module."
                  },
                  "PackageReference": {
                    "fields": {
                      "name": {
                        "type": "string",
                        "id": 1,
                        "comment": "name is the fully-qualified name of the package."
                      },
                      "revision": {
                        "type": "uint32",
                        "id": 2,
                        "comment": "revision is the optional revision of the package that is being used.\nProtobuf packages used in Cosmos should generally have a major version\nas the last part of the package name, ex. foo.bar.baz.v1.\nThe revision of a package can be thought of as the minor version of a\npackage which has additional backwards compatible definitions that weren't\npresent in a previous version.\n\nA package should indicate its revision with a source code comment\nabove the package declaration in one of its fields containing the\ntest \"Revision N\" where N is an integer revision. All packages start\nat revision 0 the first time they are released in a module.\n\nWhen a new version of a module is released and items are added to existing\n.proto files, these definitions should contain comments of the form\n\"Since Revision N\" where N is an integer revision.\n\nWhen the module runtime starts up, it will check the pinned proto\nimage and panic if there are runtime protobuf definitions that are not\nin the pinned descriptor which do not have\na \"Since Revision N\" comment or have a \"Since Revision N\" comment where\nN is <= to the revision specified here. This indicates that the protobuf\nfiles have been updated, but the pinned file descriptor hasn't.\n\nIf there are items in the pinned file descriptor with a revision\ngreater than the value indicated here, this will also cause a panic\nas it may mean that the pinned descriptor for a legacy module has been\nimproperly updated or that there is some other versioning discrepancy.\nRuntime protobuf definitions will also be checked for compatibility\nwith pinned file descriptors to make sure there are no incompatible changes.\n\nThis behavior ensures that:\n* pinned proto images are up-to-date\n* protobuf files are carefully annotated with revision comments which\nare important good client UX\n* protobuf files are changed in backwards and forwards compatible ways"
                      }
                    },
                    "comment": "PackageReference is a reference to a protobuf package used by a module."
                  },
                  "MigrateFromInfo": {
                    "fields": {
                      "module": {
                        "type": "string",
                        "id": 1,
                        "comment": "module is the fully-qualified protobuf name of the module config object\nfor the previous module version, ex: \"cosmos.group.module.v1.Module\"."
                      }
                    },
                    "comment": "MigrateFromInfo is information on a module version that a newer module\ncan migrate from."
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}