{
  "package": "cosmos.staking.v1beta1",
  "imports": [
    "gogoproto/gogo.proto",
    "google/protobuf/any.proto",
    "google/protobuf/duration.proto",
    "google/protobuf/timestamp.proto",
    "cosmos_proto/cosmos.proto",
    "cosmos/base/v1beta1/coin.proto",
    "tendermint/types/types.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "staking": {
            "nested": {
              "v1beta1": {
                "options": {
                  "go_package": "github.com/cosmos/cosmos-sdk/x/staking/types"
                },
                "nested": {
                  "HistoricalInfo": {
                    "fields": {
                      "header": {
                        "type": "tendermint.types.Header",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      },
                      "valset": {
                        "rule": "repeated",
                        "type": "Validator",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "HistoricalInfo contains header and validator information for a given block.\nIt is stored as part of staking module's state, which persists the `n` most\nrecent HistoricalInfo\n(`n` is set by the staking module's `historical_entries` parameter)."
                  },
                  "CommissionRates": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "rate": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "rate is the commission rate charged to delegators, as a fraction."
                      },
                      "maxRate": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
                      },
                      "maxChangeRate": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
                      }
                    },
                    "comment": "CommissionRates defines the initial commission rates to be used for creating\na validator."
                  },
                  "Commission": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "commissionRates": {
                        "type": "CommissionRates",
                        "id": 1,
                        "options": {
                          "(gogoproto.embed)": true,
                          "(gogoproto.nullable)": false
                        },
                        "comment": "commission_rates defines the initial commission rates to be used for creating a validator."
                      },
                      "updateTime": {
                        "type": "google.protobuf.Timestamp",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdtime)": true
                        },
                        "comment": "update_time is the last time the commission rate was changed."
                      }
                    },
                    "comment": "Commission defines commission parameters for a given validator."
                  },
                  "Description": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "moniker": {
                        "type": "string",
                        "id": 1,
                        "comment": "moniker defines a human-readable name for the validator."
                      },
                      "identity": {
                        "type": "string",
                        "id": 2,
                        "comment": "identity defines an optional identity signature (ex. UPort or Keybase)."
                      },
                      "website": {
                        "type": "string",
                        "id": 3,
                        "comment": "website defines an optional website link."
                      },
                      "securityContact": {
                        "type": "string",
                        "id": 4,
                        "comment": "security_contact defines an optional email for security contact."
                      },
                      "details": {
                        "type": "string",
                        "id": 5,
                        "comment": "details define other optional details."
                      }
                    },
                    "comment": "Description defines a validator description."
                  },
                  "Validator": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_stringer)": false,
                      "(gogoproto.goproto_getters)": false
                    },
                    "fields": {
                      "operatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "operator_address defines the address of the validator's operator; bech encoded in JSON."
                      },
                      "consensusPubkey": {
                        "type": "google.protobuf.Any",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.accepts_interface)": "cosmos.crypto.PubKey"
                        },
                        "comment": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
                      },
                      "jailed": {
                        "type": "bool",
                        "id": 3,
                        "comment": "jailed defined whether the validator has been jailed from bonded status or not."
                      },
                      "status": {
                        "type": "BondStatus",
                        "id": 4,
                        "comment": "status is the validator status (bonded/unbonding/unbonded)."
                      },
                      "tokens": {
                        "type": "string",
                        "id": 5,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "tokens define the delegated tokens (incl. self-delegation)."
                      },
                      "delegatorShares": {
                        "type": "string",
                        "id": 6,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "delegator_shares defines total shares issued to a validator's delegators."
                      },
                      "description": {
                        "type": "Description",
                        "id": 7,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "description defines the description terms for the validator."
                      },
                      "unbondingHeight": {
                        "type": "int64",
                        "id": 8,
                        "comment": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
                      },
                      "unbondingTime": {
                        "type": "google.protobuf.Timestamp",
                        "id": 9,
                        "options": {
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdtime)": true
                        },
                        "comment": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."
                      },
                      "commission": {
                        "type": "Commission",
                        "id": 10,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "commission defines the commission parameters."
                      },
                      "minSelfDelegation": {
                        "type": "string",
                        "id": 11,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "min_self_delegation is the validator's self declared minimum self delegation."
                      }
                    },
                    "comment": "Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."
                  },
                  "BondStatus": {
                    "options": {
                      "(gogoproto.goproto_enum_prefix)": false
                    },
                    "values": {
                      "BOND_STATUS_UNSPECIFIED": 0,
                      "BOND_STATUS_UNBONDED": 1,
                      "BOND_STATUS_UNBONDING": 2,
                      "BOND_STATUS_BONDED": 3
                    },
                    "comment": "BondStatus is the status of a validator.",
                    "comments": {
                      "BOND_STATUS_UNSPECIFIED": "UNSPECIFIED defines an invalid validator status.",
                      "BOND_STATUS_UNBONDED": "UNBONDED defines a validator that is not bonded.",
                      "BOND_STATUS_UNBONDING": "UNBONDING defines a validator that is unbonding.",
                      "BOND_STATUS_BONDED": "BONDED defines a validator that is bonded."
                    }
                  },
                  "ValAddresses": {
                    "options": {
                      "(gogoproto.goproto_stringer)": false,
                      "(gogoproto.stringer)": true
                    },
                    "fields": {
                      "addresses": {
                        "rule": "repeated",
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      }
                    },
                    "comment": "ValAddresses defines a repeated set of validator addresses."
                  },
                  "DVPair": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_getters)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      },
                      "validatorAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      }
                    },
                    "comment": "DVPair is struct that just has a delegator-validator pair with no other data.\nIt is intended to be used as a marshalable pointer. For example, a DVPair can\nbe used to construct the key to getting an UnbondingDelegation from state."
                  },
                  "DVPairs": {
                    "fields": {
                      "pairs": {
                        "rule": "repeated",
                        "type": "DVPair",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "DVPairs defines an array of DVPair objects."
                  },
                  "DVVTriplet": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_getters)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      },
                      "validatorSrcAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      },
                      "validatorDstAddress": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": null
                      }
                    },
                    "comment": "DVVTriplet is struct that just has a delegator-validator-validator triplet\nwith no other data. It is intended to be used as a marshalable pointer. For\nexample, a DVVTriplet can be used to construct the key to getting a\nRedelegation from state."
                  },
                  "DVVTriplets": {
                    "fields": {
                      "triplets": {
                        "rule": "repeated",
                        "type": "DVVTriplet",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "DVVTriplets defines an array of DVVTriplet objects."
                  },
                  "Delegation": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_getters)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "delegator_address is the bech32-encoded address of the delegator."
                      },
                      "validatorAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "validator_address is the bech32-encoded address of the validator."
                      },
                      "shares": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "shares define the delegation shares received."
                      }
                    },
                    "comment": "Delegation represents the bond with tokens held by an account. It is\nowned by one delegator, and is associated with the voting power of one\nvalidator."
                  },
                  "UnbondingDelegation": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_getters)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "delegator_address is the bech32-encoded address of the delegator."
                      },
                      "validatorAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "validator_address is the bech32-encoded address of the validator."
                      },
                      "entries": {
                        "rule": "repeated",
                        "type": "UnbondingDelegationEntry",
                        "id": 3,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "entries are the unbonding delegation entries."
                      }
                    },
                    "comment": "UnbondingDelegation stores all of a single delegator's unbonding bonds\nfor a single validator in an time-ordered list."
                  },
                  "UnbondingDelegationEntry": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "creationHeight": {
                        "type": "int64",
                        "id": 1,
                        "comment": "creation_height is the height which the unbonding took place."
                      },
                      "completionTime": {
                        "type": "google.protobuf.Timestamp",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdtime)": true
                        },
                        "comment": "completion_time is the unix time for unbonding completion."
                      },
                      "initialBalance": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "initial_balance defines the tokens initially scheduled to receive at completion."
                      },
                      "balance": {
                        "type": "string",
                        "id": 4,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "balance defines the tokens to receive at completion."
                      }
                    },
                    "comment": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
                  },
                  "RedelegationEntry": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "creationHeight": {
                        "type": "int64",
                        "id": 1,
                        "comment": "creation_height  defines the height which the redelegation took place."
                      },
                      "completionTime": {
                        "type": "google.protobuf.Timestamp",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdtime)": true
                        },
                        "comment": "completion_time defines the unix time for redelegation completion."
                      },
                      "initialBalance": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "initial_balance defines the initial balance when redelegation started."
                      },
                      "sharesDst": {
                        "type": "string",
                        "id": 4,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Dec",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "shares_dst is the amount of destination-validator shares created by redelegation."
                      }
                    },
                    "comment": "RedelegationEntry defines a redelegation object with relevant metadata."
                  },
                  "Redelegation": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_getters)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegatorAddress": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "delegator_address is the bech32-encoded address of the delegator."
                      },
                      "validatorSrcAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "validator_src_address is the validator redelegation source operator address."
                      },
                      "validatorDstAddress": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "validator_dst_address is the validator redelegation destination operator address."
                      },
                      "entries": {
                        "rule": "repeated",
                        "type": "RedelegationEntry",
                        "id": 4,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "entries are the redelegation entries."
                      }
                    },
                    "comment": "Redelegation contains the list of a particular delegator's redelegating bonds\nfrom a particular source validator to a particular destination validator."
                  },
                  "Params": {
                    "options": {
                      "(gogoproto.equal)": true,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "unbondingTime": {
                        "type": "google.protobuf.Duration",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false,
                          "(gogoproto.stdduration)": true
                        },
                        "comment": "unbonding_time is the time duration of unbonding."
                      },
                      "maxValidators": {
                        "type": "uint32",
                        "id": 2,
                        "comment": "max_validators is the maximum number of validators."
                      },
                      "maxEntries": {
                        "type": "uint32",
                        "id": 3,
                        "comment": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)."
                      },
                      "historicalEntries": {
                        "type": "uint32",
                        "id": 4,
                        "comment": "historical_entries is the number of historical entries to persist."
                      },
                      "bondDenom": {
                        "type": "string",
                        "id": 5,
                        "comment": "bond_denom defines the bondable coin denomination."
                      },
                      "minCommissionRate": {
                        "type": "string",
                        "id": 6,
                        "options": {
                          "(gogoproto.moretags)": "yaml:min_commission_rate",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Dec",
                          "(gogoproto.nullable)": false
                        },
                        "comment": "min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators"
                      }
                    },
                    "comment": "Params defines the parameters for the staking module."
                  },
                  "DelegationResponse": {
                    "options": {
                      "(gogoproto.equal)": false,
                      "(gogoproto.goproto_stringer)": false
                    },
                    "fields": {
                      "delegation": {
                        "type": "Delegation",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      },
                      "balance": {
                        "type": "cosmos.base.v1beta1.Coin",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "DelegationResponse is equivalent to Delegation except that it contains a\nbalance in addition to shares which is more suitable for client responses."
                  },
                  "RedelegationEntryResponse": {
                    "options": {
                      "(gogoproto.equal)": true
                    },
                    "fields": {
                      "redelegationEntry": {
                        "type": "RedelegationEntry",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      },
                      "balance": {
                        "type": "string",
                        "id": 4,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\ncontains a balance in addition to shares which is more suitable for client\nresponses."
                  },
                  "RedelegationResponse": {
                    "options": {
                      "(gogoproto.equal)": false
                    },
                    "fields": {
                      "redelegation": {
                        "type": "Redelegation",
                        "id": 1,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      },
                      "entries": {
                        "rule": "repeated",
                        "type": "RedelegationEntryResponse",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": null
                      }
                    },
                    "comment": "RedelegationResponse is equivalent to a Redelegation except that its entries\ncontain a balance in addition to shares which is more suitable for client\nresponses."
                  },
                  "Pool": {
                    "options": {
                      "(gogoproto.description)": true,
                      "(gogoproto.equal)": true
                    },
                    "fields": {
                      "notBondedTokens": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false,
                          "(gogoproto.jsontag)": "not_bonded_tokens"
                        },
                        "comment": null
                      },
                      "bondedTokens": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.Int",
                          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
                          "(gogoproto.nullable)": false,
                          "(gogoproto.jsontag)": "bonded_tokens"
                        },
                        "comment": null
                      }
                    },
                    "comment": "Pool is used for tracking bonded and not-bonded token supply of the bond\ndenomination."
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}