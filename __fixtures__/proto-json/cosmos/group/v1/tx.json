{
  "package": "cosmos.group.v1",
  "imports": [
    "gogoproto/gogo.proto",
    "cosmos_proto/cosmos.proto",
    "google/protobuf/any.proto",
    "cosmos/group/v1/types.proto",
    "cosmos/msg/v1/msg.proto"
  ],
  "syntax": "proto3",
  "root": {
    "nested": {
      "cosmos": {
        "nested": {
          "group": {
            "nested": {
              "v1": {
                "options": {
                  "go_package": "github.com/cosmos/cosmos-sdk/x/group"
                },
                "nested": {
                  "Msg": {
                    "methods": {
                      "CreateGroup": {
                        "requestType": "MsgCreateGroup",
                        "responseType": "MsgCreateGroupResponse",
                        "comment": "CreateGroup creates a new group with an admin account address, a list of members and some optional metadata."
                      },
                      "UpdateGroupMembers": {
                        "requestType": "MsgUpdateGroupMembers",
                        "responseType": "MsgUpdateGroupMembersResponse",
                        "comment": "UpdateGroupMembers updates the group members with given group id and admin address."
                      },
                      "UpdateGroupAdmin": {
                        "requestType": "MsgUpdateGroupAdmin",
                        "responseType": "MsgUpdateGroupAdminResponse",
                        "comment": "UpdateGroupAdmin updates the group admin with given group id and previous admin address."
                      },
                      "UpdateGroupMetadata": {
                        "requestType": "MsgUpdateGroupMetadata",
                        "responseType": "MsgUpdateGroupMetadataResponse",
                        "comment": "UpdateGroupMetadata updates the group metadata with given group id and admin address."
                      },
                      "CreateGroupPolicy": {
                        "requestType": "MsgCreateGroupPolicy",
                        "responseType": "MsgCreateGroupPolicyResponse",
                        "comment": "CreateGroupPolicy creates a new group policy using given DecisionPolicy."
                      },
                      "CreateGroupWithPolicy": {
                        "requestType": "MsgCreateGroupWithPolicy",
                        "responseType": "MsgCreateGroupWithPolicyResponse",
                        "comment": "CreateGroupWithPolicy creates a new group with policy."
                      },
                      "UpdateGroupPolicyAdmin": {
                        "requestType": "MsgUpdateGroupPolicyAdmin",
                        "responseType": "MsgUpdateGroupPolicyAdminResponse",
                        "comment": "UpdateGroupPolicyAdmin updates a group policy admin."
                      },
                      "UpdateGroupPolicyDecisionPolicy": {
                        "requestType": "MsgUpdateGroupPolicyDecisionPolicy",
                        "responseType": "MsgUpdateGroupPolicyDecisionPolicyResponse",
                        "comment": "UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated."
                      },
                      "UpdateGroupPolicyMetadata": {
                        "requestType": "MsgUpdateGroupPolicyMetadata",
                        "responseType": "MsgUpdateGroupPolicyMetadataResponse",
                        "comment": "UpdateGroupPolicyMetadata updates a group policy metadata."
                      },
                      "SubmitProposal": {
                        "requestType": "MsgSubmitProposal",
                        "responseType": "MsgSubmitProposalResponse",
                        "comment": "SubmitProposal submits a new proposal."
                      },
                      "WithdrawProposal": {
                        "requestType": "MsgWithdrawProposal",
                        "responseType": "MsgWithdrawProposalResponse",
                        "comment": "WithdrawProposal aborts a proposal."
                      },
                      "Vote": {
                        "requestType": "MsgVote",
                        "responseType": "MsgVoteResponse",
                        "comment": "Vote allows a voter to vote on a proposal."
                      },
                      "Exec": {
                        "requestType": "MsgExec",
                        "responseType": "MsgExecResponse",
                        "comment": "Exec executes a proposal."
                      },
                      "LeaveGroup": {
                        "requestType": "MsgLeaveGroup",
                        "responseType": "MsgLeaveGroupResponse",
                        "comment": "LeaveGroup allows a group member to leave the group."
                      }
                    },
                    "comment": "Msg is the cosmos.group.v1 Msg service."
                  },
                  "MsgCreateGroup": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "members": {
                        "rule": "repeated",
                        "type": "Member",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "members defines the group members."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "metadata is any arbitrary metadata to attached to the group."
                      }
                    },
                    "comment": "MsgCreateGroup is the Msg/CreateGroup request type."
                  },
                  "MsgCreateGroupResponse": {
                    "fields": {
                      "groupId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "group_id is the unique ID of the newly created group."
                      }
                    },
                    "comment": "MsgCreateGroupResponse is the Msg/CreateGroup response type."
                  },
                  "MsgUpdateGroupMembers": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "groupId": {
                        "type": "uint64",
                        "id": 2,
                        "comment": "group_id is the unique ID of the group."
                      },
                      "memberUpdates": {
                        "rule": "repeated",
                        "type": "Member",
                        "id": 3,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "member_updates is the list of members to update,\nset weight to 0 to remove a member."
                      }
                    },
                    "comment": "MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type."
                  },
                  "MsgUpdateGroupMembersResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type."
                  },
                  "MsgUpdateGroupAdmin": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the current account address of the group admin."
                      },
                      "groupId": {
                        "type": "uint64",
                        "id": 2,
                        "comment": "group_id is the unique ID of the group."
                      },
                      "newAdmin": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "new_admin is the group new admin account address."
                      }
                    },
                    "comment": "MsgUpdateGroupAdmin is the Msg/UpdateGroupAdmin request type."
                  },
                  "MsgUpdateGroupAdminResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type."
                  },
                  "MsgUpdateGroupMetadata": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "groupId": {
                        "type": "uint64",
                        "id": 2,
                        "comment": "group_id is the unique ID of the group."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "metadata is the updated group's metadata."
                      }
                    },
                    "comment": "MsgUpdateGroupMetadata is the Msg/UpdateGroupMetadata request type."
                  },
                  "MsgUpdateGroupMetadataResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupMetadataResponse is the Msg/UpdateGroupMetadata response type."
                  },
                  "MsgCreateGroupPolicy": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin",
                      "(gogoproto.goproto_getters)": false
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "groupId": {
                        "type": "uint64",
                        "id": 2,
                        "comment": "group_id is the unique ID of the group."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "metadata is any arbitrary metadata attached to the group policy."
                      },
                      "decisionPolicy": {
                        "type": "google.protobuf.Any",
                        "id": 4,
                        "options": {
                          "(cosmos_proto.accepts_interface)": "DecisionPolicy"
                        },
                        "comment": "decision_policy specifies the group policy's decision policy."
                      }
                    },
                    "comment": "MsgCreateGroupPolicy is the Msg/CreateGroupPolicy request type."
                  },
                  "MsgCreateGroupPolicyResponse": {
                    "fields": {
                      "address": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of the newly created group policy."
                      }
                    },
                    "comment": "MsgCreateGroupPolicyResponse is the Msg/CreateGroupPolicy response type."
                  },
                  "MsgUpdateGroupPolicyAdmin": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "address": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of the group policy."
                      },
                      "newAdmin": {
                        "type": "string",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "new_admin is the new group policy admin."
                      }
                    },
                    "comment": "MsgUpdateGroupPolicyAdmin is the Msg/UpdateGroupPolicyAdmin request type."
                  },
                  "MsgCreateGroupWithPolicy": {
                    "options": {
                      "(gogoproto.goproto_getters)": false
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group and group policy admin."
                      },
                      "members": {
                        "rule": "repeated",
                        "type": "Member",
                        "id": 2,
                        "options": {
                          "(gogoproto.nullable)": false
                        },
                        "comment": "members defines the group members."
                      },
                      "groupMetadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "group_metadata is any arbitrary metadata attached to the group."
                      },
                      "groupPolicyMetadata": {
                        "type": "string",
                        "id": 4,
                        "comment": "group_policy_metadata is any arbitrary metadata attached to the group policy."
                      },
                      "groupPolicyAsAdmin": {
                        "type": "bool",
                        "id": 5,
                        "comment": "group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group and group policy admin."
                      },
                      "decisionPolicy": {
                        "type": "google.protobuf.Any",
                        "id": 6,
                        "options": {
                          "(cosmos_proto.accepts_interface)": "DecisionPolicy"
                        },
                        "comment": "decision_policy specifies the group policy's decision policy."
                      }
                    },
                    "comment": "MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type."
                  },
                  "MsgCreateGroupWithPolicyResponse": {
                    "fields": {
                      "groupId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "group_id is the unique ID of the newly created group with policy."
                      },
                      "groupPolicyAddress": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "group_policy_address is the account address of the newly created group policy."
                      }
                    },
                    "comment": "MsgCreateGroupWithPolicyResponse is the Msg/CreateGroupWithPolicy response type."
                  },
                  "MsgUpdateGroupPolicyAdminResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupPolicyAdminResponse is the Msg/UpdateGroupPolicyAdmin response type."
                  },
                  "MsgUpdateGroupPolicyDecisionPolicy": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin",
                      "(gogoproto.goproto_getters)": false
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "address": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of group policy."
                      },
                      "decisionPolicy": {
                        "type": "google.protobuf.Any",
                        "id": 3,
                        "options": {
                          "(cosmos_proto.accepts_interface)": "DecisionPolicy"
                        },
                        "comment": "decision_policy is the updated group policy's decision policy."
                      }
                    },
                    "comment": "MsgUpdateGroupPolicyDecisionPolicy is the Msg/UpdateGroupPolicyDecisionPolicy request type."
                  },
                  "MsgUpdateGroupPolicyDecisionPolicyResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupPolicyDecisionPolicyResponse is the Msg/UpdateGroupPolicyDecisionPolicy response type."
                  },
                  "MsgUpdateGroupPolicyMetadata": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "admin"
                    },
                    "fields": {
                      "admin": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "admin is the account address of the group admin."
                      },
                      "address": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of group policy."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "metadata is the updated group policy metadata."
                      }
                    },
                    "comment": "MsgUpdateGroupPolicyMetadata is the Msg/UpdateGroupPolicyMetadata request type."
                  },
                  "MsgUpdateGroupPolicyMetadataResponse": {
                    "fields": {},
                    "comment": "MsgUpdateGroupPolicyMetadataResponse is the Msg/UpdateGroupPolicyMetadata response type."
                  },
                  "Exec": {
                    "values": {
                      "EXEC_UNSPECIFIED": 0,
                      "EXEC_TRY": 1
                    },
                    "comment": "Exec defines modes of execution of a proposal on creation or on new vote.",
                    "comments": {
                      "EXEC_UNSPECIFIED": "An empty value means that there should be a separate\nMsgExec request for the proposal to execute.",
                      "EXEC_TRY": "Try to execute the proposal immediately.\nIf the proposal is not allowed per the DecisionPolicy,\nthe proposal will still be open and could\nbe executed at a later point."
                    }
                  },
                  "MsgSubmitProposal": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "proposers",
                      "(gogoproto.goproto_getters)": false
                    },
                    "fields": {
                      "address": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of group policy."
                      },
                      "proposers": {
                        "rule": "repeated",
                        "type": "string",
                        "id": 2,
                        "comment": "proposers are the account addresses of the proposers.\nProposers signatures will be counted as yes votes."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 3,
                        "comment": "metadata is any arbitrary metadata to attached to the proposal."
                      },
                      "messages": {
                        "rule": "repeated",
                        "type": "google.protobuf.Any",
                        "id": 4,
                        "comment": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes."
                      },
                      "exec": {
                        "type": "Exec",
                        "id": 5,
                        "comment": "exec defines the mode of execution of the proposal,\nwhether it should be executed immediately on creation or not.\nIf so, proposers signatures are considered as Yes votes."
                      }
                    },
                    "comment": "MsgSubmitProposal is the Msg/SubmitProposal request type."
                  },
                  "MsgSubmitProposalResponse": {
                    "fields": {
                      "proposalId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "proposal is the unique ID of the proposal."
                      }
                    },
                    "comment": "MsgSubmitProposalResponse is the Msg/SubmitProposal response type."
                  },
                  "MsgWithdrawProposal": {
                    "fields": {
                      "proposalId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "proposal is the unique ID of the proposal."
                      },
                      "address": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the admin of the group policy or one of the proposer of the proposal."
                      }
                    },
                    "comment": "MsgWithdrawProposal is the Msg/WithdrawProposal request type."
                  },
                  "MsgWithdrawProposalResponse": {
                    "fields": {},
                    "comment": "MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type."
                  },
                  "MsgVote": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "voter"
                    },
                    "fields": {
                      "proposalId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "proposal is the unique ID of the proposal."
                      },
                      "voter": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "voter is the voter account address."
                      },
                      "option": {
                        "type": "VoteOption",
                        "id": 3,
                        "comment": "option is the voter's choice on the proposal."
                      },
                      "metadata": {
                        "type": "string",
                        "id": 4,
                        "comment": "metadata is any arbitrary metadata to attached to the vote."
                      },
                      "exec": {
                        "type": "Exec",
                        "id": 5,
                        "comment": "exec defines whether the proposal should be executed\nimmediately after voting or not."
                      }
                    },
                    "comment": "MsgVote is the Msg/Vote request type."
                  },
                  "MsgVoteResponse": {
                    "fields": {},
                    "comment": "MsgVoteResponse is the Msg/Vote response type."
                  },
                  "MsgExec": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "signer"
                    },
                    "fields": {
                      "proposalId": {
                        "type": "uint64",
                        "id": 1,
                        "comment": "proposal is the unique ID of the proposal."
                      },
                      "signer": {
                        "type": "string",
                        "id": 2,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "signer is the account address used to execute the proposal."
                      }
                    },
                    "comment": "MsgExec is the Msg/Exec request type."
                  },
                  "MsgExecResponse": {
                    "fields": {},
                    "comment": "MsgExecResponse is the Msg/Exec request type."
                  },
                  "MsgLeaveGroup": {
                    "options": {
                      "(cosmos.msg.v1.signer)": "address"
                    },
                    "fields": {
                      "address": {
                        "type": "string",
                        "id": 1,
                        "options": {
                          "(cosmos_proto.scalar)": "cosmos.AddressString"
                        },
                        "comment": "address is the account address of the group member."
                      },
                      "groupId": {
                        "type": "uint64",
                        "id": 2,
                        "comment": "group_id is the unique ID of the group."
                      }
                    },
                    "comment": "MsgLeaveGroup is the Msg/LeaveGroup request type."
                  },
                  "MsgLeaveGroupResponse": {
                    "fields": {},
                    "comment": "MsgLeaveGroupResponse is the Msg/LeaveGroup response type."
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}